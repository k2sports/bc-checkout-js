{"version":3,"file":"moneris-payment-method-6ea9211f.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/moneris-integration/src/moneris-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/moneris-integration/src/create-moneris-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/./packages/moneris-integration/src/MonerisPaymentMethod.tsx","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-widget-integration/src/EditButton.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentDescriptor.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentWidget.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx"],"sourcesContent":["import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type LanguageService,\n    type LegacyHostedFormOptions,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { isEmpty, map, omitBy } from 'lodash';\n\nimport {\n    HostedForm,\n    HostedFormOptions,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport MonerisStylingProps, {\n    MoneriesHostedFieldsQueryParams,\n    MonerisInitializationData,\n    MonerisResponseData,\n} from './moneris';\nimport MonerisPaymentInitializeOptions, {\n    WithMonerisPaymentInitializeOptions,\n} from './moneris-payment-initialize-options';\n\nconst IFRAME_NAME = 'moneris-payment-iframe';\nconst RESPONSE_SUCCESS_CODE = '001';\n\nexport default class MonerisPaymentStrategy {\n    private iframe?: HTMLIFrameElement;\n    private initializeOptions?: MonerisPaymentInitializeOptions;\n    private windowEventListener?: (response: MessageEvent) => void;\n\n    private hostedForm?: HostedForm;\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithMonerisPaymentInitializeOptions,\n    ): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n\n        const { moneris: monerisOptions, methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"methodId\" argument is not provided.',\n            );\n        }\n\n        if (!monerisOptions) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.moneris\" argument is not provided.',\n            );\n        }\n\n        this.initializeOptions = monerisOptions;\n\n        const { config, initializationData } =\n            state.getPaymentMethodOrThrow<MonerisInitializationData>(methodId);\n\n        if (!initializationData?.profileId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (monerisOptions.form && this.shouldShowTSVHostedForm(methodId)) {\n            this.hostedForm = await this.mountCardVerificationfields(monerisOptions.form);\n        }\n\n        if (!this.iframe) {\n            this.iframe = this.createIframe(\n                monerisOptions.containerId,\n                initializationData,\n                !!config.testMode,\n            );\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentInitializeOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        if (useStoreCredit) {\n            await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        if (payment.paymentData && isVaultedInstrument(payment.paymentData)) {\n            await this.executeWithVaulted(payment);\n\n            return;\n        }\n\n        return this.executeWithCC(payment);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.hostedForm) {\n            this.hostedForm.detach();\n        }\n\n        if (this.windowEventListener) {\n            window.removeEventListener('message', this.windowEventListener);\n            this.windowEventListener = undefined;\n        }\n\n        if (this.iframe && this.iframe.parentNode) {\n            this.iframe.parentNode.removeChild(this.iframe);\n            this.iframe = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private async executeWithCC(payment: OrderPaymentRequestBody): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(payment.methodId);\n\n        const testMode = paymentMethod.config.testMode;\n        const paymentData = payment.paymentData || {};\n\n        const instrumentSettings = isHostedInstrumentLike(paymentData)\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = instrumentSettings;\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            if (!this.iframe) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const frameref: Window | null = this.iframe.contentWindow;\n\n            if (frameref === null) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            frameref.postMessage('tokenize', this.monerisURL(!!testMode));\n\n            this.windowEventListener = (response: MessageEvent) => {\n                if (\n                    typeof response.data !== 'string' ||\n                    response.origin !== `https://${testMode ? 'esqa' : 'www3'}.moneris.com`\n                ) {\n                    return;\n                }\n\n                try {\n                    resolve(this.handleMonerisResponse(response));\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            window.addEventListener('message', this.windowEventListener);\n        });\n\n        if (nonce !== undefined) {\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce, shouldSaveInstrument, shouldSetAsDefaultInstrument },\n            });\n        }\n    }\n\n    private async executeWithVaulted(\n        payment: OrderPaymentRequestBody,\n    ): Promise<PaymentIntegrationSelectors> {\n        if (this.hostedForm) {\n            const form = this.hostedForm;\n\n            await form.validate();\n            await form.submit(payment);\n\n            return this.paymentIntegrationService.loadCurrentOrder();\n        }\n\n        return this.paymentIntegrationService.submitPayment(payment);\n    }\n\n    private shouldShowTSVHostedForm(methodId: string): boolean {\n        return this.isHostedPaymentFormEnabled(methodId) && this.isHostedFieldAvailable();\n    }\n\n    private isHostedPaymentFormEnabled(methodId: string): boolean {\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(methodId);\n\n        return Boolean(paymentMethod.config.isHostedFormEnabled);\n    }\n\n    private isHostedFieldAvailable(): boolean {\n        const options = this.getInitializeOptions();\n        const definedFields = omitBy(options.form?.fields, isEmpty);\n\n        return !isEmpty(definedFields);\n    }\n\n    private getInitializeOptions(): MonerisPaymentInitializeOptions {\n        if (!this.initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.initializeOptions;\n    }\n\n    private async mountCardVerificationfields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        const bigpayBaseUrl = this.paymentIntegrationService.getState().getStoreConfig()\n            ?.paymentSettings.bigpayBaseUrl;\n\n        if (!bigpayBaseUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const form = this.paymentIntegrationService.createHostedForm(bigpayBaseUrl, formOptions);\n\n        await form.attach();\n\n        return form;\n    }\n\n    private createIframe(\n        containerId: string,\n        initializationData: MonerisInitializationData,\n        testMode: boolean,\n        style?: MonerisStylingProps,\n    ): HTMLIFrameElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create iframe without valid container ID.');\n        }\n\n        const iframe: HTMLIFrameElement = document.createElement('iframe');\n        const monerisQueryParams: MoneriesHostedFieldsQueryParams = {\n            id: initializationData.profileId,\n            pmmsg: true,\n            display_labels: 1,\n            enable_exp: 1,\n            enable_cvd: 1,\n            css_body:\n                style?.cssBody ||\n                'font-family: Arial, Helvetica,sans-serif;background: transparent;',\n            css_textbox:\n                style?.cssTextbox ||\n                'border-radius:4px;border: 2px solid rgb(00,00,00);width: 100%;font-weight: 600;padding: 8px 8px;outline: 0;',\n            css_textbox_pan: style?.cssTextboxCardNumber || 'width: 240px;',\n            css_textbox_exp:\n                style?.cssTextboxExpiryDate || 'margin-bottom: 0;width: calc(30% - 12px);',\n            css_textbox_cvd: style?.cssTextboxCVV || 'margin-bottom: 0;width: calc(30% - 12px);',\n            css_input_label:\n                style?.cssInputLabel ||\n                'font-size: 10px;position: relative;top: 8px;left: 6px;background: rgb(255,255,255);padding: 3px 2px;color: rgb(66,66,66);font-weight: 600;z-index: 2;',\n            pan_label: initializationData.creditCardLabel || 'Credit Card Number',\n            exp_label: initializationData.expiryDateLabel || 'Expiration',\n            cvd_label: initializationData.cvdLabel || 'CVD',\n        };\n\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const queryString = map(monerisQueryParams, (value, key) => `${key}=${value}`).join('&');\n\n        iframe.width = '100%';\n        iframe.height = '100%';\n        iframe.name = IFRAME_NAME;\n        iframe.id = IFRAME_NAME;\n        iframe.style.border = 'none';\n        iframe.src = `${this.monerisURL(testMode)}?${queryString}`;\n        iframe.allow = 'payment';\n\n        container.appendChild(iframe);\n\n        return iframe;\n    }\n\n    private handleMonerisResponse(response: MessageEvent): string {\n        const monerisResponse: MonerisResponseData = JSON.parse(response.data);\n\n        if (monerisResponse.responseCode[0] !== RESPONSE_SUCCESS_CODE) {\n            throw new Error(monerisResponse.errorMessage);\n        }\n\n        return monerisResponse.dataKey;\n    }\n\n    private monerisURL(testMode: boolean): string {\n        return `https://${testMode ? 'esqa' : 'www3'}.moneris.com/HPPtoken/index.php`;\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport MonerisPaymentStrategy from './moneris-payment-strategy';\n\nconst createMonerisPaymentStrategy: PaymentStrategyFactory<MonerisPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new MonerisPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createMonerisPaymentStrategy, [{ id: 'moneris' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { type CardInstrument, type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { createMonerisPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/moneris';\nimport { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst MonerisPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const containerId = `moneris-iframe-container`;\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const initializeMonerisPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const paymentConfig = {\n                ...options,\n                integrations: [createMonerisPaymentStrategy],\n                moneris: {\n                    containerId,\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            };\n\n            return checkoutService.initializePayment(paymentConfig);\n        },\n        [containerId, getHostedFormOptions, checkoutService],\n    );\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMonerisPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n            validateInstrument={validateInstrument}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MonerisPaymentMethod,\n    [{ id: 'moneris' }],\n);\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import classNames from 'classnames';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\ninterface EditButtonProps {\n    buttonId: string | undefined;\n    shouldShowEditButton: boolean | undefined;\n}\n\nexport const EditButton = ({ buttonId, shouldShowEditButton }: EditButtonProps): ReactNode => {\n    if (shouldShowEditButton) {\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        return (\n            <p>\n                <button\n                    className={classNames('stepHeader', 'widget-link-amazonpay')}\n                    id={buttonId}\n                    onClick={preventDefault()}\n                    type=\"button\"\n                >\n                    {translatedString}\n                </button>\n            </p>\n        );\n    }\n\n    return null;\n};\n","import React, { type ReactNode } from 'react';\n\ninterface PaymentDescriptorProps {\n    paymentDescriptor: string | undefined;\n    shouldShowDescriptor: boolean | undefined;\n}\n\nexport const PaymentDescriptor = ({\n    shouldShowDescriptor,\n    paymentDescriptor,\n}: PaymentDescriptorProps): ReactNode => {\n    if (shouldShowDescriptor && paymentDescriptor) {\n        return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n    }\n\n    return null;\n};\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type ReactElement } from 'react';\n\ninterface PaymentWidgetProps {\n    additionalContainerClassName: string | undefined;\n    containerId: string;\n    hideContentWhenSignedOut: boolean;\n    hideWidget: boolean;\n    isSignInRequired: boolean | undefined;\n    isSignedIn: boolean;\n    method: PaymentMethod;\n    renderCustomPaymentForm: (() => React.ReactNode) | undefined;\n    shouldRenderCustomInstrument: boolean;\n    shouldShowCreditCardFieldset: boolean;\n}\n\nexport const PaymentWidget = ({\n    additionalContainerClassName,\n    containerId,\n    hideContentWhenSignedOut,\n    hideWidget,\n    isSignInRequired,\n    isSignedIn,\n    method,\n    renderCustomPaymentForm,\n    shouldRenderCustomInstrument,\n    shouldShowCreditCardFieldset,\n}: PaymentWidgetProps): ReactElement => (\n    <div\n        className={classNames(\n            'widget',\n            `widget--${method.id}`,\n            'payment-widget',\n            shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n        )}\n        id={containerId}\n        style={{\n            display:\n                (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                !shouldShowCreditCardFieldset ||\n                hideWidget\n                    ? 'none'\n                    : undefined,\n        }}\n        tabIndex={-1}\n    >\n        {shouldRenderCustomInstrument && renderCustomPaymentForm && renderCustomPaymentForm()}\n    </div>\n);\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { find, noop } from 'lodash';\nimport React, {\n    type ReactElement,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    isCardInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EditButton } from './EditButton';\nimport { PaymentDescriptor } from './PaymentDescriptor';\nimport { PaymentWidget } from './PaymentWidget';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\nconst HostedWidgetPaymentComponent = ({\n    instruments,\n    hideWidget = false,\n    isInitializing = false,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    isLoadingInstruments,\n    shouldHideInstrumentExpiryDate = false,\n    shouldShow = true,\n    hideVerificationFields,\n    method,\n    storedCardValidationSchema,\n    isPaymentDataRequired,\n    setValidationSchema,\n    loadInstruments,\n    onUnhandledError = noop,\n    deinitializeCustomer,\n    deinitializePayment,\n    setSubmit,\n    initializeCustomer,\n    initializePayment,\n    signInCustomer,\n    isSignedIn,\n    isSignInRequired,\n    isInstrumentCardNumberRequired,\n    validateInstrument,\n    containerId,\n    hideContentWhenSignedOut = false,\n    renderCustomPaymentForm,\n    additionalContainerClassName,\n    shouldRenderCustomInstrument = false,\n    paymentDescriptor,\n    shouldShowDescriptor,\n    shouldShowEditButton,\n    buttonId,\n    setFieldValue,\n}: HostedWidgetComponentProps & PaymentContextProps): ReactElement => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n    const instrumentsRef = useRef<PaymentInstrument[]>(instruments);\n\n    useEffect(() => {\n        instrumentsRef.current = instruments;\n    }, [instruments]);\n\n    const getDefaultInstrumentId = useCallback((): string | undefined => {\n        if (isAddingNewCard) {\n            return undefined;\n        }\n\n        const defaultInstrument =\n            instrumentsRef.current.find((instrument) => instrument.defaultInstrument) ||\n            instrumentsRef.current[0];\n\n        return defaultInstrument ? defaultInstrument.bigpayToken : undefined;\n    }, [isAddingNewCard]);\n\n    const getSelectedInstrument = useCallback((): PaymentInstrument | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n\n        return find(instrumentsRef.current, { bigpayToken: currentSelectedId });\n    }, [selectedInstrumentId, getDefaultInstrumentId]);\n\n    const getValidationSchema = useCallback((): ObjectSchema | null => {\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const currentSelectedInstrument = getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && currentSelectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }, [\n        getSelectedInstrument,\n        isInstrumentFeatureAvailableProp,\n        isPaymentDataRequired,\n        storedCardValidationSchema,\n    ]);\n\n    const getSelectedBankAccountInstrument = useCallback(\n        (\n            addingNew: boolean,\n            currentSelectedInstrument: PaymentInstrument,\n        ): AccountInstrument | undefined => {\n            return !addingNew && isBankAccountInstrument(currentSelectedInstrument)\n                ? currentSelectedInstrument\n                : undefined;\n        },\n        [],\n    );\n\n    const handleDeleteInstrument = useCallback(\n        (id: string): void => {\n            if (instruments.length === 0) {\n                setIsAddingNewCard(true);\n                setSelectedInstrumentId(undefined);\n                setFieldValue('instrumentId', '');\n\n                return;\n            }\n\n            if (selectedInstrumentId === id) {\n                const nextId = getDefaultInstrumentId();\n\n                setSelectedInstrumentId(nextId);\n                setFieldValue('instrumentId', nextId);\n            }\n        },\n        [instruments, selectedInstrumentId, getDefaultInstrumentId],\n    );\n\n    const handleUseNewCard = useCallback(async () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        if (deinitializePayment) {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n\n        if (initializePayment) {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n    }, [method, deinitializePayment, initializePayment]);\n\n    const handleSelectInstrument = useCallback((id: string) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    }, []);\n\n    const getValidateInstrument = useCallback((): ReactNode | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n        const currentSelectedInstrument = find(instruments, { bigpayToken: currentSelectedId });\n\n        if (currentSelectedInstrument) {\n            assertIsCardInstrument(currentSelectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequired(\n                currentSelectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return undefined;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, currentSelectedInstrument);\n            }\n        }\n\n        return undefined;\n    }, [\n        selectedInstrumentId,\n        getDefaultInstrumentId,\n        instruments,\n        method,\n        hideVerificationFields,\n        validateInstrument,\n    ]);\n\n    const initializeMethod = async (): Promise<CheckoutSelectors | void> => {\n        const currentInstruments = instrumentsRef.current;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return;\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer || null);\n\n            if (initializeCustomer) {\n                return initializeCustomer({ methodId: method.id });\n            }\n\n            return;\n        }\n\n        setSubmit(method, null);\n\n        let selectedCardInstrument: CardInstrument | undefined;\n\n        if (!isAddingNewCard) {\n            const currentSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n            const maybeInstrument =\n                currentInstruments.find(\n                    (instrument) => instrument.bigpayToken === currentSelectedInstrumentId,\n                ) || currentInstruments[0];\n\n            if (maybeInstrument && isCardInstrument(maybeInstrument)) {\n                selectedCardInstrument = maybeInstrument;\n            }\n        }\n\n        if (initializePayment) {\n            return initializePayment(\n                { gatewayId: method.gateway, methodId: method.id },\n                selectedCardInstrument,\n            );\n        }\n    };\n\n    // Below values are for lower level components\n    const effectiveSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n    const selectedInstrument = effectiveSelectedInstrumentId\n        ? instruments.find((i) => i.bigpayToken === effectiveSelectedInstrumentId) || instruments[0]\n        : instruments[0];\n    const cardInstruments: CardInstrument[] = instruments.filter(\n        (i): i is CardInstrument => !isBankAccountInstrument(i),\n    );\n    const accountInstruments: AccountInstrument[] = instruments.filter(\n        (i): i is AccountInstrument => isBankAccountInstrument(i),\n    );\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n    const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n    const selectedAccountInstrument = selectedInstrument\n        ? getSelectedBankAccountInstrument(isAddingNewCard, selectedInstrument)\n        : undefined;\n    const shouldShowAccountInstrument = instruments[0] && isBankAccountInstrument(instruments[0]);\n\n    useEffect(() => {\n        const init = async () => {\n            setValidationSchema(method, getValidationSchema());\n\n            try {\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments?.();\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void init();\n\n        return () => {\n            const deInit = async () => {\n                setValidationSchema(method, null);\n                setSubmit(method, null);\n\n                try {\n                    if (deinitializePayment) {\n                        await deinitializePayment({\n                            gatewayId: method.gateway,\n                            methodId: method.id,\n                        });\n                    }\n\n                    if (deinitializeCustomer) {\n                        await deinitializeCustomer({ methodId: method.id });\n                    }\n                } catch (error: unknown) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deInit();\n        };\n    }, []);\n\n    const isInitialRenderRef = useRef(true);\n    const instrumentsLength = useRef(instruments.length);\n    const isPaymentDataRequiredRef = useRef(isPaymentDataRequired);\n    const selectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    useEffect(() => {\n        if (isInitialRenderRef.current) {\n            isInitialRenderRef.current = false;\n\n            return;\n        }\n\n        setValidationSchema(method, getValidationSchema());\n\n        const reInit = async () => {\n            try {\n                if (deinitializePayment) {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (\n            selectedInstrumentIdRef.current !== selectedInstrumentId ||\n            (Number(instrumentsLength.current) > 0 && instruments.length === 0) ||\n            isPaymentDataRequiredRef.current !== isPaymentDataRequired\n        ) {\n            selectedInstrumentIdRef.current = selectedInstrumentId;\n            instrumentsLength.current = instruments.length;\n            isPaymentDataRequiredRef.current = isPaymentDataRequired;\n\n            void reInit();\n        }\n    }, [selectedInstrumentId, instruments, isPaymentDataRequired]);\n\n    if (!shouldShow) {\n        return <div style={{ display: 'none' }} />;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrument={selectedAccountInstrument}\n                    />\n                )}\n                {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        instruments={cardInstruments}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={effectiveSelectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                        validateInstrument={getValidateInstrument()}\n                    />\n                )}\n\n                <PaymentDescriptor\n                    paymentDescriptor={paymentDescriptor}\n                    shouldShowDescriptor={shouldShowDescriptor}\n                />\n\n                <PaymentWidget\n                    additionalContainerClassName={additionalContainerClassName}\n                    containerId={containerId}\n                    hideContentWhenSignedOut={hideContentWhenSignedOut}\n                    hideWidget={hideWidget}\n                    isSignInRequired={isSignInRequired}\n                    isSignedIn={isSignedIn}\n                    method={method}\n                    renderCustomPaymentForm={renderCustomPaymentForm}\n                    shouldRenderCustomInstrument={shouldRenderCustomInstrument}\n                    shouldShowCreditCardFieldset={shouldShowCreditCardFieldset}\n                />\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={effectiveSelectedInstrumentId}\n                        instruments={instruments}\n                        isAccountInstrument={Boolean(\n                            isAccountInstrument || shouldShowAccountInstrument,\n                        )}\n                    />\n                )}\n\n                <EditButton buttonId={buttonId} shouldShowEditButton={shouldShowEditButton} />\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedWidgetPaymentComponent;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n"],"names":["appearFocused","id","name","renderInput","useCallback","additionalClassName","input","labelContent","useHostedCreditCard","checkoutState","method","language","paymentForm","setFieldTouched","setFieldValue","setSubmitted","submitForm","config","cardCode","requireCardCode","isCardCodeRequired","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","getHostedFieldId","compact","gateway","join","focusedFieldType","setFocusedFieldType","useState","getHostedStoredCardValidationFieldset","selectedInstrument","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","cardCodeId","undefined","cardNumberId","getHostedFormOptions","styleProps","styleContainerId","fields","cardCodeVerification","accessibilityLabel","translate","containerId","instrumentId","bigpayToken","cardNumberVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","error","Error","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","errors","forIn","fieldErrors","errorKey","type","useMemo","placement","tooltip","className","isCardExpiryRequired","shape","required","hostedForm","test","message","value","cardExpiryVerification","CreditCardInputStylesType","getCreditCardInputStyles","properties","Default","container","document","createElement","parentContainer","getElementById","appendChild","Promise","resolve","Provider","isSubmitted","noop","hasError","ref","element","parentElement","removeChild","MissingDataErrorType","NotInitializedErrorType","StandardError","constructor","prototype","super","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","subtype","PaymentArgumentInvalidError","invalidFields","OrderFinalizationNotRequiredError","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","IFRAME_NAME","MonerisPaymentStrategy","paymentIntegrationService","initialize","options","state","getState","moneris","monerisOptions","methodId","initializeOptions","initializationData","getPaymentMethodOrThrow","profileId","form","shouldShowTSVHostedForm","mountCardVerificationfields","iframe","createIframe","testMode","execute","payload","payment","order","isStoreCreditApplied","useStoreCredit","getCheckoutOrThrow","instrument","applyStoreCredit","submitOrder","paymentData","Boolean","executeWithCC","executeWithVaulted","finalize","reject","deinitialize","detach","windowEventListener","window","removeEventListener","parentNode","instrumentSettings","shouldSaveInstrument","shouldSetAsDefaultInstrument","nonce","frameref","contentWindow","postMessage","monerisURL","response","data","origin","handleMonerisResponse","addEventListener","submitPayment","validate","submit","loadCurrentOrder","isHostedPaymentFormEnabled","isHostedFieldAvailable","paymentMethod","isHostedFormEnabled","getInitializeOptions","definedFields","omitBy","isEmpty","formOptions","bigpayBaseUrl","t","getStoreConfig","paymentSettings","createHostedForm","attach","style","monerisQueryParams","pmmsg","display_labels","enable_exp","enable_cvd","css_body","cssBody","css_textbox","cssTextbox","css_textbox_pan","cssTextboxCardNumber","css_textbox_exp","cssTextboxExpiryDate","css_textbox_cvd","cssTextboxCVV","css_input_label","cssInputLabel","pan_label","creditCardLabel","exp_label","expiryDateLabel","cvd_label","cvdLabel","queryString","map","key","width","height","border","src","allow","monerisResponse","JSON","parse","responseCode","errorMessage","dataKey","module","resolveIds","assign","checkoutService","rest","hostedStoredCardValidationSchema","getHostedInstrumentValidationSchema","hidePaymentSubmitButton","disableSubmit","setSubmit","setValidationSchema","instruments","getInstruments","getCheckout","isPaymentDataRequired","statuses","isLoadingInstruments","checkout","customer","getCustomer","isInstrumentFeatureAvailable","isGuest","isVaultingEnabled","initializeMonerisPayment","paymentConfig","integrations","initializePayment","HostedWidgetPaymentComponent","deinitializePayment","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","isSignedIn","some","payments","providerId","loadInstruments","signOut","signOutCustomer","storedCardValidationSchema","validateInstrument","_shouldShowNumber","testId","props","EditButton","buttonId","shouldShowEditButton","translatedString","TranslatedString","onClick","preventDefault","PaymentDescriptor","shouldShowDescriptor","paymentDescriptor","PaymentWidget","additionalContainerClassName","hideContentWhenSignedOut","hideWidget","isSignInRequired","renderCustomPaymentForm","shouldRenderCustomInstrument","shouldShowCreditCardFieldset","display","tabIndex","isInitializing","isAccountInstrument","isInstrumentFeatureAvailableProp","shouldHideInstrumentExpiryDate","shouldShow","hideVerificationFields","onUnhandledError","deinitializeCustomer","initializeCustomer","signInCustomer","isAddingNewCard","setIsAddingNewCard","selectedInstrumentId","setSelectedInstrumentId","instrumentsRef","useRef","useEffect","current","getDefaultInstrumentId","defaultInstrument","find","getSelectedInstrument","currentSelectedId","getValidationSchema","currentSelectedInstrument","getSelectedBankAccountInstrument","addingNew","handleDeleteInstrument","length","nextId","handleUseNewCard","gatewayId","handleSelectInstrument","getValidateInstrument","shouldShowNumberField","initializeMethod","currentInstruments","selectedCardInstrument","currentSelectedInstrumentId","maybeInstrument","isCardInstrument","effectiveSelectedInstrumentId","i","cardInstruments","filter","accountInstruments","shouldShowInstrumentFieldset","isLoading","selectedAccountInstrument","shouldShowAccountInstrument","isInitialRenderRef","instrumentsLength","isPaymentDataRequiredRef","selectedInstrumentIdRef","Number","LoadingOverlay","hideContentWhenLoading","AccountInstrumentFieldset","A","onSelectInstrument","onUseNewInstrument","CardInstrumentFieldset","onDeleteInstrument","shouldHideExpiryDate","StoreInstrumentFieldset","cardExpiryId"],"sourceRoot":""}