{"version":3,"file":"hosted-payment-method-b6d73f7b.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-payment-integration/src/HostedPaymentMethod.tsx","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconNewAccount.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts"],"sourcesContent":["import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedPaymentComponent } from './components';\n\nconst HostedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    onUnhandledError,\n    language,\n    paymentForm,\n}) => {\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            onUnhandledError={onUnhandledError}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedPaymentMethod,\n    [{ gateway: 'afterpay' }, { id: 'quadpay' }, { id: 'sezzle' }, { id: 'zip' }],\n);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import { type AccountInstrument, type AchInstrument, type BankInstrument, type PayPalInstrument } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, PureComponent, type ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { IconNewAccount, IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument | AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default AccountInstrumentSelect;\n","import { type AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, type ModalTriggerModalProps } from '../../ui/modal';\n\nimport AccountInstrumentSelect from './AccountInstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\n\nimport { type MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps, type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { type WithPaymentProps } from '../withPayment';\n\nexport interface HostedPaymentMethodProps {\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface WithCheckoutHostedPaymentMethodProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nclass HostedPaymentMethod extends Component<\n    HostedPaymentMethodProps &\n        WithCheckoutHostedPaymentMethodProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            description,\n            isInitializing = false,\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = this.props;\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n        const { instruments } = this.props;\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = this.props;\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutHostedPaymentMethodProps,\n    HostedPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n                isPaymentDataSubmitted,\n            },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const cart = getCart();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !cart || !customer || !method) {\n            return null;\n        }\n\n        const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n        const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n        return {\n            instruments: trustedInstruments,\n            isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n            isInstrumentFeatureAvailable:\n                !isPaymentDataSubmitted(method.id, method.gateway) &&\n                isInstrumentFeatureAvailable({\n                    config,\n                    customer,\n                    paymentMethod: method,\n                }),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n        };\n    };\n};\n\nexport default connectFormik(\n    withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(HostedPaymentMethod))),\n);\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n"],"names":["toResolvableComponent","checkoutService","checkoutState","method","onUnhandledError","language","paymentForm","HostedPaymentComponent","deinitializePayment","initializePayment","gateway","id","props","description","isInitializing","noop","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","trustedShippingAddress","isUsingMultiShipping","data","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","cart","config","customer","Error","currentMethodInstruments","trustedInstruments","isNewAddress","length","isInstrumentFeatureAvailable","paymentMethod","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","useCallback","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","methodId","error","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","withIconContainer","height","viewBox","width","xmlns","clipRule","d","fill","fillRule","AccountInstrumentSelect","PureComponent","componentDidMount","selectedInstrumentId","this","setTimeout","updateFieldValue","componentDidUpdate","prevProps","prevSelectedInstrumentId","componentWillUnmount","field","value","render","otherFieldProps","DropdownTrigger","dropdown","AccountInstrumentMenu","AccountInstrumentSelectButton","instrument","testId","type","form","setFieldValue","name","map","key","AccountInstrumentOption","onClick","AccountInstrumentUseNewButton","isBankAccountInstrument","BankInstrumentMenuItem","AccountInstrumentMenuItem","handleClick","externalId","IconPaypal","additionalClassName","size","Medium","TranslatedString","accountNumber","issuer","memo","renderInput","renderModal","ManageInstrumentsModal","Fieldset","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","TranslatedHtml","HostedPaymentMethod","Component","state","setState","LoadingOverlay","StoreInstrumentFieldset","connectFormik","withLanguage","withPayment","withCheckout","context","checkoutSettings","isCardVaultingEnabled","isVaultingEnabled","isGuest"],"sourceRoot":""}