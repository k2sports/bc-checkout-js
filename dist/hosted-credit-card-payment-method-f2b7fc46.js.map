{"version":3,"file":"hosted-credit-card-payment-method-f2b7fc46.js","mappings":"+JAUA,MAoBA,GAAe,QApB8D,EACzEA,SACAC,kBACAC,gBACAC,cACAC,WACAC,sBAGI,gBAAC,IAAyB,CACtBJ,gBAAiBA,EACjBC,cAAeA,EACfE,SAAUA,EACVJ,OAAQA,EACRK,iBAAkBA,EAClBF,YAAaA,KAOrB,CACI,CACIG,GAAI,sBAER,CAAEA,GAAI,cAAeC,QAAS,kBAC9B,CAAED,GAAI,cAAeC,QAAS,eAE9B,CAAED,GAAI,iB,+FCtBd,MAoCA,GAAe,QAlCV,I,IAAA,qBACDE,EAAoB,sCACpBC,EAAqC,eACrCC,EAAc,iCACdC,EAAgC,uBAChCC,EAAsB,kBACtBC,GAAiB,EACdC,GAAI,cAPN,mKASD,MAAMC,GACF,IAAAC,cACI,CAAOC,EAASC,KAAuB,iDACnC,OAAOL,EAAkB,OAAD,wBACjBI,GAAO,CACVE,WAAYX,GAAwB,CAChCY,WAAYZ,EAAqBU,MAG7C,KACA,CAACV,EAAsBK,IAG/B,OACI,gBAAC,IAAuB,iBAChBC,EAAI,CACRO,aAAcX,EACdY,qBAAsBV,EACtBW,gCAAiCd,EACjCI,kBAAmBE,EACnBS,2BAA4Bb,O","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/HostedCreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedCreditCardPaymentMethod.tsx"],"sourcesContent":["import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardComponent } from './components';\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    return (\n        <HostedCreditCardComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            language={language}\n            method={method}\n            onUnhandledError={onUnhandledError}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedCreditCardPaymentMethod,\n    [\n        {\n            id: 'hosted-credit-card',\n        },\n        { id: 'credit_card', gateway: 'bluesnapdirect' },\n        { id: 'credit_card', gateway: 'checkoutcom' },\n\n        { id: 'tdonlinemart' },\n    ],\n);\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    withHostedCreditCardFieldset,\n    type WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { type CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type HostedCreditCardPaymentMethodProps = Omit<\n    CreditCardPaymentMethodProps,\n    | 'cardFieldset'\n    | 'cardValidationSchema'\n    | 'storedCardValidationSchema'\n    | 'getStoredCardValidationFieldset'\n>;\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<\n    HostedCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    ...rest\n}) => {\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    creditCard: getHostedFormOptions && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    return (\n        <CreditCardPaymentMethod\n            {...rest}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default withHostedCreditCardFieldset(HostedCreditCardPaymentMethod);\n"],"names":["method","checkoutService","checkoutState","paymentForm","language","onUnhandledError","id","gateway","getHostedFormOptions","getHostedStoredCardValidationFieldset","hostedFieldset","hostedStoredCardValidationSchema","hostedValidationSchema","initializePayment","rest","initializeHostedCreditCardPayment","useCallback","options","selectedInstrument","creditCard","form","cardFieldset","cardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema"],"sourceRoot":""}