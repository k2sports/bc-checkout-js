{"version":3,"file":"adyen-v2-payment-method-71992aa9.js","mappings":"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","sources":["webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2PaymentMethod.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3PaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/hosted-widget-integration/src/EditButton.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentDescriptor.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentWidget.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx"],"sourcesContent":["export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { type Instrument, type LineItemMap, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import {\n    type AdyenValidationState,\n    type CardInstrument,\n    type LanguageService,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, useEffect, useState } from 'react';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV2CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n    language?: LanguageService;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV2CardValidation: FunctionComponent<AdyenV2CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n    language,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        {language?.translate(\n                            'payment.instrument_trusted_shipping_address_title_text',\n                        )}\n                    </strong>\n\n                    <br />\n\n                    {language?.translate('payment.instrument_trusted_shipping_address_text')}\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            {language?.translate('payment.credit_card_number_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            {language?.translate('payment.credit_card_cvv_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            {language?.translate('payment.credit_card_expiration_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV2CardValidation;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    useCheckout,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport type AdyenV2FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    showAdditionalActionContent: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV2Form: FunctionComponent<AdyenV2FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    showAdditionalActionContent,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    onUnhandledError,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    ...rest\n}) => {\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired },\n        },\n    } = useCheckout();\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={showAdditionalActionContent}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!showAdditionalActionContent && (\n                <div id={additionalActionContainerId} style={{ display: 'none' }} />\n            )}\n        </>\n    );\n};\n\nexport default AdyenV2Form;\n","import {\n    type AdyenCreditCardComponentOptions,\n    type AdyenIdealComponentOptions,\n    type AdyenValidationState,\n    type CardInstrument,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createAdyenV2PaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/adyen';\nimport React, { type FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { type HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV2CardValidation from './AdyenV2CardValidation';\nimport AdyenV2Form from './AdyenV2Form';\n\nexport interface AdyenOptions {\n    scheme: AdyenCreditCardComponentOptions;\n    bcmc: AdyenCreditCardComponentOptions;\n    ideal: AdyenIdealComponentOptions;\n}\n\nexport enum AdyenV2PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    ideal = 'ideal',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n    const [showAdditionalActionContent, setShowAdditionalActionContent] = useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const threeDS2ContainerId = `adyen-${method.id}-additional-action-component-field`;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const component = method.id as AdyenV2PaymentMethodType;\n    const shouldHideInstrumentExpiryDate = component === AdyenV2PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShowAdditionalActionContent(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setShowAdditionalActionContent(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setShowAdditionalActionContent(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n            const adyenOptions: AdyenOptions = {\n                [AdyenV2PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n                [AdyenV2PaymentMethodType.bcmc]: {\n                    hasHolderName: false,\n                },\n                [AdyenV2PaymentMethodType.ideal]: {\n                    showImage: true,\n                },\n            };\n\n            return checkoutService.initializePayment({\n                ...options,\n                integrations: [createAdyenV2PaymentStrategy],\n                adyenv2: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    threeDS2ContainerId,\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            threeDS2ContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV2CardValidation\n                cardValidationState={cardValidationState}\n                language={language}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV2Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                language={language}\n                                method={method}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                showAdditionalActionContent={showAdditionalActionContent}\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV2PaymentMethod,\n    [{ gateway: 'adyenv2' }],\n);\n","import {\n    type AdyenValidationState,\n    type CardInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, useEffect, useState } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV3CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV3CardValidation: FunctionComponent<AdyenV3CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            <TranslatedString id=\"payment.credit_card_number_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV3CardValidation;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\nimport { type Omit } from 'utility-types';\n\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport type AdyenV3FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    shouldRenderAdditionalActionContentModal: boolean;\n    isModalVisible: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV3Form: FunctionComponent<AdyenV3FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    shouldRenderAdditionalActionContentModal,\n    isModalVisible,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    checkoutState,\n    checkoutService,\n    onUnhandledError,\n    ...rest\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={shouldRenderAdditionalActionContentModal}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n                style={\n                    !isModalVisible && method.id === 'scheme'\n                        ? {\n                              overlay: {\n                                  display: 'none',\n                              },\n                          }\n                        : {}\n                }\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!shouldRenderAdditionalActionContentModal && <div id={additionalActionContainerId} />}\n        </>\n    );\n};\n\nexport default AdyenV3Form;\n","import {\n    type AdyenCreditCardComponentOptions,\n    type AdyenValidationState,\n    type CardInstrument,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createAdyenV3PaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/adyen';\nimport React, { type FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { type HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV3CardValidation from './AdyenV3CardValidation';\nimport AdyenV3Form from './AdyenV3Form';\n\nexport interface AdyenOptions {\n    [key: string]: AdyenCreditCardComponentOptions;\n}\n\nexport enum AdyenV3PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    onUnhandledError,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n\n    const [shouldRenderAdditionalActionContentModal, setShouldRenderAdditionalActionContentModal] =\n        useState<boolean>(false);\n    const [isAdditionalActionContentModalVisible, setIsAdditionalActionContentModalVisible] =\n        useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const component = method.id;\n    const shouldHideInstrumentExpiryDate = component === AdyenV3PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShouldRenderAdditionalActionContentModal(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onActionHandled = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(true);\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            const adyenOptions: AdyenOptions = {\n                [AdyenV3PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n\n            return checkoutService.initializePayment({\n                ...options,\n                integrations: [createAdyenV3PaymentStrategy],\n                adyenv3: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                        onActionHandled,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            onActionHandled,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV3CardValidation\n                cardValidationState={cardValidationState}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV3Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                hideContentWhenSignedOut\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                isModalVisible={isAdditionalActionContentModalVisible}\n                                language={language}\n                                method={method}\n                                onUnhandledError={onUnhandledError}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                shouldRenderAdditionalActionContentModal={\n                                    shouldRenderAdditionalActionContentModal\n                                }\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV3PaymentMethod,\n    [{ gateway: 'adyenv3' }],\n);\n","import {\n    type LineItemMap,\n    type PaymentInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => updateFieldValue(selectedInstrumentId));\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import classNames from 'classnames';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\ninterface EditButtonProps {\n    buttonId: string | undefined;\n    shouldShowEditButton: boolean | undefined;\n}\n\nexport const EditButton = ({ buttonId, shouldShowEditButton }: EditButtonProps): ReactNode => {\n    if (shouldShowEditButton) {\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        return (\n            <p>\n                <button\n                    className={classNames('stepHeader', 'widget-link-amazonpay')}\n                    id={buttonId}\n                    onClick={preventDefault()}\n                    type=\"button\"\n                >\n                    {translatedString}\n                </button>\n            </p>\n        );\n    }\n\n    return null;\n};\n","import React, { type ReactNode } from 'react';\n\ninterface PaymentDescriptorProps {\n    paymentDescriptor: string | undefined;\n    shouldShowDescriptor: boolean | undefined;\n}\n\nexport const PaymentDescriptor = ({\n    shouldShowDescriptor,\n    paymentDescriptor,\n}: PaymentDescriptorProps): ReactNode => {\n    if (shouldShowDescriptor && paymentDescriptor) {\n        return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n    }\n\n    return null;\n};\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type ReactElement } from 'react';\n\ninterface PaymentWidgetProps {\n    additionalContainerClassName: string | undefined;\n    containerId: string;\n    hideContentWhenSignedOut: boolean;\n    hideWidget: boolean;\n    isSignInRequired: boolean | undefined;\n    isSignedIn: boolean;\n    method: PaymentMethod;\n    renderCustomPaymentForm: (() => React.ReactNode) | undefined;\n    shouldRenderCustomInstrument: boolean;\n    shouldShowCreditCardFieldset: boolean;\n}\n\nexport const PaymentWidget = ({\n    additionalContainerClassName,\n    containerId,\n    hideContentWhenSignedOut,\n    hideWidget,\n    isSignInRequired,\n    isSignedIn,\n    method,\n    renderCustomPaymentForm,\n    shouldRenderCustomInstrument,\n    shouldShowCreditCardFieldset,\n}: PaymentWidgetProps): ReactElement => (\n    <div\n        className={classNames(\n            'widget',\n            `widget--${method.id}`,\n            'payment-widget',\n            shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n        )}\n        id={containerId}\n        style={{\n            display:\n                (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                !shouldShowCreditCardFieldset ||\n                hideWidget\n                    ? 'none'\n                    : undefined,\n        }}\n        tabIndex={-1}\n    >\n        {shouldRenderCustomInstrument && renderCustomPaymentForm && renderCustomPaymentForm()}\n    </div>\n);\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { find, noop } from 'lodash';\nimport React, {\n    type ReactElement,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    isCardInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EditButton } from './EditButton';\nimport { PaymentDescriptor } from './PaymentDescriptor';\nimport { PaymentWidget } from './PaymentWidget';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\nconst HostedWidgetPaymentComponent = ({\n    instruments,\n    hideWidget = false,\n    isInitializing = false,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    isLoadingInstruments,\n    shouldHideInstrumentExpiryDate = false,\n    shouldShow = true,\n    hideVerificationFields,\n    method,\n    storedCardValidationSchema,\n    isPaymentDataRequired,\n    setValidationSchema,\n    loadInstruments,\n    onUnhandledError = noop,\n    deinitializeCustomer,\n    deinitializePayment,\n    setSubmit,\n    initializeCustomer,\n    initializePayment,\n    signInCustomer,\n    isSignedIn,\n    isSignInRequired,\n    isInstrumentCardNumberRequired,\n    validateInstrument,\n    containerId,\n    hideContentWhenSignedOut = false,\n    renderCustomPaymentForm,\n    additionalContainerClassName,\n    shouldRenderCustomInstrument = false,\n    paymentDescriptor,\n    shouldShowDescriptor,\n    shouldShowEditButton,\n    buttonId,\n    setFieldValue,\n}: HostedWidgetComponentProps & PaymentContextProps): ReactElement => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n    const instrumentsRef = useRef<PaymentInstrument[]>(instruments);\n\n    useEffect(() => {\n        instrumentsRef.current = instruments;\n    }, [instruments]);\n\n    const getDefaultInstrumentId = useCallback((): string | undefined => {\n        if (isAddingNewCard) {\n            return undefined;\n        }\n\n        const defaultInstrument =\n            instrumentsRef.current.find((instrument) => instrument.defaultInstrument) ||\n            instrumentsRef.current[0];\n\n        return defaultInstrument ? defaultInstrument.bigpayToken : undefined;\n    }, [isAddingNewCard]);\n\n    const getSelectedInstrument = useCallback((): PaymentInstrument | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n\n        return find(instrumentsRef.current, { bigpayToken: currentSelectedId });\n    }, [selectedInstrumentId, getDefaultInstrumentId]);\n\n    const getValidationSchema = useCallback((): ObjectSchema | null => {\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const currentSelectedInstrument = getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && currentSelectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }, [\n        getSelectedInstrument,\n        isInstrumentFeatureAvailableProp,\n        isPaymentDataRequired,\n        storedCardValidationSchema,\n    ]);\n\n    const getSelectedBankAccountInstrument = useCallback(\n        (\n            addingNew: boolean,\n            currentSelectedInstrument: PaymentInstrument,\n        ): AccountInstrument | undefined => {\n            return !addingNew && isBankAccountInstrument(currentSelectedInstrument)\n                ? currentSelectedInstrument\n                : undefined;\n        },\n        [],\n    );\n\n    const handleDeleteInstrument = useCallback(\n        (id: string): void => {\n            if (instruments.length === 0) {\n                setIsAddingNewCard(true);\n                setSelectedInstrumentId(undefined);\n                setFieldValue('instrumentId', '');\n\n                return;\n            }\n\n            if (selectedInstrumentId === id) {\n                const nextId = getDefaultInstrumentId();\n\n                setSelectedInstrumentId(nextId);\n                setFieldValue('instrumentId', nextId);\n            }\n        },\n        [instruments, selectedInstrumentId, getDefaultInstrumentId],\n    );\n\n    const handleUseNewCard = useCallback(async () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        if (deinitializePayment) {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n\n        if (initializePayment) {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n    }, [method, deinitializePayment, initializePayment]);\n\n    const handleSelectInstrument = useCallback((id: string) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    }, []);\n\n    const getValidateInstrument = useCallback((): ReactNode | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n        const currentSelectedInstrument = find(instruments, { bigpayToken: currentSelectedId });\n\n        if (currentSelectedInstrument) {\n            assertIsCardInstrument(currentSelectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequired(\n                currentSelectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return undefined;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, currentSelectedInstrument);\n            }\n        }\n\n        return undefined;\n    }, [\n        selectedInstrumentId,\n        getDefaultInstrumentId,\n        instruments,\n        method,\n        hideVerificationFields,\n        validateInstrument,\n    ]);\n\n    const initializeMethod = async (): Promise<CheckoutSelectors | void> => {\n        const currentInstruments = instrumentsRef.current;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return;\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer || null);\n\n            if (initializeCustomer) {\n                return initializeCustomer({ methodId: method.id });\n            }\n\n            return;\n        }\n\n        setSubmit(method, null);\n\n        let selectedCardInstrument: CardInstrument | undefined;\n\n        if (!isAddingNewCard) {\n            const currentSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n            const maybeInstrument =\n                currentInstruments.find(\n                    (instrument) => instrument.bigpayToken === currentSelectedInstrumentId,\n                ) || currentInstruments[0];\n\n            if (maybeInstrument && isCardInstrument(maybeInstrument)) {\n                selectedCardInstrument = maybeInstrument;\n            }\n        }\n\n        if (initializePayment) {\n            return initializePayment(\n                { gatewayId: method.gateway, methodId: method.id },\n                selectedCardInstrument,\n            );\n        }\n    };\n\n    // Below values are for lower level components\n    const effectiveSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n    const selectedInstrument = effectiveSelectedInstrumentId\n        ? instruments.find((i) => i.bigpayToken === effectiveSelectedInstrumentId) || instruments[0]\n        : instruments[0];\n    const cardInstruments: CardInstrument[] = instruments.filter(\n        (i): i is CardInstrument => !isBankAccountInstrument(i),\n    );\n    const accountInstruments: AccountInstrument[] = instruments.filter(\n        (i): i is AccountInstrument => isBankAccountInstrument(i),\n    );\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n    const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n    const selectedAccountInstrument = selectedInstrument\n        ? getSelectedBankAccountInstrument(isAddingNewCard, selectedInstrument)\n        : undefined;\n    const shouldShowAccountInstrument = instruments[0] && isBankAccountInstrument(instruments[0]);\n\n    useEffect(() => {\n        const init = async () => {\n            setValidationSchema(method, getValidationSchema());\n\n            try {\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments?.();\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void init();\n\n        return () => {\n            const deInit = async () => {\n                setValidationSchema(method, null);\n                setSubmit(method, null);\n\n                try {\n                    if (deinitializePayment) {\n                        await deinitializePayment({\n                            gatewayId: method.gateway,\n                            methodId: method.id,\n                        });\n                    }\n\n                    if (deinitializeCustomer) {\n                        await deinitializeCustomer({ methodId: method.id });\n                    }\n                } catch (error: unknown) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deInit();\n        };\n    }, []);\n\n    const isInitialRenderRef = useRef(true);\n    const instrumentsLength = useRef(instruments.length);\n    const isPaymentDataRequiredRef = useRef(isPaymentDataRequired);\n    const selectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    useEffect(() => {\n        if (isInitialRenderRef.current) {\n            isInitialRenderRef.current = false;\n\n            return;\n        }\n\n        setValidationSchema(method, getValidationSchema());\n\n        const reInit = async () => {\n            try {\n                if (deinitializePayment) {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (\n            selectedInstrumentIdRef.current !== selectedInstrumentId ||\n            (Number(instrumentsLength.current) > 0 && instruments.length === 0) ||\n            isPaymentDataRequiredRef.current !== isPaymentDataRequired\n        ) {\n            selectedInstrumentIdRef.current = selectedInstrumentId;\n            instrumentsLength.current = instruments.length;\n            isPaymentDataRequiredRef.current = isPaymentDataRequired;\n\n            void reInit();\n        }\n    }, [selectedInstrumentId, instruments, isPaymentDataRequired]);\n\n    if (!shouldShow) {\n        return <div style={{ display: 'none' }} />;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrument={selectedAccountInstrument}\n                    />\n                )}\n                {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        instruments={cardInstruments}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={effectiveSelectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                        validateInstrument={getValidateInstrument()}\n                    />\n                )}\n\n                <PaymentDescriptor\n                    paymentDescriptor={paymentDescriptor}\n                    shouldShowDescriptor={shouldShowDescriptor}\n                />\n\n                <PaymentWidget\n                    additionalContainerClassName={additionalContainerClassName}\n                    containerId={containerId}\n                    hideContentWhenSignedOut={hideContentWhenSignedOut}\n                    hideWidget={hideWidget}\n                    isSignInRequired={isSignInRequired}\n                    isSignedIn={isSignedIn}\n                    method={method}\n                    renderCustomPaymentForm={renderCustomPaymentForm}\n                    shouldRenderCustomInstrument={shouldRenderCustomInstrument}\n                    shouldShowCreditCardFieldset={shouldShowCreditCardFieldset}\n                />\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={effectiveSelectedInstrumentId}\n                        instruments={instruments}\n                        isAccountInstrument={Boolean(\n                            isAccountInstrument || shouldShowAccountInstrument,\n                        )}\n                    />\n                )}\n\n                <EditButton buttonId={buttonId} shouldShowEditButton={shouldShowEditButton} />\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedWidgetPaymentComponent;\n"],"names":["mapFromInstrumentCardType","type","data","cart","getCart","lineItems","instrument","paymentMethod","isVaultingCardNumberValidationAvailable","initializationData","physicalItems","length","trustedShippingAddress","isInstrumentCardNumberRequired","AdyenCardFields","getInitialValidationState","shouldShowNumberField","method","validationState","CardNumber","valid","SecurityCode","ExpiryDate","isFieldInvalid","fieldKey","fieldsValidation","verificationFieldsContainerId","selectedInstrument","cardValidationState","language","setFieldsValidation","useState","useEffect","fieldType","endDigits","last4","bigpayToken","showValidationIcon","key","className","style","transform","right","alt","src","translate","id","htmlFor","containerId","initializePayment","isAccountInstrument","shouldHideInstrumentExpiryDate","validateInstrument","showAdditionalActionContent","cancelAdditionalActionModalFlow","additionalActionContainerId","onUnhandledError","checkoutService","checkoutState","paymentForm","rest","hidePaymentSubmitButton","disableSubmit","setFieldValue","setSubmit","setValidationSchema","customer","getCustomer","isLoadingInstruments","statuses","instruments","getInstruments","isPaymentDataRequired","isSignedIn","isGuest","isInstrumentFeatureAvailable","Boolean","config","isVaultingEnabled","isInstrumentCardCodeRequired","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","HostedWidgetPaymentComponent","deinitializePayment","hideContentWhenSignedOut","loadInstruments","shouldRenderCustomInstrument","signOut","signOutCustomer","Modal","additionalBodyClassName","closeButtonLabel","isOpen","onRequestClose","shouldShowCloseButton","width","display","AdyenV2PaymentMethodType","toResolvableComponent","ref","useRef","shouldShowModal","setShowAdditionalActionContent","setCardValidationState","cardVerificationContainerId","threeDS2ContainerId","component","bcmc","onBeforeLoad","useCallback","shopperInteraction","current","onComplete","cancelAdditionalAction","undefined","onLoad","cancel","initializeAdyenPayment","options","selectedInstrumentId","adyenOptions","scheme","hasHolderName","holderNameRequired","ideal","showImage","integrations","adyenv2","hasVaultedInstruments","additionalActionOptions","widgetSize","validateCardFields","state","isLoading","isLoadingPaymentMethod","formContextProps","isSubmitted","setSubmitted","FormContext","Provider","value","CheckoutContext","LocaleProvider","PaymentFormContext","LoadingOverlay","hideContentWhenLoading","gateway","TranslatedString","UntrustedShippingCardVerificationType","shouldRenderAdditionalActionContentModal","isModalVisible","overlay","AdyenV3PaymentMethodType","setShouldRenderAdditionalActionContentModal","isAdditionalActionContentModalVisible","setIsAdditionalActionContentModalVisible","onActionHandled","adyenv3","PROVIDERS_WITHOUT_CARD_CODE","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","includes","provider","digitalItems","giftCertificates","InstrumentMenuItem","testId","shouldHideExpiryDate","onClick","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","cardTitle","niceType","endingIn","expiryDate","InstrumentOption","noop","handleClick","InstrumentUseNewButton","InstrumentMenu","onSelectInstrument","onUseNewInstrument","map","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","updateFieldValue","instrumentId","name","setTimeout","find","DropdownTrigger","dropdown","memo","onDeleteInstrument","renderInput","renderModal","props","ManageInstrumentsModal","Fieldset","additionalClassName","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","render","EditButton","buttonId","shouldShowEditButton","translatedString","preventDefault","PaymentDescriptor","shouldShowDescriptor","paymentDescriptor","PaymentWidget","additionalContainerClassName","hideWidget","isSignInRequired","renderCustomPaymentForm","shouldShowCreditCardFieldset","tabIndex","isInitializing","isInstrumentFeatureAvailableProp","shouldShow","hideVerificationFields","storedCardValidationSchema","deinitializeCustomer","initializeCustomer","signInCustomer","isAddingNewCard","setIsAddingNewCard","setSelectedInstrumentId","instrumentsRef","getDefaultInstrumentId","defaultInstrument","getSelectedInstrument","currentSelectedId","getValidationSchema","currentSelectedInstrument","getSelectedBankAccountInstrument","addingNew","handleDeleteInstrument","nextId","handleUseNewCard","gatewayId","methodId","handleSelectInstrument","getValidateInstrument","initializeMethod","currentInstruments","selectedCardInstrument","currentSelectedInstrumentId","maybeInstrument","isCardInstrument","effectiveSelectedInstrumentId","i","cardInstruments","filter","accountInstruments","shouldShowInstrumentFieldset","selectedAccountInstrument","shouldShowAccountInstrument","error","Error","isInitialRenderRef","instrumentsLength","isPaymentDataRequiredRef","selectedInstrumentIdRef","Number","AccountInstrumentFieldset","A","CardInstrumentFieldset","StoreInstrumentFieldset"],"sourceRoot":""}