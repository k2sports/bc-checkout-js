{"version":3,"file":"amazon-pay-v2-button-47978750.js","mappings":"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","sources":["webpack://checkout/./packages/ui/src/form/Fieldset/Fieldset.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/checkout-button-integration/src/CheckoutButton.tsx","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormContext.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIcon.tsx","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2PaymentMethod.tsx","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2Button.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isHTMLElement/isHTMLElement.ts","webpack://checkout/./packages/hosted-widget-integration/src/EditButton.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentDescriptor.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentWidget.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/ui/src/icon/mapFromPaymentMethodCardType.ts"],"sourcesContent":["import classNames from 'classnames';\nimport React, { type FieldsetHTMLAttributes, forwardRef, type ReactNode, type Ref } from 'react';\n\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\n    additionalClassName?: string;\n    testId?: string;\n    legend?: ReactNode;\n}\n\nconst Fieldset = forwardRef(\n    (\n        { additionalClassName, children, className, legend, testId, ...rest }: FieldsetProps,\n        ref: Ref<HTMLFieldSetElement>,\n    ) => (\n        <fieldset\n            {...rest}\n            className={className || classNames('form-fieldset', additionalClassName)}\n            data-test={testId}\n            ref={ref}\n        >\n            {legend}\n\n            <div className=\"form-body\">{children}</div>\n        </fieldset>\n    ),\n);\n\nexport default Fieldset;\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { type Instrument, type LineItemMap, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import {\n    type LineItemMap,\n    type PaymentInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => updateFieldValue(selectedInstrumentId));\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst CheckoutButton: FunctionComponent<CheckoutButtonProps> = ({\n    checkoutService: { deinitializeCustomer, initializeCustomer },\n    checkoutButtonContainerClass,\n    containerId,\n    methodId,\n    onUnhandledError,\n    onWalletButtonClick,\n    additionalInitializationOptions,\n    integrations,\n}) => {\n    const initializeCustomerStrategyOrThrow = async () => {\n        try {\n            await initializeCustomer({\n                methodId,\n                integrations,\n                [methodId]: {\n                    container: containerId,\n                    onUnhandledError,\n                    onClick: () => onWalletButtonClick(methodId),\n                    ...additionalInitializationOptions,\n                },\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeCustomerStrategyOrThrow = async () => {\n        try {\n            await deinitializeCustomer({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeCustomerStrategyOrThrow();\n\n        return () => {\n            void deinitializeCustomerStrategyOrThrow();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className={checkoutButtonContainerClass} data-test={containerId} id={containerId} />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    CheckoutButton,\n    [],\n);\n","import { createContext, useContext } from 'react';\n\nimport type PaymentMethodProps from '../../PaymentMethodProps';\n\nexport type PaymentFormContextProps = Pick<PaymentMethodProps, 'paymentForm'>;\n\nexport const PaymentFormContext = createContext<PaymentFormContextProps | undefined>(undefined);\n\nexport function usePaymentFormContext() {\n    const context = useContext(PaymentFormContext);\n\n    if (!context) {\n        throw new Error('usePaymentFormContext must be used within a PaymentFormContextProvider');\n    }\n\n    return context;\n}\n","import React, { type FunctionComponent, memo, Suspense } from 'react';\n\nimport { getPaymentMethodIconComponent } from './mapFromPaymentMethodCardType';\nimport { IconSize } from './withIconContainer';\n\nexport interface CreditCardIconProps {\n    cardType?: string;\n}\n\nconst CreditCardIcon: FunctionComponent<CreditCardIconProps> = ({ cardType }) => {\n    const iconProps = {\n        additionalClassName: 'cardIcon-icon',\n        size: IconSize.Medium,\n        testId: `credit-card-icon-${cardType || 'default'}`,\n    };\n\n    const IconComponent = getPaymentMethodIconComponent(cardType);\n\n    return IconComponent ? (\n        <Suspense>\n            <IconComponent {...iconProps} />\n        </Suspense>\n    ) : (\n        <div className=\"cardIcon-icon cardIcon-icon--default icon icon--medium\" />\n    );\n};\n\nexport default memo(CreditCardIcon);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AmazonPayV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    method: {\n        initializationData: { paymentDescriptor, paymentToken },\n    },\n    ...rest\n}) => {\n    const initializeAmazonPayV2Payment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                amazonpay: {\n                    editButtonId: 'editButtonId',\n                },\n            }),\n        [checkoutService],\n    );\n\n    const reload = useCallback(() => window.location.reload(), []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...rest}\n            buttonId=\"editButtonId\"\n            containerId=\"paymentWidget\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            hideWidget\n            initializePayment={initializeAmazonPayV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignInRequired={false}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            onSignOut={reload}\n            paymentDescriptor={paymentDescriptor}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldShow={!!paymentToken}\n            shouldShowDescriptor={!!paymentToken}\n            shouldShowEditButton={!!paymentToken}\n            signOut={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AmazonPayV2PaymentMethod,\n    [{ id: 'amazonpay' }],\n);\n","import { createAmazonPayV2CustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/amazon-pay';\nimport React, { type FunctionComponent, useEffect } from 'react';\n\nimport { CheckoutButton } from '@bigcommerce/checkout/checkout-button-integration';\nimport { isHTMLElement } from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst beautifyAmazonButton = (): void => {\n    if (!document.querySelector('.checkout-button-container')) {\n        return;\n    }\n\n    const container = document.querySelector('#amazonpayCheckoutButton > div');\n\n    if (container) {\n        const amazonButton = container.shadowRoot?.querySelector('.amazonpay-button-view1');\n\n        if (isHTMLElement(amazonButton)) {\n            amazonButton.style.height = '36px';\n\n            return;\n        }\n    }\n\n    setTimeout(beautifyAmazonButton, 10);\n};\n\nconst AmazonPayV2Button: FunctionComponent<CheckoutButtonProps> = (props) => {\n    useEffect(() => {\n        beautifyAmazonButton();\n    }, []);\n\n    return (\n        <div className=\"AmazonPayContainer\">\n            <CheckoutButton integrations={[createAmazonPayV2CustomerStrategy]} {...props} />\n        </div>\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    AmazonPayV2Button,\n    [{ id: 'amazonpay' }],\n);\n","export default function isHTMLElement(element: unknown): element is HTMLElement {\n    return element instanceof HTMLElement;\n}\n","import classNames from 'classnames';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\ninterface EditButtonProps {\n    buttonId: string | undefined;\n    shouldShowEditButton: boolean | undefined;\n}\n\nexport const EditButton = ({ buttonId, shouldShowEditButton }: EditButtonProps): ReactNode => {\n    if (shouldShowEditButton) {\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        return (\n            <p>\n                <button\n                    className={classNames('stepHeader', 'widget-link-amazonpay')}\n                    id={buttonId}\n                    onClick={preventDefault()}\n                    type=\"button\"\n                >\n                    {translatedString}\n                </button>\n            </p>\n        );\n    }\n\n    return null;\n};\n","import React, { type ReactNode } from 'react';\n\ninterface PaymentDescriptorProps {\n    paymentDescriptor: string | undefined;\n    shouldShowDescriptor: boolean | undefined;\n}\n\nexport const PaymentDescriptor = ({\n    shouldShowDescriptor,\n    paymentDescriptor,\n}: PaymentDescriptorProps): ReactNode => {\n    if (shouldShowDescriptor && paymentDescriptor) {\n        return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n    }\n\n    return null;\n};\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type ReactElement } from 'react';\n\ninterface PaymentWidgetProps {\n    additionalContainerClassName: string | undefined;\n    containerId: string;\n    hideContentWhenSignedOut: boolean;\n    hideWidget: boolean;\n    isSignInRequired: boolean | undefined;\n    isSignedIn: boolean;\n    method: PaymentMethod;\n    renderCustomPaymentForm: (() => React.ReactNode) | undefined;\n    shouldRenderCustomInstrument: boolean;\n    shouldShowCreditCardFieldset: boolean;\n}\n\nexport const PaymentWidget = ({\n    additionalContainerClassName,\n    containerId,\n    hideContentWhenSignedOut,\n    hideWidget,\n    isSignInRequired,\n    isSignedIn,\n    method,\n    renderCustomPaymentForm,\n    shouldRenderCustomInstrument,\n    shouldShowCreditCardFieldset,\n}: PaymentWidgetProps): ReactElement => (\n    <div\n        className={classNames(\n            'widget',\n            `widget--${method.id}`,\n            'payment-widget',\n            shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n        )}\n        id={containerId}\n        style={{\n            display:\n                (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                !shouldShowCreditCardFieldset ||\n                hideWidget\n                    ? 'none'\n                    : undefined,\n        }}\n        tabIndex={-1}\n    >\n        {shouldRenderCustomInstrument && renderCustomPaymentForm && renderCustomPaymentForm()}\n    </div>\n);\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { find, noop } from 'lodash';\nimport React, {\n    type ReactElement,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    isCardInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EditButton } from './EditButton';\nimport { PaymentDescriptor } from './PaymentDescriptor';\nimport { PaymentWidget } from './PaymentWidget';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\nconst HostedWidgetPaymentComponent = ({\n    instruments,\n    hideWidget = false,\n    isInitializing = false,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    isLoadingInstruments,\n    shouldHideInstrumentExpiryDate = false,\n    shouldShow = true,\n    hideVerificationFields,\n    method,\n    storedCardValidationSchema,\n    isPaymentDataRequired,\n    setValidationSchema,\n    loadInstruments,\n    onUnhandledError = noop,\n    deinitializeCustomer,\n    deinitializePayment,\n    setSubmit,\n    initializeCustomer,\n    initializePayment,\n    signInCustomer,\n    isSignedIn,\n    isSignInRequired,\n    isInstrumentCardNumberRequired,\n    validateInstrument,\n    containerId,\n    hideContentWhenSignedOut = false,\n    renderCustomPaymentForm,\n    additionalContainerClassName,\n    shouldRenderCustomInstrument = false,\n    paymentDescriptor,\n    shouldShowDescriptor,\n    shouldShowEditButton,\n    buttonId,\n    setFieldValue,\n}: HostedWidgetComponentProps & PaymentContextProps): ReactElement => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n    const instrumentsRef = useRef<PaymentInstrument[]>(instruments);\n\n    useEffect(() => {\n        instrumentsRef.current = instruments;\n    }, [instruments]);\n\n    const getDefaultInstrumentId = useCallback((): string | undefined => {\n        if (isAddingNewCard) {\n            return undefined;\n        }\n\n        const defaultInstrument =\n            instrumentsRef.current.find((instrument) => instrument.defaultInstrument) ||\n            instrumentsRef.current[0];\n\n        return defaultInstrument ? defaultInstrument.bigpayToken : undefined;\n    }, [isAddingNewCard]);\n\n    const getSelectedInstrument = useCallback((): PaymentInstrument | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n\n        return find(instrumentsRef.current, { bigpayToken: currentSelectedId });\n    }, [selectedInstrumentId, getDefaultInstrumentId]);\n\n    const getValidationSchema = useCallback((): ObjectSchema | null => {\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const currentSelectedInstrument = getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && currentSelectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }, [\n        getSelectedInstrument,\n        isInstrumentFeatureAvailableProp,\n        isPaymentDataRequired,\n        storedCardValidationSchema,\n    ]);\n\n    const getSelectedBankAccountInstrument = useCallback(\n        (\n            addingNew: boolean,\n            currentSelectedInstrument: PaymentInstrument,\n        ): AccountInstrument | undefined => {\n            return !addingNew && isBankAccountInstrument(currentSelectedInstrument)\n                ? currentSelectedInstrument\n                : undefined;\n        },\n        [],\n    );\n\n    const handleDeleteInstrument = useCallback(\n        (id: string): void => {\n            if (instruments.length === 0) {\n                setIsAddingNewCard(true);\n                setSelectedInstrumentId(undefined);\n                setFieldValue('instrumentId', '');\n\n                return;\n            }\n\n            if (selectedInstrumentId === id) {\n                const nextId = getDefaultInstrumentId();\n\n                setSelectedInstrumentId(nextId);\n                setFieldValue('instrumentId', nextId);\n            }\n        },\n        [instruments, selectedInstrumentId, getDefaultInstrumentId],\n    );\n\n    const handleUseNewCard = useCallback(async () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        if (deinitializePayment) {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n\n        if (initializePayment) {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n    }, [method, deinitializePayment, initializePayment]);\n\n    const handleSelectInstrument = useCallback((id: string) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    }, []);\n\n    const getValidateInstrument = useCallback((): ReactNode | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n        const currentSelectedInstrument = find(instruments, { bigpayToken: currentSelectedId });\n\n        if (currentSelectedInstrument) {\n            assertIsCardInstrument(currentSelectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequired(\n                currentSelectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return undefined;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, currentSelectedInstrument);\n            }\n        }\n\n        return undefined;\n    }, [\n        selectedInstrumentId,\n        getDefaultInstrumentId,\n        instruments,\n        method,\n        hideVerificationFields,\n        validateInstrument,\n    ]);\n\n    const initializeMethod = async (): Promise<CheckoutSelectors | void> => {\n        const currentInstruments = instrumentsRef.current;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return;\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer || null);\n\n            if (initializeCustomer) {\n                return initializeCustomer({ methodId: method.id });\n            }\n\n            return;\n        }\n\n        setSubmit(method, null);\n\n        let selectedCardInstrument: CardInstrument | undefined;\n\n        if (!isAddingNewCard) {\n            const currentSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n            const maybeInstrument =\n                currentInstruments.find(\n                    (instrument) => instrument.bigpayToken === currentSelectedInstrumentId,\n                ) || currentInstruments[0];\n\n            if (maybeInstrument && isCardInstrument(maybeInstrument)) {\n                selectedCardInstrument = maybeInstrument;\n            }\n        }\n\n        if (initializePayment) {\n            return initializePayment(\n                { gatewayId: method.gateway, methodId: method.id },\n                selectedCardInstrument,\n            );\n        }\n    };\n\n    // Below values are for lower level components\n    const effectiveSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n    const selectedInstrument = effectiveSelectedInstrumentId\n        ? instruments.find((i) => i.bigpayToken === effectiveSelectedInstrumentId) || instruments[0]\n        : instruments[0];\n    const cardInstruments: CardInstrument[] = instruments.filter(\n        (i): i is CardInstrument => !isBankAccountInstrument(i),\n    );\n    const accountInstruments: AccountInstrument[] = instruments.filter(\n        (i): i is AccountInstrument => isBankAccountInstrument(i),\n    );\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n    const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n    const selectedAccountInstrument = selectedInstrument\n        ? getSelectedBankAccountInstrument(isAddingNewCard, selectedInstrument)\n        : undefined;\n    const shouldShowAccountInstrument = instruments[0] && isBankAccountInstrument(instruments[0]);\n\n    useEffect(() => {\n        const init = async () => {\n            setValidationSchema(method, getValidationSchema());\n\n            try {\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments?.();\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void init();\n\n        return () => {\n            const deInit = async () => {\n                setValidationSchema(method, null);\n                setSubmit(method, null);\n\n                try {\n                    if (deinitializePayment) {\n                        await deinitializePayment({\n                            gatewayId: method.gateway,\n                            methodId: method.id,\n                        });\n                    }\n\n                    if (deinitializeCustomer) {\n                        await deinitializeCustomer({ methodId: method.id });\n                    }\n                } catch (error: unknown) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deInit();\n        };\n    }, []);\n\n    const isInitialRenderRef = useRef(true);\n    const instrumentsLength = useRef(instruments.length);\n    const isPaymentDataRequiredRef = useRef(isPaymentDataRequired);\n    const selectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    useEffect(() => {\n        if (isInitialRenderRef.current) {\n            isInitialRenderRef.current = false;\n\n            return;\n        }\n\n        setValidationSchema(method, getValidationSchema());\n\n        const reInit = async () => {\n            try {\n                if (deinitializePayment) {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (\n            selectedInstrumentIdRef.current !== selectedInstrumentId ||\n            (Number(instrumentsLength.current) > 0 && instruments.length === 0) ||\n            isPaymentDataRequiredRef.current !== isPaymentDataRequired\n        ) {\n            selectedInstrumentIdRef.current = selectedInstrumentId;\n            instrumentsLength.current = instruments.length;\n            isPaymentDataRequiredRef.current = isPaymentDataRequired;\n\n            void reInit();\n        }\n    }, [selectedInstrumentId, instruments, isPaymentDataRequired]);\n\n    if (!shouldShow) {\n        return <div style={{ display: 'none' }} />;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrument={selectedAccountInstrument}\n                    />\n                )}\n                {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        instruments={cardInstruments}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={effectiveSelectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                        validateInstrument={getValidateInstrument()}\n                    />\n                )}\n\n                <PaymentDescriptor\n                    paymentDescriptor={paymentDescriptor}\n                    shouldShowDescriptor={shouldShowDescriptor}\n                />\n\n                <PaymentWidget\n                    additionalContainerClassName={additionalContainerClassName}\n                    containerId={containerId}\n                    hideContentWhenSignedOut={hideContentWhenSignedOut}\n                    hideWidget={hideWidget}\n                    isSignInRequired={isSignInRequired}\n                    isSignedIn={isSignedIn}\n                    method={method}\n                    renderCustomPaymentForm={renderCustomPaymentForm}\n                    shouldRenderCustomInstrument={shouldRenderCustomInstrument}\n                    shouldShowCreditCardFieldset={shouldShowCreditCardFieldset}\n                />\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={effectiveSelectedInstrumentId}\n                        instruments={instruments}\n                        isAccountInstrument={Boolean(\n                            isAccountInstrument || shouldShowAccountInstrument,\n                        )}\n                    />\n                )}\n\n                <EditButton buttonId={buttonId} shouldShowEditButton={shouldShowEditButton} />\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedWidgetPaymentComponent;\n","import { type ComponentType, lazy } from 'react';\n\nimport { type IconProps } from './';\n\ninterface InstrumentComponent {\n    instrument: string;\n    component: ComponentType<IconProps>;\n}\n\nconst instrumentTypeMap: Record<string, InstrumentComponent> = {\n    AMEX: {\n        instrument: 'american-express',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-amex\" */ './IconCardAmex')),\n    },\n    BITCOIN: {\n        instrument: 'bitcoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-bitcoin\" */ './IconBitCoin')),\n    },\n    BITCOIN_CASH: {\n        instrument: 'bitcoin-cash',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-bitcoin-cash\" */ './IconBitCoinCash'),\n        ),\n    },\n    BANCONTACT: {\n        instrument: 'bancontact',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-bancontact\" */ './IconCardBancontact'),\n        ),\n    },\n    CARNET: {\n        instrument: 'carnet',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-carnet\" */ './IconCardCarnet'),\n        ),\n    },\n    CB: {\n        instrument: 'cb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-cb\" */ './IconCardCB')),\n    },\n    DINERS: {\n        instrument: 'diners-club',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-diners-club\" */ './IconCardDinersClub'),\n        ),\n    },\n    DANKORT: {\n        instrument: 'dankort',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-dankort\" */ './IconCardDankort'),\n        ),\n    },\n    DISCOVER: {\n        instrument: 'discover',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-discover\" */ './IconCardDiscover'),\n        ),\n    },\n    DOGECOIN: {\n        instrument: 'dogecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-dogecoin\" */ './IconDogeCoin')),\n    },\n    ELECTRON: {\n        instrument: 'electron',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-electron\" */ './IconCardElectron'),\n        ),\n    },\n    ELO: {\n        instrument: 'elo',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-elo\" */ './IconCardElo')),\n    },\n    ETHEREUM: {\n        instrument: 'ethereum',\n        component: lazy(() => import(/* webpackChunkName: \"icon-ethereum\" */ './IconEthereum')),\n    },\n    HIPER: {\n        instrument: 'hiper',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-hipercard\" */ './IconCardHipercard'),\n        ),\n    },\n    JCB: {\n        instrument: 'jcb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-jcb\" */ './IconCardJCB')),\n    },\n    LITECOIN: {\n        instrument: 'litecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-litecoin\" */ './IconLiteCoin')),\n    },\n    MADA: {\n        instrument: 'mada',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-mada\" */ './IconCardMada')),\n    },\n    MAESTRO: {\n        instrument: 'maestro',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-maestro\" */ './IconCardMaestro'),\n        ),\n    },\n    MC: {\n        instrument: 'mastercard',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-mastercard\" */ './IconCardMastercard'),\n        ),\n    },\n    SHIBA_INU: {\n        instrument: 'shiba-inu',\n        component: lazy(() => import(/* webpackChunkName: \"icon-shiba-inu\" */ './IconShibaInu')),\n    },\n    TROY: {\n        instrument: 'troy',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-troy\" */ './IconCardTroy')),\n    },\n    CUP: {\n        instrument: 'unionpay',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-unionpay\" */ './IconCardUnionPay'),\n        ),\n    },\n    USD_COIN: {\n        instrument: 'usd-coin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-usd-coin\" */ './IconUsdCoin')),\n    },\n    VISA: {\n        instrument: 'visa',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-visa\" */ './IconCardVisa')),\n    },\n};\n\nexport default function mapFromPaymentMethodCardType(type: string): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return instrumentTypeMap[type]?.instrument || undefined;\n}\n\nexport function getPaymentMethodIconComponent(type?: string): ComponentType<IconProps> | undefined {\n    if (!type) {\n        return undefined;\n    }\n\n    const instrumentType = Object.values(instrumentTypeMap).find(\n        (record) => record.instrument === type,\n    );\n\n    return instrumentType ? instrumentType.component : undefined;\n}\n\nfunction getSupportedInstrumentTypes() {\n    return Object.values(instrumentTypeMap).map((record) => record.instrument);\n}\n\nexport function filterInstrumentTypes(instrumentTypes: string[]) {\n    const supportedInstrumentTypes = getSupportedInstrumentTypes();\n\n    return instrumentTypes.filter((type) => supportedInstrumentTypes.includes(type));\n}\n"],"names":["forwardRef","ref","additionalClassName","children","className","legend","testId","rest","mapFromInstrumentCardType","type","data","cart","getCart","lineItems","instrument","paymentMethod","isVaultingCardNumberValidationAvailable","initializationData","physicalItems","length","trustedShippingAddress","isInstrumentCardNumberRequired","PROVIDERS_WITHOUT_CARD_CODE","method","config","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","includes","provider","digitalItems","giftCertificates","isInstrumentCardCodeRequired","InstrumentMenuItem","shouldHideExpiryDate","onClick","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","TranslatedString","cardTitle","niceType","endingIn","last4","id","expiryDate","InstrumentOption","noop","handleClick","useCallback","bigpayToken","InstrumentUseNewButton","InstrumentMenu","instruments","selectedInstrumentId","onSelectInstrument","onUseNewInstrument","map","key","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","useRef","updateFieldValue","instrumentId","setFieldValue","name","useEffect","setTimeout","value","undefined","current","selectedInstrument","find","DropdownTrigger","dropdown","memo","onDeleteInstrument","validateInstrument","renderInput","renderModal","props","ManageInstrumentsModal","Fieldset","Legend","hidden","ModalTrigger","modal","BasicFormField","render","style","display","checkoutService","deinitializeCustomer","initializeCustomer","checkoutButtonContainerClass","containerId","methodId","onUnhandledError","onWalletButtonClick","additionalInitializationOptions","integrations","container","error","Error","PaymentFormContext","createContext","usePaymentFormContext","context","useContext","iconProps","size","Medium","IconComponent","Suspense","toResolvableComponent","checkoutState","paymentForm","paymentDescriptor","paymentToken","initializeAmazonPayV2Payment","options","initializePayment","amazonpay","editButtonId","reload","window","location","hidePaymentSubmitButton","disableSubmit","setSubmit","setValidationSchema","getCheckout","isPaymentDataRequired","statuses","isLoadingInstruments","checkout","customer","getCustomer","isInstrumentFeatureAvailable","isGuest","Boolean","isVaultingEnabled","getInstruments","HostedWidgetPaymentComponent","buttonId","deinitializePayment","hideWidget","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","isSignInRequired","isSignedIn","some","payments","providerId","loadInstruments","onSignOut","shouldShow","shouldShowDescriptor","shouldShowEditButton","signOut","signOutCustomer","beautifyAmazonButton","document","querySelector","amazonButton","shadowRoot","HTMLElement","height","CheckoutButton","EditButton","translatedString","preventDefault","PaymentDescriptor","PaymentWidget","additionalContainerClassName","hideContentWhenSignedOut","renderCustomPaymentForm","shouldRenderCustomInstrument","shouldShowCreditCardFieldset","tabIndex","isInitializing","isAccountInstrument","isInstrumentFeatureAvailableProp","shouldHideInstrumentExpiryDate","hideVerificationFields","storedCardValidationSchema","signInCustomer","isAddingNewCard","setIsAddingNewCard","useState","setSelectedInstrumentId","instrumentsRef","getDefaultInstrumentId","defaultInstrument","getSelectedInstrument","currentSelectedId","getValidationSchema","currentSelectedInstrument","getSelectedBankAccountInstrument","addingNew","handleDeleteInstrument","nextId","handleUseNewCard","gatewayId","gateway","handleSelectInstrument","getValidateInstrument","shouldShowNumberField","initializeMethod","currentInstruments","selectedCardInstrument","currentSelectedInstrumentId","maybeInstrument","isCardInstrument","effectiveSelectedInstrumentId","i","cardInstruments","filter","accountInstruments","shouldShowInstrumentFieldset","isLoading","selectedAccountInstrument","shouldShowAccountInstrument","isInitialRenderRef","instrumentsLength","isPaymentDataRequiredRef","selectedInstrumentIdRef","Number","LoadingOverlay","hideContentWhenLoading","AccountInstrumentFieldset","A","CardInstrumentFieldset","StoreInstrumentFieldset","instrumentTypeMap","AMEX","component","lazy","BITCOIN","BITCOIN_CASH","BANCONTACT","CARNET","CB","DINERS","DANKORT","DISCOVER","DOGECOIN","ELECTRON","ELO","ETHEREUM","HIPER","JCB","LITECOIN","MADA","MAESTRO","MC","SHIBA_INU","TROY","CUP","USD_COIN","VISA","mapFromPaymentMethodCardType","getPaymentMethodIconComponent","instrumentType","Object","values","record","filterInstrumentTypes","instrumentTypes","supportedInstrumentTypes"],"sourceRoot":""}