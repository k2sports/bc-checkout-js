{"version":3,"file":"moneris-payment-method-f57f8d50.js","mappings":"2KAWA,MAoBA,EApByF,EACrFA,gBACAC,KACAC,WAEA,MAAMC,GAAc,IAAAC,cAChB,IAAM,gBAAC,IAAwB,CAACJ,cAAeA,EAAeC,GAAIA,KAClE,CAACA,EAAID,IAGT,OACI,gBAAC,IAAS,CACNK,oBAAoB,uBACpBC,MAAOH,EACPI,aAAc,gBAAC,IAAgB,CAACN,GAAG,yCACnCC,KAAMA,I,8FCflB,MA8BA,EA9ByF,EACrFF,gBACAC,KACAC,WAEA,MAAMC,GAAc,IAAAC,cAChB,IACI,gCACI,gBAAC,IAAwB,CACrBC,oBAAoB,WACpBL,cAAeA,EACfC,GAAIA,IAGR,gBAAC,IAAQ,QAGjB,CAACA,EAAID,IAGT,OACI,gBAAC,IAAS,CACNK,oBAAoB,uBACpBC,MAAOH,EACPI,aAAc,gBAAC,IAAgB,CAACN,GAAG,qCACnCC,KAAMA,I,oHCTX,MAAMM,EAAsB,EAC/BC,gBACAC,SACAC,WACAC,kBAEA,MAAM,gBAAEC,EAAe,cAAEC,EAAa,aAAEC,EAAY,WAAEC,GAAeJ,GAC/D,OAAEK,GAAWP,GACXQ,SAAUC,GAAoBF,EAEhCG,EAAqBD,GAAuC,OAApBA,EACxCE,GAAmC,OAAqCZ,GACxEa,GACF,OAAuCb,GAErCc,GAA6C,IAAAnB,cAC9CF,GACU,IAAG,IAAAsB,SAAQ,CAACd,EAAOe,QAASf,EAAOT,KAAKyB,KAAK,QAAQxB,KAEhE,CAACQ,KAGEiB,EAAkBC,IAAuB,IAAAC,YAyKhD,MAAO,CAAEC,uCAtKL,IAAA1B,cACK2B,IACG,MAAMC,IAAiCD,GACjCT,EAAmCS,EAAoBrB,GAEvDuB,IAA+BF,GAC/BV,EAAiCU,EAAoBrB,GAG3D,OACI,gBAAC,IAA0B,CACvBwB,WACID,EAA+BV,EAAiB,cAAWY,EAE/DC,aACIJ,EACMT,EAAiB,iBACjBY,EAEVR,iBAAkBA,MAI9B,CACIA,EACAJ,EACAF,EACAC,EACAZ,IA0IoC2B,sBAtInB,IAAAjC,cAClB2B,IAAyE,iDAC5E,MAAMO,EAAa,CAAC,QAAS,aAAc,WAAY,cACjDN,IAAiCD,GACjCT,EAAmCS,EAAoBrB,GAEvDuB,IAA+BF,GAC/BV,EAAiCU,EAAoBrB,GAE3D,IAAI6B,EAYJ,OAVIR,EACIE,EACAM,EAAmBhB,EAAiB,SAC7BS,IACPO,EAAmBhB,EAAiB,aAGxCgB,EAAmBhB,EAAiB,YAGjC,CACHiB,OAAQT,EACF,CACIU,qBACIR,GAAgCF,EAC1B,CACIW,mBAAoB/B,EAASgC,UACzB,iCAEJC,YAAarB,EAAiB,SAC9BsB,aAAcd,EAAmBe,kBAErCX,EACVY,uBACIf,GAAkCD,EAC5B,CACIW,mBAAoB/B,EAASgC,UACzB,oCAEJC,YAAarB,EAAiB,YAC9BsB,aAAcd,EAAmBe,kBAErCX,GAEd,CACIjB,SAAUE,EACJ,CACIsB,mBAAoB/B,EAASgC,UACzB,iCAEJC,YAAarB,EAAiB,eAElCY,EACNa,WAAY,CACRN,mBAAoB/B,EAASgC,UACzB,wCAEJC,YAAarB,EAAiB,YAC9B0B,YAAatC,EAASgC,UAClB,oDAGRO,SAAU,CACNR,mBAAoB/B,EAASgC,UACzB,kCAEJC,YAAarB,EAAiB,WAElC4B,WAAY,CACRT,mBAAoB/B,EAASgC,UACzB,oCAEJC,YAAarB,EAAiB,cAG5C6B,OAAQb,EACF,CACIc,cAAe,OAAyBd,EAAkBD,GAC1DgB,YAAa,OACTf,EACAD,EACA,IAA0BiB,OAE9BC,YAAa,OACTjB,EACAD,EACA,IAA0BmB,QAGlC,CAAC,EACPC,OAAQ,EAAGC,gBACHhC,IAAqBgC,GACrB/B,OAAoBO,IAG5ByB,iBAAkB,EAAGC,eACjB/C,EAAc,sBAAuB+C,IAEzCC,QAAS,KACL/C,GAAa,GACbC,KAEJ+C,QAAS,EAAGJ,gBACR/B,EAAoB+B,IAExBK,WAAY,EAAGC,SAAS,CAAC,OACrB,IAAAC,OAAMD,GAAQ,CAACE,EAAc,GAAIR,K,QAC7B,MAAMS,EAAW,qBAAqBT,IAEtC7C,EAAcsD,EAA8B,QAApB,EAAc,QAAd,EAAAD,EAAY,UAAE,eAAEE,YAAI,QAAI,IAE5CF,EAAY,IACZtD,EAAgBuD,OAKpC,KACA,CACIzC,EACAJ,EACAH,EACAC,EACAC,EACAX,EACAD,EACAG,EACAC,EACAC,EACAC,K,8HCpMZ,MA6CA,EA7CqF,EACjFhB,gBACAC,KACAC,WAEA,MAAMC,GAAc,IAAAC,cAChB,IACI,gCACI,gBAAC,IAAwB,CACrBC,oBAAoB,WACpBL,cAAeA,EACfC,GAAIA,IAGR,gBAAC,IAAQ,QAGjB,CAACA,EAAID,IAGHO,GAAe,IAAA+D,UACjB,IACI,gCACI,gBAAC,IAAgB,CAACrE,GAAG,kCAErB,gBAAC,IAAc,CAACsE,UAAU,YAAYC,QAAS,gBAAC,IAAqB,OACjE,wBAAMC,UAAU,WACZ,gBAAC,IAAQ,UAKzB,IAGJ,OACI,gBAAC,IAAS,CACNpE,oBAAoB,6BACpBC,MAAOH,EACPI,aAAcA,EACdL,KAAMA,I,6DCvClB,SAAe,SAAQ,UAA6C,SAChES,EAAQ,qBACR+D,GAAuB,IAEvB,OAAO,UAASC,MAA6C,CACzD9B,cAAc,UAAS+B,WAEvBC,YAAY,UACPD,WACAD,MAA2D,CACxDV,QAAQ,UACHW,WACAD,MAAK,eACFlC,sBAAsB,UACjBqC,KAAK,CACFC,QAASpE,EAASgC,UACd,0CAEJmC,KAAOE,GAAoB,aAAVA,IAEpBF,KAAK,CACFC,QAASpE,EAASgC,UACd,yCAEJmC,KAAOE,GAAoB,sBAAVA,IAGzBjC,wBAAwB,UACnB+B,KAAK,CACFC,QAASpE,EAASgC,UACd,6CAEJmC,KAAOE,GAAoB,aAAVA,IAEpBF,KAAK,CACFC,QAASpE,EAASgC,UACd,4CAEJmC,KAAOE,GAAoB,wBAAVA,IAEpBF,KAAK,CACFC,QAASpE,EAASgC,UACd,6CAEJmC,KAAOE,GAAoB,2BAAVA,KAErBN,EACE,CACIO,wBAAwB,UACnBH,KAAK,CACFC,QAASpE,EAASgC,UACd,iDAEJmC,KAAOE,GAAoB,aAAVA,IAEpBF,KAAK,CACFC,QAASpE,EAASgC,UACd,gDAEJmC,KAAOE,GAAoB,wBAAVA,KAG7B,CAAC,OAI/B,G,kJC/DA,MAwFA,GAAe,E,SAAA,IAxFsD,I,IAAA,SACjErE,EAAQ,YACRC,EAAW,cACXH,EAAa,gBACbyE,EAAe,OACfxE,GAAM,EACHyE,GAAI,cAN0D,uEAQjE,MAAMvC,EAAc,4BAEd,sCAAEd,EAAqC,qBAAEO,IAAyB,EAAA7B,EAAA,GAAoB,CACxFC,gBACAC,SACAC,WACAC,gBAGEwE,GAAmC,EAAAC,EAAA,GAAoC,CAAE1E,cACzE,wBACF2E,EAAuB,cACvBC,EAAa,cACbzE,EAAa,UACb0E,EAAS,oBACTC,GACA7E,EAEE8E,EAAcjF,EAAckF,KAAKC,eAAelF,IAAW,IAG7DiF,MAAM,YAAEE,EAAW,sBAAEC,GACrBC,UAAU,qBAAEC,IACZvF,EAEEwF,EAAWJ,IACXK,EAAWzF,EAAckF,KAAKQ,cAG9BC,IAFkBF,aAAQ,EAARA,EAAUG,UAGVC,QAAQ5F,EAAOO,OAAOsF,mBAExCC,GAA4E,IAAApG,cAC9E,CAAOqG,EAAmC1E,KAAuB,iDAC7D,MAAM2E,EAAgB,OAAH,wBACZD,GAAO,CACVE,QAAS,OAAF,QACH/D,eACIb,GAAsB,CACtB6E,WAAYvE,EAAqBN,OAK7C,OAAOmD,EAAgB2B,kBAAkBH,EAC7C,KACA,CAAC9D,EAAaP,EAAsB6C,IAOxC,OACI,gBAAC4B,EAAA,EAA4B,eACzBlE,YAAaA,EACbmE,oBAAqB7B,EAAgB6B,oBACrCxB,cAAeA,EACfD,wBAAyBA,EACzBuB,kBAAmBL,EACnBd,YAAaA,EACbzD,8BAA8B,EAAA+E,EAAA,GAAqCvG,GACnEuB,gCAAgC,EAAAiF,EAAA,GAAuCxG,GACvE2F,6BAA8BA,EAC9BJ,qBAAsBA,IACtBF,sBAAuBA,IACvBoB,YAAY,IAAAC,MAAKlB,aAAQ,EAARA,EAAUmB,SAAU,CAAEC,WAAY3G,EAAOT,KAC1DqH,gBAAiBpC,EAAgBoC,gBACjC5G,OAAQA,EACRI,cAAeA,EACf0E,UAAWA,EACXC,oBAAqBA,EACrB8B,QAASrC,EAAgBsC,gBACzBC,2BAA4BrC,EAC5BsC,mBAzBmB,CAACC,EAA4B5F,IAC7CD,EAAsCC,IAyBrCoD,MAOZ,CAAC,CAAElF,GAAI,Y,+CCzGC2H,E,4EAMG,SAASC,EACpBjF,EACAkF,EACAzD,EAAkCuD,EAA0BG,SAE5D,MAAMC,EAAYC,SAASC,cAAc,OACnCC,EAAkBF,SAASG,eAAexF,GAEhD,IAAKuF,EACD,MAAM,IAAI5E,MACN,8EAMR,OAFA4E,EAAgBE,YAAYL,GAErB,IAAIM,SAASC,IAehB,SACI,gBAAC,KAAYC,SAAQ,CAACxD,MAAO,CAAEyD,aAAa,EAAM1H,aAAc,EAAA2H,OAC5D,gBAAC,IAAkB,CAACC,SAAUtE,IAASuD,EAA0BrE,OAC7D,gBAAC,IAAS,CACNvD,cAAeqE,IAASuD,EAA0BnE,MAClDmF,IAnBKC,IACZA,IAILN,GAAQ,OAAiBM,EAASf,IAElC,yBAAgCE,GAE5BA,EAAUc,eACVd,EAAUc,cAAcC,YAAYf,SAaxCA,KAGZ,EAjDA,SAAYJ,GACR,oBACA,gBACA,eACH,CAJD,CAAYA,IAAAA,EAAyB,I,gFCErC,MAmBA,EAnBoF,I,IAAA,oBAChFvH,EAAmB,cACnBL,EAAa,OACbgJ,GAAM,EACHC,GAAK,cAJwE,kDAK9E,OACF,uCACQA,EAAK,CACTxE,UAAW,IACP,aACA,+BACA,CAAE,oBAAqBzE,GACvB,CAAE,sCAAuCA,GACzCK,GACH,YACU2I,K,mLCbZ,MAAME,EAAa,EAAGC,WAAUC,2BACnC,GAAIA,EAAsB,CACtB,MAAMC,EAAmB,gBAACC,EAAA,EAAgB,CAACrJ,GAAG,wCAE9C,OACI,yBACI,0BACIwE,UAAW,IAAW,aAAc,yBACpCxE,GAAIkJ,EACJI,SAAS,EAAAC,EAAA,KACTnF,KAAK,UAEJgF,GAIjB,CAEA,OAAO,MCtBEI,EAAoB,EAC7BC,uBACAC,uBAEID,GAAwBC,EACjB,uBAAKlF,UAAU,sBAAsBkF,GAGzC,KCEEC,EAAgB,EACzBC,+BACAjH,cACAkH,2BACAC,aACAC,mBACA9C,aACAxG,SACAuJ,0BACAC,+BACAC,kCAEA,uBACI1F,UAAW,IACP,SACA,WAAW/D,EAAOT,KAClB,iBACAiK,EAA+B,GAAKL,GAExC5J,GAAI2C,EACJwH,MAAO,CACHC,QACKP,GAA4BE,IAAqB9C,IACjDiD,GACDJ,EACM,YACA5H,GAEdmI,UAAW,GAEVJ,GAAgCD,GAA2BA,KC4bpE,EA9XqC,EACjCvE,cACAqE,cAAa,EACbQ,kBAAiB,EACjBC,sBACApE,6BAA8BqE,EAC9BzE,uBACA0E,kCAAiC,EACjCC,cAAa,EACbC,yBACAlK,SACA+G,6BACA3B,wBACAL,sBACA6B,kBACAuD,mBAAmB,EAAAnC,KACnBoC,uBACA/D,sBACAvB,YACAuF,qBACAlE,oBACAmE,iBACA9D,aACA8C,mBACAhI,iCACA0F,qBACA9E,cACAkH,4BAA2B,EAC3BG,0BACAJ,+BACAK,gCAA+B,EAC/BP,oBACAD,uBACAN,uBACAD,WACArI,oBAEA,MAAOmK,EAAiBC,IAAsB,IAAArJ,WAAS,IAChDsJ,EAAsBC,IAA2B,IAAAvJ,eAA6BM,GAC/EkJ,GAAiB,IAAAC,QAA4B5F,IAEnD,IAAA6F,YAAU,KACNF,EAAeG,QAAU9F,IAC1B,CAACA,IAEJ,MAAM+F,GAAyB,IAAArL,cAAY,KACvC,GAAI6K,EACA,OAGJ,MAAMS,EACFL,EAAeG,QAAQG,MAAMC,GAAeA,EAAWF,qBACvDL,EAAeG,QAAQ,GAE3B,OAAOE,EAAoBA,EAAkB5I,iBAAcX,IAC5D,CAAC8I,IAEEY,GAAwB,IAAAzL,cAAY,KACtC,MAAM0L,EAAoBX,GAAwBM,IAElD,OAAO,IAAAE,MAAKN,EAAeG,QAAS,CAAE1I,YAAagJ,MACpD,CAACX,EAAsBM,IAEpBM,IAAsB,IAAA3L,cAAY,KACpC,IAAK0F,EACD,OAAO,KAGX,MAAMkG,EAA4BH,IAElC,OAAIpB,GAAoCuB,GAC7BvE,GAGJ,OACR,CACCoE,EACApB,EACA3E,EACA2B,IAGEwE,IAAmC,IAAA7L,cACrC,CACI8L,EACAF,KAEQE,IAAa,OAAwBF,GACvCA,OACA7J,GAEV,IAGEgK,IAAyB,IAAA/L,cAC1BH,IACG,GAA2B,IAAvByF,EAAY0G,OAKZ,OAJAlB,GAAmB,GACnBE,OAAwBjJ,QACxBrB,EAAc,eAAgB,IAKlC,GAAIqK,IAAyBlL,EAAI,CAC7B,MAAMoM,EAASZ,IAEfL,EAAwBiB,GACxBvL,EAAc,eAAgBuL,EAClC,IAEJ,CAAC3G,EAAayF,EAAsBM,IAGlCa,IAAmB,IAAAlM,cAAY,KAAY,iDAC7C8K,GAAmB,GACnBE,OAAwBjJ,GAEpB4E,UACMA,EAAoB,CACtBwF,UAAW7L,EAAOe,QAClB+K,SAAU9L,EAAOT,MAIrB4G,UACMA,EAAkB,CACpB0F,UAAW7L,EAAOe,QAClB+K,SAAU9L,EAAOT,KAG7B,KAAG,CAACS,EAAQqG,EAAqBF,IAE3B4F,IAAyB,IAAArM,cAAaH,IACxCiL,GAAmB,GACnBE,EAAwBnL,KACzB,IAEGyM,IAAwB,IAAAtM,cAAY,KACtC,MAAM0L,EAAoBX,GAAwBM,IAC5CO,GAA4B,IAAAL,MAAKjG,EAAa,CAAE5C,YAAagJ,IAEnE,GAAIE,EAA2B,EAC3B,OAAuBA,GAEvB,MAAMW,EAAwB3K,EAC1BgK,EACAtL,GAGJ,GAAIkK,EACA,OAGJ,GAAIlD,EACA,OAAOA,EAAmBiF,EAAuBX,EAEzD,IAGD,CACCb,EACAM,EACA/F,EACAhF,EACAkK,EACAlD,IAGEkF,GAAmB,KAA+C,iDACpE,MAAMC,EAAqBxB,EAAeG,QAE1C,IAAK1F,EAGD,YAFAN,EAAU9E,EAAQ,MAKtB,GAAIsJ,IAAqB9C,EAGrB,OAFA1B,EAAU9E,EAAQsK,GAAkB,MAEhCD,EACOA,EAAmB,CAAEyB,SAAU9L,EAAOT,UAGjD,EAKJ,IAAI6M,EAEJ,GAJAtH,EAAU9E,EAAQ,OAIbuK,EAAiB,CAClB,MAAM8B,EAA8B5B,GAAwBM,IACtDuB,EACFH,EAAmBlB,MACdC,GAAeA,EAAW9I,cAAgBiK,KAC1CF,EAAmB,GAExBG,IAAmB,EAAAC,EAAA,GAAiBD,KACpCF,EAAyBE,EAEjC,CAEA,OAAInG,EACOA,EACH,CAAE0F,UAAW7L,EAAOe,QAAS+K,SAAU9L,EAAOT,IAC9C6M,QAHR,CAMJ,IAGMI,GAAgC/B,GAAwBM,IACxD1J,GAAqBmL,IACrBxH,EAAYiG,MAAMwB,GAAMA,EAAErK,cAAgBoK,MAC1CxH,EAAY,GACZ0H,GAAoC1H,EAAY2H,QACjDF,KAA4B,OAAwBA,KAEnDG,GAA0C5H,EAAY2H,QACvDF,IAA8B,OAAwBA,KAErDI,GAA+B9C,GAAoC/E,EAAY0G,OAAS,EACxFjC,IAAgCoD,IAAgCtC,EAChEuC,IAAajD,GAAkBvE,KAA0B+D,EACzD0D,GAA4B1L,GAC5BkK,GAAiChB,EAAiBlJ,SAClDI,EACAuL,GAA8BhI,EAAY,KAAM,OAAwBA,EAAY,KAE1F,IAAA6F,YAAU,MACmB,iDACrB9F,EAAoB/E,EAAQqL,MAE5B,IACQtB,UACMnD,aAAe,EAAfA,WAGJsF,IACV,CAAE,MAAOtJ,GACDA,aAAiBC,OACjBsH,EAAiBvH,EAEzB,CACJ,IAIO,MACwB,iDACvBmC,EAAoB/E,EAAQ,MAC5B8E,EAAU9E,EAAQ,MAElB,IACQqG,UACMA,EAAoB,CACtBwF,UAAW7L,EAAOe,QAClB+K,SAAU9L,EAAOT,MAIrB6K,UACMA,EAAqB,CAAE0B,SAAU9L,EAAOT,KAEtD,CAAE,MAAOqD,GACDA,aAAiBC,OACjBsH,EAAiBvH,EAEzB,CACJ,OAIL,IAEH,MAAMqK,IAAqB,IAAArC,SAAO,GAC5BsC,IAAoB,IAAAtC,QAAO5F,EAAY0G,QACvCyB,IAA2B,IAAAvC,QAAOxF,GAClCgI,IAA0B,IAAAxC,QAAOH,GAyCvC,OAvCA,IAAAI,YAAU,KACN,GAAIoC,GAAmBnC,QAGnB,YAFAmC,GAAmBnC,SAAU,GAKjC/F,EAAoB/E,EAAQqL,OAoBxB+B,GAAwBtC,UAAYL,GACnC4C,OAAOH,GAAkBpC,SAAW,GAA4B,IAAvB9F,EAAY0G,QACtDyB,GAAyBrC,UAAY1F,KAErCgI,GAAwBtC,QAAUL,EAClCyC,GAAkBpC,QAAU9F,EAAY0G,OACxCyB,GAAyBrC,QAAU1F,GAxBZ,iDACvB,IACQiB,UACMA,EAAoB,CACtBwF,UAAW7L,EAAOe,QAClB+K,SAAU9L,EAAOT,YAInB2M,IACV,CAAE,MAAOtJ,GACDA,aAAiBC,OACjBsH,EAAiBvH,EAEzB,CACJ,OAaD,CAAC6H,EAAsBzF,EAAaI,IAElC6E,EAKD,gBAACqD,EAAA,EAAc,CAACC,wBAAsB,EAACT,UAAWA,IAC9C,uBAAK/I,UAAU,yBACViJ,IAA+BH,IAC5B,gBAACW,EAAAC,EAAyB,CACtBzI,YAAa4H,GACbc,mBAAoB3B,GACpB4B,mBAAoB/B,GACpBvK,mBAAoB0L,MAG1BC,IAA+BH,IAC7B,gBAACe,EAAA,EAAsB,CACnB5I,YAAa0H,GACbmB,mBAAoBpC,GACpBiC,mBAAoB3B,GACpB4B,mBAAoB/B,GACpBnB,qBAAsB+B,GACtBsB,qBAAsB9D,EACtBhD,mBAAoBgF,OAI5B,gBAACjD,EAAiB,CACdE,kBAAmBA,EACnBD,qBAAsBA,IAG1B,gBAACE,EAAa,CACVC,6BAA8BA,EAC9BjH,YAAaA,EACbkH,yBAA0BA,EAC1BC,WAAYA,EACZC,iBAAkBA,EAClB9C,WAAYA,EACZxG,OAAQA,EACRuJ,wBAAyBA,EACzBC,6BAA8BA,EAC9BC,6BAA8BA,KAGjCM,GACG,gBAACgE,EAAA,EAAuB,CACpB5L,aAAcqK,GACdxH,YAAaA,EACb8E,oBAAqBlE,QACjBkE,GAAuBkD,MAKnC,gBAACxE,EAAU,CAACC,SAAUA,EAAUC,qBAAsBA,MAtDvD,uBAAKgB,MAAO,CAAEC,QAAS,U,8FC9ZtC,MA+CA,EA/CuF,EACnFnI,aACAE,eACAsM,eACA/M,sBAEA,gCACKS,GACG,yBACI,8BACI,gBAAC,IAAgB,CAACnC,GAAG,4DAGzB,2BAEA,gBAAC,IAAgB,CAACA,GAAG,sDAI7B,uBAAKwE,UAAU,iBACVrC,GACG,gBAAC,IAA2B,CACxBpC,cAAoC,eAArB2B,EACf1B,GAAImC,EACJlC,KAAK,6CAIZgC,GACG,gBAAC,IAAyB,CACtBlC,cAAoC,aAArB2B,EACf1B,GAAIiC,EACJhC,KAAK,2CAIZwO,GACG,gBAAC,IAA2B,CACxB1O,cAAoC,eAArB2B,EACf1B,GAAIyO,EACJxO,KAAK,8C","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/moneris-integration/src/MonerisPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-widget-integration/src/EditButton.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentDescriptor.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentWidget.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx"],"sourcesContent":["import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type LanguageService,\n    type LegacyHostedFormOptions,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { type CardInstrument, type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst MonerisPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const containerId = `moneris-iframe-container`;\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const initializeMonerisPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const paymentConfig = {\n                ...options,\n                moneris: {\n                    containerId,\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            };\n\n            return checkoutService.initializePayment(paymentConfig);\n        },\n        [containerId, getHostedFormOptions, checkoutService],\n    );\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMonerisPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n            validateInstrument={validateInstrument}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MonerisPaymentMethod,\n    [{ id: 'moneris' }],\n);\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import classNames from 'classnames';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\ninterface EditButtonProps {\n    buttonId: string | undefined;\n    shouldShowEditButton: boolean | undefined;\n}\n\nexport const EditButton = ({ buttonId, shouldShowEditButton }: EditButtonProps): ReactNode => {\n    if (shouldShowEditButton) {\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        return (\n            <p>\n                <button\n                    className={classNames('stepHeader', 'widget-link-amazonpay')}\n                    id={buttonId}\n                    onClick={preventDefault()}\n                    type=\"button\"\n                >\n                    {translatedString}\n                </button>\n            </p>\n        );\n    }\n\n    return null;\n};\n","import React, { type ReactNode } from 'react';\n\ninterface PaymentDescriptorProps {\n    paymentDescriptor: string | undefined;\n    shouldShowDescriptor: boolean | undefined;\n}\n\nexport const PaymentDescriptor = ({\n    shouldShowDescriptor,\n    paymentDescriptor,\n}: PaymentDescriptorProps): ReactNode => {\n    if (shouldShowDescriptor && paymentDescriptor) {\n        return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n    }\n\n    return null;\n};\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type ReactElement } from 'react';\n\ninterface PaymentWidgetProps {\n    additionalContainerClassName: string | undefined;\n    containerId: string;\n    hideContentWhenSignedOut: boolean;\n    hideWidget: boolean;\n    isSignInRequired: boolean | undefined;\n    isSignedIn: boolean;\n    method: PaymentMethod;\n    renderCustomPaymentForm: (() => React.ReactNode) | undefined;\n    shouldRenderCustomInstrument: boolean;\n    shouldShowCreditCardFieldset: boolean;\n}\n\nexport const PaymentWidget = ({\n    additionalContainerClassName,\n    containerId,\n    hideContentWhenSignedOut,\n    hideWidget,\n    isSignInRequired,\n    isSignedIn,\n    method,\n    renderCustomPaymentForm,\n    shouldRenderCustomInstrument,\n    shouldShowCreditCardFieldset,\n}: PaymentWidgetProps): ReactElement => (\n    <div\n        className={classNames(\n            'widget',\n            `widget--${method.id}`,\n            'payment-widget',\n            shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n        )}\n        id={containerId}\n        style={{\n            display:\n                (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                !shouldShowCreditCardFieldset ||\n                hideWidget\n                    ? 'none'\n                    : undefined,\n        }}\n        tabIndex={-1}\n    >\n        {shouldRenderCustomInstrument && renderCustomPaymentForm && renderCustomPaymentForm()}\n    </div>\n);\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { find, noop } from 'lodash';\nimport React, {\n    type ReactElement,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    isCardInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EditButton } from './EditButton';\nimport { PaymentDescriptor } from './PaymentDescriptor';\nimport { PaymentWidget } from './PaymentWidget';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\nconst HostedWidgetPaymentComponent = ({\n    instruments,\n    hideWidget = false,\n    isInitializing = false,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    isLoadingInstruments,\n    shouldHideInstrumentExpiryDate = false,\n    shouldShow = true,\n    hideVerificationFields,\n    method,\n    storedCardValidationSchema,\n    isPaymentDataRequired,\n    setValidationSchema,\n    loadInstruments,\n    onUnhandledError = noop,\n    deinitializeCustomer,\n    deinitializePayment,\n    setSubmit,\n    initializeCustomer,\n    initializePayment,\n    signInCustomer,\n    isSignedIn,\n    isSignInRequired,\n    isInstrumentCardNumberRequired,\n    validateInstrument,\n    containerId,\n    hideContentWhenSignedOut = false,\n    renderCustomPaymentForm,\n    additionalContainerClassName,\n    shouldRenderCustomInstrument = false,\n    paymentDescriptor,\n    shouldShowDescriptor,\n    shouldShowEditButton,\n    buttonId,\n    setFieldValue,\n}: HostedWidgetComponentProps & PaymentContextProps): ReactElement => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n    const instrumentsRef = useRef<PaymentInstrument[]>(instruments);\n\n    useEffect(() => {\n        instrumentsRef.current = instruments;\n    }, [instruments]);\n\n    const getDefaultInstrumentId = useCallback((): string | undefined => {\n        if (isAddingNewCard) {\n            return undefined;\n        }\n\n        const defaultInstrument =\n            instrumentsRef.current.find((instrument) => instrument.defaultInstrument) ||\n            instrumentsRef.current[0];\n\n        return defaultInstrument ? defaultInstrument.bigpayToken : undefined;\n    }, [isAddingNewCard]);\n\n    const getSelectedInstrument = useCallback((): PaymentInstrument | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n\n        return find(instrumentsRef.current, { bigpayToken: currentSelectedId });\n    }, [selectedInstrumentId, getDefaultInstrumentId]);\n\n    const getValidationSchema = useCallback((): ObjectSchema | null => {\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const currentSelectedInstrument = getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && currentSelectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }, [\n        getSelectedInstrument,\n        isInstrumentFeatureAvailableProp,\n        isPaymentDataRequired,\n        storedCardValidationSchema,\n    ]);\n\n    const getSelectedBankAccountInstrument = useCallback(\n        (\n            addingNew: boolean,\n            currentSelectedInstrument: PaymentInstrument,\n        ): AccountInstrument | undefined => {\n            return !addingNew && isBankAccountInstrument(currentSelectedInstrument)\n                ? currentSelectedInstrument\n                : undefined;\n        },\n        [],\n    );\n\n    const handleDeleteInstrument = useCallback(\n        (id: string): void => {\n            if (instruments.length === 0) {\n                setIsAddingNewCard(true);\n                setSelectedInstrumentId(undefined);\n                setFieldValue('instrumentId', '');\n\n                return;\n            }\n\n            if (selectedInstrumentId === id) {\n                const nextId = getDefaultInstrumentId();\n\n                setSelectedInstrumentId(nextId);\n                setFieldValue('instrumentId', nextId);\n            }\n        },\n        [instruments, selectedInstrumentId, getDefaultInstrumentId],\n    );\n\n    const handleUseNewCard = useCallback(async () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        if (deinitializePayment) {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n\n        if (initializePayment) {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n    }, [method, deinitializePayment, initializePayment]);\n\n    const handleSelectInstrument = useCallback((id: string) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    }, []);\n\n    const getValidateInstrument = useCallback((): ReactNode | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n        const currentSelectedInstrument = find(instruments, { bigpayToken: currentSelectedId });\n\n        if (currentSelectedInstrument) {\n            assertIsCardInstrument(currentSelectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequired(\n                currentSelectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return undefined;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, currentSelectedInstrument);\n            }\n        }\n\n        return undefined;\n    }, [\n        selectedInstrumentId,\n        getDefaultInstrumentId,\n        instruments,\n        method,\n        hideVerificationFields,\n        validateInstrument,\n    ]);\n\n    const initializeMethod = async (): Promise<CheckoutSelectors | void> => {\n        const currentInstruments = instrumentsRef.current;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return;\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer || null);\n\n            if (initializeCustomer) {\n                return initializeCustomer({ methodId: method.id });\n            }\n\n            return;\n        }\n\n        setSubmit(method, null);\n\n        let selectedCardInstrument: CardInstrument | undefined;\n\n        if (!isAddingNewCard) {\n            const currentSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n            const maybeInstrument =\n                currentInstruments.find(\n                    (instrument) => instrument.bigpayToken === currentSelectedInstrumentId,\n                ) || currentInstruments[0];\n\n            if (maybeInstrument && isCardInstrument(maybeInstrument)) {\n                selectedCardInstrument = maybeInstrument;\n            }\n        }\n\n        if (initializePayment) {\n            return initializePayment(\n                { gatewayId: method.gateway, methodId: method.id },\n                selectedCardInstrument,\n            );\n        }\n    };\n\n    // Below values are for lower level components\n    const effectiveSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n    const selectedInstrument = effectiveSelectedInstrumentId\n        ? instruments.find((i) => i.bigpayToken === effectiveSelectedInstrumentId) || instruments[0]\n        : instruments[0];\n    const cardInstruments: CardInstrument[] = instruments.filter(\n        (i): i is CardInstrument => !isBankAccountInstrument(i),\n    );\n    const accountInstruments: AccountInstrument[] = instruments.filter(\n        (i): i is AccountInstrument => isBankAccountInstrument(i),\n    );\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n    const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n    const selectedAccountInstrument = selectedInstrument\n        ? getSelectedBankAccountInstrument(isAddingNewCard, selectedInstrument)\n        : undefined;\n    const shouldShowAccountInstrument = instruments[0] && isBankAccountInstrument(instruments[0]);\n\n    useEffect(() => {\n        const init = async () => {\n            setValidationSchema(method, getValidationSchema());\n\n            try {\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments?.();\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void init();\n\n        return () => {\n            const deInit = async () => {\n                setValidationSchema(method, null);\n                setSubmit(method, null);\n\n                try {\n                    if (deinitializePayment) {\n                        await deinitializePayment({\n                            gatewayId: method.gateway,\n                            methodId: method.id,\n                        });\n                    }\n\n                    if (deinitializeCustomer) {\n                        await deinitializeCustomer({ methodId: method.id });\n                    }\n                } catch (error: unknown) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deInit();\n        };\n    }, []);\n\n    const isInitialRenderRef = useRef(true);\n    const instrumentsLength = useRef(instruments.length);\n    const isPaymentDataRequiredRef = useRef(isPaymentDataRequired);\n    const selectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    useEffect(() => {\n        if (isInitialRenderRef.current) {\n            isInitialRenderRef.current = false;\n\n            return;\n        }\n\n        setValidationSchema(method, getValidationSchema());\n\n        const reInit = async () => {\n            try {\n                if (deinitializePayment) {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (\n            selectedInstrumentIdRef.current !== selectedInstrumentId ||\n            (Number(instrumentsLength.current) > 0 && instruments.length === 0) ||\n            isPaymentDataRequiredRef.current !== isPaymentDataRequired\n        ) {\n            selectedInstrumentIdRef.current = selectedInstrumentId;\n            instrumentsLength.current = instruments.length;\n            isPaymentDataRequiredRef.current = isPaymentDataRequired;\n\n            void reInit();\n        }\n    }, [selectedInstrumentId, instruments, isPaymentDataRequired]);\n\n    if (!shouldShow) {\n        return <div style={{ display: 'none' }} />;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrument={selectedAccountInstrument}\n                    />\n                )}\n                {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        instruments={cardInstruments}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={effectiveSelectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                        validateInstrument={getValidateInstrument()}\n                    />\n                )}\n\n                <PaymentDescriptor\n                    paymentDescriptor={paymentDescriptor}\n                    shouldShowDescriptor={shouldShowDescriptor}\n                />\n\n                <PaymentWidget\n                    additionalContainerClassName={additionalContainerClassName}\n                    containerId={containerId}\n                    hideContentWhenSignedOut={hideContentWhenSignedOut}\n                    hideWidget={hideWidget}\n                    isSignInRequired={isSignInRequired}\n                    isSignedIn={isSignedIn}\n                    method={method}\n                    renderCustomPaymentForm={renderCustomPaymentForm}\n                    shouldRenderCustomInstrument={shouldRenderCustomInstrument}\n                    shouldShowCreditCardFieldset={shouldShowCreditCardFieldset}\n                />\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={effectiveSelectedInstrumentId}\n                        instruments={instruments}\n                        isAccountInstrument={Boolean(\n                            isAccountInstrument || shouldShowAccountInstrument,\n                        )}\n                    />\n                )}\n\n                <EditButton buttonId={buttonId} shouldShowEditButton={shouldShowEditButton} />\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedWidgetPaymentComponent;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n"],"names":["appearFocused","id","name","renderInput","useCallback","additionalClassName","input","labelContent","useHostedCreditCard","checkoutState","method","language","paymentForm","setFieldTouched","setFieldValue","setSubmitted","submitForm","config","cardCode","requireCardCode","isCardCodeRequired","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","getHostedFieldId","compact","gateway","join","focusedFieldType","setFocusedFieldType","useState","getHostedStoredCardValidationFieldset","selectedInstrument","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","cardCodeId","undefined","cardNumberId","getHostedFormOptions","styleProps","styleContainerId","fields","cardCodeVerification","accessibilityLabel","translate","containerId","instrumentId","bigpayToken","cardNumberVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","error","Error","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","errors","forIn","fieldErrors","errorKey","type","useMemo","placement","tooltip","className","isCardExpiryRequired","shape","required","hostedForm","test","message","value","cardExpiryVerification","checkoutService","rest","hostedStoredCardValidationSchema","getHostedInstrumentValidationSchema","hidePaymentSubmitButton","disableSubmit","setSubmit","setValidationSchema","instruments","data","getInstruments","getCheckout","isPaymentDataRequired","statuses","isLoadingInstruments","checkout","customer","getCustomer","isInstrumentFeatureAvailable","isGuest","Boolean","isVaultingEnabled","initializeMonerisPayment","options","paymentConfig","moneris","form","initializePayment","HostedWidgetPaymentComponent","deinitializePayment","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","isSignedIn","some","payments","providerId","loadInstruments","signOut","signOutCustomer","storedCardValidationSchema","validateInstrument","_shouldShowNumber","CreditCardInputStylesType","getCreditCardInputStyles","properties","Default","container","document","createElement","parentContainer","getElementById","appendChild","Promise","resolve","Provider","isSubmitted","noop","hasError","ref","element","parentElement","removeChild","testId","props","EditButton","buttonId","shouldShowEditButton","translatedString","TranslatedString","onClick","preventDefault","PaymentDescriptor","shouldShowDescriptor","paymentDescriptor","PaymentWidget","additionalContainerClassName","hideContentWhenSignedOut","hideWidget","isSignInRequired","renderCustomPaymentForm","shouldRenderCustomInstrument","shouldShowCreditCardFieldset","style","display","tabIndex","isInitializing","isAccountInstrument","isInstrumentFeatureAvailableProp","shouldHideInstrumentExpiryDate","shouldShow","hideVerificationFields","onUnhandledError","deinitializeCustomer","initializeCustomer","signInCustomer","isAddingNewCard","setIsAddingNewCard","selectedInstrumentId","setSelectedInstrumentId","instrumentsRef","useRef","useEffect","current","getDefaultInstrumentId","defaultInstrument","find","instrument","getSelectedInstrument","currentSelectedId","getValidationSchema","currentSelectedInstrument","getSelectedBankAccountInstrument","addingNew","handleDeleteInstrument","length","nextId","handleUseNewCard","gatewayId","methodId","handleSelectInstrument","getValidateInstrument","shouldShowNumberField","initializeMethod","currentInstruments","selectedCardInstrument","currentSelectedInstrumentId","maybeInstrument","isCardInstrument","effectiveSelectedInstrumentId","i","cardInstruments","filter","accountInstruments","shouldShowInstrumentFieldset","isLoading","selectedAccountInstrument","shouldShowAccountInstrument","isInitialRenderRef","instrumentsLength","isPaymentDataRequiredRef","selectedInstrumentIdRef","Number","LoadingOverlay","hideContentWhenLoading","AccountInstrumentFieldset","A","onSelectInstrument","onUseNewInstrument","CardInstrumentFieldset","onDeleteInstrument","shouldHideExpiryDate","StoreInstrumentFieldset","cardExpiryId"],"sourceRoot":""}