{"version":3,"file":"checkoutcom-custom-payment-method-0eb68877.js","mappings":"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","sources":["webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/TextFieldForm.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomFormFields.tsx","webpack://checkout/./packages/checkoutcom-integration/src/checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas.tsx","webpack://checkout/./packages/checkoutcom-integration/src/CheckoutcomCustomPaymentMethod.tsx"],"sourcesContent":["import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface TextFieldProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nexport interface TextFieldFormProps {\n    additionalClassName: string;\n    autoComplete: string;\n    labelId: string;\n    name: string;\n}\n\nconst TextField: FunctionComponent<TextFieldProps> = (props) => {\n    const { additionalClassName, autoComplete, labelId, name } = props;\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <TextInput {...field} autoComplete={autoComplete} id={field.name} />\n        ),\n        [autoComplete],\n    );\n\n    const labelContent = useMemo(() => <TranslatedString id={labelId} />, [labelId]);\n\n    return (\n        <FormField\n            additionalClassName={additionalClassName}\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nconst TextFieldForm: FunctionComponent<TextFieldFormProps> = ({\n    additionalClassName,\n    autoComplete,\n    labelId,\n    name,\n}) => (\n    <Fieldset>\n        <div className=\"form-ccFields\">\n            <TextField\n                additionalClassName={additionalClassName}\n                autoComplete={autoComplete}\n                labelId={labelId}\n                name={name}\n            />\n        </div>\n    </Fieldset>\n);\n\nexport default memo(TextFieldForm);\n","import { type BillingAddress, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, {\n    type FunctionComponent,\n    type SyntheticEvent,\n    useCallback,\n    useContext,\n    useEffect,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nimport TextFieldForm from './checkoutcomFieldsets/TextFieldForm';\n\ninterface CheckoutcomAPMFormProps {\n    method: PaymentMethod;\n    debtor: BillingAddress;\n}\n\ninterface Issuer {\n    bic: string;\n    name: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: string;\n}\n\ninterface DropdownButtonProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface OptionButtonProps {\n    className?: string;\n    issuer: Issuer;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\ninterface SepaCreditor {\n    sepaCreditorAddress: string;\n    sepaCreditorCity: string;\n    sepaCreditorCompanyName: string;\n    sepaCreditorCountry: string;\n    sepaCreditorIdentifier: string;\n    sepaCreditorPostalCode: string;\n}\n\nconst Sepa: FunctionComponent<CheckoutcomAPMFormProps> = ({ method, debtor }) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const creditor: SepaCreditor = method.initializationData.sepaCreditor;\n\n    useEffect(() => {\n        paymentContext?.paymentForm.disableSubmit(method, true);\n\n        return () => paymentContext?.paymentForm.disableSubmit(method, false);\n    }, [paymentContext, method]);\n\n    function toggleSubmitButton(isChecked: boolean) {\n        paymentContext?.paymentForm.disableSubmit(method, !isChecked);\n    }\n\n    return (\n        <>\n            <div className=\"checkoutcom-sepa-column-container\">\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_creditor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{creditor.sepaCreditorCompanyName}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorAddress}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${creditor.sepaCreditorPostalCode} ${creditor.sepaCreditorCity}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{creditor.sepaCreditorCountry}</p>\n                    <br />\n                    <p className=\"checkoutcom-sepa-line\">\n                        <TranslatedString\n                            data={{ creditorId: creditor.sepaCreditorIdentifier }}\n                            id=\"payment.checkoutcom_sepa_creditor_id\"\n                        />\n                    </p>\n                </div>\n                <div className=\"checkoutcom-sepa-column-content\">\n                    <h4 className=\"checkoutcom-sepa-title\">\n                        <TranslatedString id=\"payment.checkoutcom_sepa_debtor_title\" />\n                    </h4>\n                    <h5 className=\"checkoutcom-sepa-title\">{`${debtor.firstName} ${debtor.lastName}`}</h5>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.address1}</p>\n                    <p className=\"checkoutcom-sepa-line\">{`${debtor.postalCode} ${debtor.city}, ${debtor.stateOrProvinceCode}`}</p>\n                    <p className=\"checkoutcom-sepa-line\">{debtor.countryCode}</p>\n                </div>\n            </div>\n            <p className=\"checkoutcom-sepa-line\">\n                <TranslatedString id=\"payment.checkoutcom_sepa_payment_type\" />\n            </p>\n            <br />\n\n            <TextFieldForm\n                additionalClassName=\"form-field--iban\"\n                autoComplete=\"iban\"\n                labelId=\"payment.sepa_account_number\"\n                name=\"iban\"\n            />\n            <CheckboxFormField\n                labelContent={\n                    <TranslatedString\n                        data={{ creditorName: creditor.sepaCreditorCompanyName }}\n                        id=\"payment.checkoutcom_sepa_mandate_disclaimer\"\n                    />\n                }\n                name=\"sepaMandate\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onChange={toggleSubmitButton}\n            />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    form,\n    selectedIssuer,\n}) => {\n    const Input = useCallback(() => <input {...restField} type=\"hidden\" />, [restField]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void form.setFieldValue(restField.name, selectedIssuer);\n    }, [value, form, selectedIssuer, restField.name]);\n\n    return <Input />;\n};\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...restProps }) => {\n    const { bic, name } = issuer;\n\n    return (\n        <button data-bic={bic} type=\"button\" {...restProps}>\n            <div className=\"instrumentSelect-details\">{`${bic} / ${name}`}</div>\n        </button>\n    );\n};\n\nconst DropdownButton: FunctionComponent<DropdownButtonProps> = ({ selectedIssuer }) => {\n    if (!selectedIssuer) {\n        return (\n            <button\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                type=\"button\"\n            >\n                <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n                    <div className=\"instrumentSelect-card\">Your bank</div>\n                </div>\n            </button>\n        );\n    }\n\n    return (\n        <OptionButton\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            issuer={selectedIssuer}\n        />\n    );\n};\n\nconst Fawry: FunctionComponent<CheckoutcomAPMFormProps> = () => {\n    return (\n        <>\n            <TextFieldForm\n                additionalClassName=\"form-field--customerMobile\"\n                autoComplete=\"tel\"\n                labelId=\"payment.checkoutcom_fawry_customer_mobile_label\"\n                name=\"customerMobile\"\n            />\n            <TextFieldForm\n                additionalClassName=\"form-field--customerEmail\"\n                autoComplete=\"email\"\n                labelId=\"payment.checkoutcom_fawry_customer_email_label\"\n                name=\"customerEmail\"\n            />\n        </>\n    );\n};\n\nconst Ideal: FunctionComponent<CheckoutcomAPMFormProps> = ({ method }) => {\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer | undefined>();\n    const [bicValue, setBicValue] = useState<string>('');\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={bicValue} />,\n        [bicValue],\n    );\n\n    const issuers: Issuer[] = method.initializationData.idealIssuers;\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        // eslint-disable-next-line no-underscore-dangle\n        const _selectedIssuer = issuers.find(({ bic }) => bic === currentTarget.dataset.bic);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n        setBicValue(_selectedIssuer.bic);\n    };\n\n    const issuersList = (\n        <ul className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\">\n            {issuers.map((issuer) => (\n                <li className=\"instrumentSelect-option dropdown-menu-item\" key={issuer.bic}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <DropdownButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"bic\" />\n        </>\n    );\n};\n\nconst checkoutcomCustomFormFields: CheckoutcomCustomFormFields = {\n    fawry: Fawry,\n    sepa: Sepa,\n    ideal: Ideal,\n};\n\ninterface CheckoutcomCustomFormFields {\n    [key: string]: React.FunctionComponent<CheckoutcomAPMFormProps>;\n}\n\nexport const ccDocumentField = ({ method }: CheckoutcomAPMFormProps) => (\n    <TextFieldForm\n        additionalClassName=\"form-field--ccDocument\"\n        autoComplete=\"cc-document\"\n        labelId={`payment.checkoutcom_document_label_${method.id}`}\n        name=\"ccDocument\"\n    />\n);\n\nexport default checkoutcomCustomFormFields;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { boolean, object, type ObjectSchema, string } from 'yup';\n\nimport {\n    type DocumentOnlyCustomFormFieldsetValues,\n    type FawryCustomFormFieldsetValues,\n    type IdealCustomFormFieldsetValues,\n    type SepaCustomFormFieldsetValues,\n} from './CheckoutcomFormValues';\n\nexport type checkoutcomCustomPaymentMethods = 'fawry' | 'sepa';\nexport type documentPaymentMethods = 'oxxo' | 'qpay' | 'boleto' | 'ideal';\nexport type checkoutcomPaymentMethods = documentPaymentMethods | checkoutcomCustomPaymentMethods;\nexport const checkoutcomPaymentMethodsArray = ['fawry', 'sepa', 'oxxo', 'qpay', 'boleto', 'ideal'];\nexport interface CustomValidationSchemaOptions {\n    paymentMethod: checkoutcomPaymentMethods;\n    language: LanguageService;\n}\n\nconst checkoutComShemas: {\n    [key in checkoutcomPaymentMethods]: (language: LanguageService) => any;\n} = {\n    oxxo: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_oxxo'))\n            .length(18, language.translate('payment.checkoutcom_document_invalid_error_oxxo')),\n    }),\n    qpay: (language: LanguageService) => ({\n        ccDocument: string()\n            .notRequired()\n            .max(32, language.translate('payment.checkoutcom_document_invalid_error_qpay')),\n    }),\n    boleto: (language: LanguageService) => ({\n        ccDocument: string()\n            .required(language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .min(11, language.translate('payment.checkoutcom_document_invalid_error_boleto'))\n            .max(14, language.translate('payment.checkoutcom_document_invalid_error_boleto')),\n    }),\n    sepa: (language: LanguageService) => ({\n        iban: string().required(language.translate('payment.sepa_account_number_required')),\n        sepaMandate: boolean().required(language.translate('payment.sepa_mandate_required')),\n    }),\n    ideal: (language: LanguageService) => ({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    }),\n    fawry: (language: LanguageService) => ({\n        customerMobile: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'))\n            .matches(\n                new RegExp(`^\\\\d{11}$`),\n                language.translate('payment.checkoutcom_fawry_customer_mobile_invalid_error'),\n            ),\n        customerEmail: string()\n            .required(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error'))\n            .email(language.translate('payment.checkoutcom_fawry_customer_email_invalid_error')),\n    }),\n};\n\nexport default memoize(function getCheckoutcomValidationSchemas({\n    paymentMethod,\n    language,\n}: CustomValidationSchemaOptions): ObjectSchema<\n    | DocumentOnlyCustomFormFieldsetValues\n    | FawryCustomFormFieldsetValues\n    | IdealCustomFormFieldsetValues\n    | SepaCustomFormFieldsetValues\n> {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return object(checkoutComShemas[paymentMethod](language));\n});\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    type CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport checkoutcomCustomFormFields, { ccDocumentField } from './CheckoutcomCustomFormFields';\nimport {\n    type checkoutcomPaymentMethods,\n    getCheckoutcomValidationSchemas,\n} from './checkoutcomFieldsets';\nimport { checkoutcomPaymentMethodsArray } from './checkoutcomFieldsets/getCheckoutcomFieldsetValidationSchemas';\n\nexport interface CheckoutcomCustomPaymentMethodProps\n    extends Omit<CreditCardPaymentMethodProps, 'cardFieldset' | 'cardValidationSchema'> {\n    checkoutCustomMethod: string;\n}\n\nconst isCheckoutcomPaymentMethod = (methodId: string): methodId is checkoutcomPaymentMethods => {\n    return Object.values(checkoutcomPaymentMethodsArray).includes(methodId);\n};\nconst CheckoutcomCustomPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    method,\n    checkoutService,\n    checkoutState,\n    ...rest\n}) => {\n    const { getConfig } = checkoutState.data;\n    const isIdealHostedPageExperimentOn =\n        getConfig()?.checkoutSettings.features['PI-2979.checkoutcom_enable_ideal_hosted_page'];\n\n    const checkoutCustomMethod = method.id;\n    const CheckoutcomCustomFieldset =\n        checkoutCustomMethod in checkoutcomCustomFormFields\n            ? checkoutcomCustomFormFields[checkoutCustomMethod]\n            : ccDocumentField;\n\n    const billingAddress = checkoutState.data.getBillingAddress();\n\n    if (\n        !isCheckoutcomPaymentMethod(checkoutCustomMethod) ||\n        (checkoutCustomMethod === 'ideal' && isIdealHostedPageExperimentOn)\n    ) {\n        return null;\n    }\n\n    return (\n        <CreditCardPaymentMethodComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            {...rest}\n            cardFieldset={<CheckoutcomCustomFieldset debtor={billingAddress!} method={method} />}\n            cardValidationSchema={getCheckoutcomValidationSchemas({\n                paymentMethod: checkoutCustomMethod,\n                language,\n            })}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    CheckoutcomCustomPaymentMethod,\n    [{ gateway: 'checkoutcom' }],\n);\n"],"names":["TextField","props","additionalClassName","autoComplete","labelId","name","renderInput","useCallback","field","TextInput","id","labelContent","useMemo","TranslatedString","FormField","input","memo","Fieldset","className","HiddenInput","value","restField","form","selectedIssuer","Input","type","useEffect","setFieldValue","OptionButton","issuer","restProps","bic","DropdownButton","ccDocumentField","method","fawry","sepa","debtor","paymentContext","useContext","PaymentFormContext","creditor","initializationData","sepaCreditor","paymentForm","disableSubmit","sepaCreditorCompanyName","sepaCreditorAddress","sepaCreditorPostalCode","sepaCreditorCity","sepaCreditorCountry","data","creditorId","sepaCreditorIdentifier","firstName","lastName","address1","postalCode","city","stateOrProvinceCode","countryCode","CheckboxFormField","creditorName","onChange","isChecked","ideal","setSelectedIssuer","useState","bicValue","setBicValue","render","issuers","idealIssuers","handleClick","currentTarget","_selectedIssuer","find","dataset","issuersList","map","key","onClick","DropdownTrigger","dropdown","checkoutcomPaymentMethodsArray","checkoutComShemas","oxxo","language","ccDocument","required","translate","length","qpay","notRequired","max","boleto","min","iban","sepaMandate","customerMobile","matches","RegExp","customerEmail","email","paymentMethod","toResolvableComponent","checkoutService","checkoutState","rest","getConfig","isIdealHostedPageExperimentOn","checkoutSettings","features","checkoutCustomMethod","CheckoutcomCustomFieldset","billingAddress","getBillingAddress","methodId","Object","values","includes","CreditCardPaymentMethodComponent","deinitializePayment","initializePayment","cardFieldset","cardValidationSchema","gateway"],"sourceRoot":""}