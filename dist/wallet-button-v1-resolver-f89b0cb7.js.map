{"version":3,"file":"wallet-button-v1-resolver-f89b0cb7.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/customer/CheckoutButton.tsx","webpack://checkout/@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://checkout/@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://checkout/./packages/core/src/app/customer/customWalletButton/ApplePayButton.tsx","webpack://checkout/./packages/core/src/app/customer/WalletButtonV1Resolver.tsx"],"sourcesContent":["import { type CustomerInitializeOptions, type CustomerRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { type ReactElement, useEffect } from 'react';\n\nconst WALLET_BUTTON_HEIGHT = 36;\n\nexport interface CheckoutButtonProps {\n    containerId: string;\n    methodId: string;\n    isShowingWalletButtonsOnTop?: boolean;\n    deinitialize(options: CustomerRequestOptions): void;\n    initialize(options: CustomerInitializeOptions): void;\n    onError?(error: Error): void;\n    onClick?(methodId: string): void;\n}\n\nconst CheckoutButton = ({\n    containerId,\n    methodId,\n    isShowingWalletButtonsOnTop,\n    deinitialize,\n    initialize,\n    onError,\n    onClick = noop,\n}: CheckoutButtonProps): ReactElement => {\n    useEffect(() => {\n        const heightOption = isShowingWalletButtonsOnTop && (methodId === 'braintreepaypal' || methodId === 'braintreepaypalcredit' )\n            ? { buttonHeight: WALLET_BUTTON_HEIGHT }\n            : {};\n\n        initialize({\n            methodId,\n            [methodId]: {\n                ...heightOption,\n                container: containerId,\n                onError,\n                onClick: () => onClick(methodId),\n            },\n        });\n\n        return () => {\n            deinitialize({ methodId });\n        };\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default CheckoutButton;\n","// The require scope\nvar __webpack_require__ = {};\n\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export const BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION = '3.128.0';\nexport const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5809.braintree_hosted_fields_fix_version')) {\n            return BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n    nonce?: string;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    preventCursorJumps?: boolean;\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n    [BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh',\n        [BraintreeModuleName.Paypal]:\n            'sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv',\n        [BraintreeModuleName.Venmo]:\n            'sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr',\n    },\n};\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","export enum ApplePayGatewayType {\n    BRAINTREE = 'braintree',\n    BRAINTREE_FASTLANE = 'braintreeacceleratedcheckout',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayCustomerInitializeOptions } from './apple-pay-customer-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _onError = noop;\n    private _onClick = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _hasApplePaySession = false;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithApplePayCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            container,\n            shippingLabel,\n            subtotalLabel,\n            onError = noop,\n            onClick = noop,\n            onPaymentAuthorize,\n        } = applepay;\n\n        this._shippingLabel = shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = subtotalLabel || DefaultLabels.Subtotal;\n        this._onAuthorizeCallback = onPaymentAuthorize;\n        this._onError = onError;\n        this._onClick = onClick;\n\n        let state = this._paymentIntegrationService.getState();\n\n        await this._applePayScriptLoader.loadSdk();\n\n        try {\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n\n        this._applePayButton = this._createButton(container);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via Apple, the shopper must click on \"Apple Pay\" button.',\n        );\n    }\n\n    signOut(): Promise<void> {\n        throw new NotImplementedError('Need to do signout via apple.');\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._createApplePayButtonElement();\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createApplePayButtonElement(): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', 'black');\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 36px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (this._hasApplePaySession) {\n            return;\n        }\n\n        this._onClick();\n\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n        this._hasApplePaySession = true;\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                this._onError(err);\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            this._hasApplePaySession = false;\n\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                return this._onError(new PaymentMethodCancelledError());\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            return this._onError(error);\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return this._onError(error);\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { assertApplePayWindow } from './apple-pay-session-factory';\n\nexport default class ApplePayScriptLoader {\n    private sdkVersion = '1.latest';\n\n    constructor(private scriptLoader: ScriptLoader) {}\n\n    async loadSdk() {\n        await this.scriptLoader.loadScript(\n            `https://applepay.cdn-apple.com/jsapi/${this.sdkVersion}/apple-pay-sdk.js`,\n        );\n\n        assertApplePayWindow(window);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayCustomerStrategy from './apple-pay-customer-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayCustomerStrategy: CustomerStrategyFactory<ApplePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayCustomerStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayCustomerStrategy, [{ id: 'applepay' }]);\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayPaymentInitializeOptions } from './apple-pay-payment-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\ninterface ApplePayPromise {\n    resolve(): void;\n    reject(reason?: Error): void;\n}\n\nenum DefaultLabels {\n    Shipping = 'Shipping',\n    Subtotal = 'Subtotal',\n    StoreCredit = 'Store Credit',\n}\n\nexport default class ApplePayPaymentStrategy implements PaymentStrategy {\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _storeCreditLabel: string = DefaultLabels.StoreCredit;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithApplePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const { methodId } = options;\n\n        await this._applePayScriptLoader.loadSdk();\n\n        this._shippingLabel = options.applepay?.shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = options.applepay?.subtotalLabel || DefaultLabels.Subtotal;\n        this._storeCreditLabel = options.applepay?.storeCreditLabel || DefaultLabels.StoreCredit;\n\n        const state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const paymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n        const state = this._paymentIntegrationService.getState();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const request = this._getBaseRequest(state, paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        await this._paymentIntegrationService.submitOrder(\n            {\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n\n        applePaySession.begin();\n\n        return new Promise((resolve, reject) => {\n            this._handleApplePayEvents(applePaySession, paymentMethod, {\n                resolve,\n                reject,\n            });\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _getBaseRequest(\n        state: PaymentIntegrationSelectors,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const checkout = state.getCheckoutOrThrow();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const { grandTotal, isStoreCreditApplied, outstandingBalance } = checkout;\n\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        if (isStoreCreditApplied) {\n            const { storeCredit } = state.getCustomerOrThrow();\n\n            lineItems.push({\n                label: this._storeCreditLabel,\n                amount: `-${Math.min(grandTotal, storeCredit).toFixed(decimalPlaces)}`,\n            });\n        }\n\n        return {\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems,\n            total: {\n                label: storeName,\n                amount: `${outstandingBalance.toFixed(decimalPlaces)}`,\n                type: 'final',\n            },\n        };\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.oncancel = async () =>\n            promise.reject(new PaymentMethodCancelledError('Continue with applepay'));\n\n        applePaySession.onpaymentauthorized = (event: ApplePayJS.ApplePayPaymentAuthorizedEvent) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod, promise);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        const { token } = event.payment;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        try {\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return promise.resolve();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return promise.reject(\n                new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n            );\n        }\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        const state = this._paymentIntegrationService.getState();\n        let braintreePaymentMethod =\n            state.getPaymentMethod(ApplePayGatewayType.BRAINTREE_FASTLANE) ||\n            state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (!braintreePaymentMethod) {\n            await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n            braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n        }\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayPaymentStrategy from './apple-pay-payment-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayPaymentStrategy: PaymentStrategyFactory<ApplePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayPaymentStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayPaymentStrategy, [{ id: 'applepay' }]);\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport ApplePayButtonInitializeOptions, {\n    WithApplePayButtonInitializeOptions,\n} from './apple-pay-button-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nexport enum ButtonStyleOption {\n    Black = 'black',\n    White = 'white',\n    WhiteBorder = 'white-border',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nconst getButtonStyle = (buttonStyle?: ButtonStyleOption): string => {\n    switch (buttonStyle) {\n        case ButtonStyleOption.White:\n            return 'white';\n\n        case ButtonStyleOption.WhiteBorder:\n            return 'white-outline';\n\n        case ButtonStyleOption.Black:\n        default:\n            return 'black';\n    }\n};\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _requiresShipping?: boolean;\n    private _buyNowInitializeOptions?: ApplePayButtonInitializeOptions['buyNowInitializeOptions'];\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await this._applePayScriptLoader.loadSdk();\n\n        const { onPaymentAuthorize, buyNowInitializeOptions, requiresShipping } = applepay;\n\n        this._requiresShipping = requiresShipping;\n\n        this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        if (!buyNowInitializeOptions) {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const cart = state.getCart();\n\n        if (cart) {\n            await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n        }\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n\n        this._applePayButton = this._createButton(\n            containerId,\n            this._paymentMethod.initializationData?.styleOption,\n        );\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string, styleOption?: ButtonStyleOption): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._createApplePayButtonElement(styleOption);\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createApplePayButtonElement(styleOption?: ButtonStyleOption): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', getButtonStyle(styleOption));\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 40px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private async _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this._buyNowInitializeOptions &&\n            typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const {\n                countryCode,\n                currencyCode,\n                merchantCapabilities,\n                supportedNetworks,\n                storeName,\n            } = this._paymentMethod.initializationData;\n\n            const request = this._getRequestWithEmptyTotal(\n                countryCode,\n                currencyCode,\n                supportedNetworks,\n                merchantCapabilities,\n            );\n\n            if (this._requiresShipping) {\n                request.requiredShippingContactFields?.push('postalAddress');\n            }\n\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(applePaySession, this._paymentMethod, storeName);\n\n            applePaySession.begin();\n        } else {\n            const state = this._paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const config = state.getStoreConfigOrThrow();\n            const checkout = state.getCheckoutOrThrow();\n            const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(\n                applePaySession,\n                this._paymentMethod,\n                config.storeProfile.storeName,\n            );\n\n            applePaySession.begin();\n        }\n    }\n\n    private _getRequestWithEmptyTotal(\n        countryCode: string,\n        currencyCode: string,\n        supportedNetworks: string[],\n        merchantCapabilities: ApplePayJS.ApplePayMerchantCapability[],\n    ): ApplePayJS.ApplePayPaymentRequest {\n        return {\n            countryCode,\n            currencyCode,\n            supportedNetworks,\n            merchantCapabilities,\n            total: { label: '', amount: '0', type: 'pending' },\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n        };\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        storeName: string,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        if (this._buyNowInitializeOptions && !this._requiresShipping) {\n            applePaySession.onpaymentmethodselected = async () => {\n                await this._createBuyNowCart();\n                this._handlePaymentMethodSelected(applePaySession);\n            };\n        }\n\n        applePaySession.onshippingcontactselected = async (event) => {\n            if (this._buyNowInitializeOptions && this._requiresShipping) {\n                await this._createBuyNowCart();\n            }\n\n            await this._handleShippingContactSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.onshippingmethodselected = async (event) => {\n            await this._handleShippingMethodSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _createBuyNowCart() {\n        try {\n            const cartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            const buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                cartRequestBody,\n            );\n\n            await this._paymentIntegrationService.loadCheckout(buyNowCart.id);\n\n            const state = this._paymentIntegrationService.getState();\n            const { shouldExecuteSpamCheck } = state.getCheckoutOrThrow();\n\n            if (shouldExecuteSpamCheck) {\n                await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n            }\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private _handlePaymentMethodSelected(applePaySession: ApplePaySession) {\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n\n        delete request.total.type;\n\n        applePaySession.completePaymentMethodSelection({\n            newTotal: request.total,\n            newLineItems: request.lineItems,\n        });\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","import { type CustomerInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { createApplePayCustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/apple-pay';\nimport { noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useContext } from 'react';\n\nimport { LocaleContext } from '@bigcommerce/checkout/locale';\nimport { navigateToOrderConfirmation } from '@bigcommerce/checkout/utility';\n\nimport CheckoutButton, { type CheckoutButtonProps } from '../CheckoutButton';\n\nconst ApplePayButton: FunctionComponent<CheckoutButtonProps> = ({\n    initialize,\n    onError,\n    onClick = noop,\n    ...rest\n}) => {\n    const localeContext = useContext(LocaleContext);\n    const initializeOptions = useCallback(\n        (options: CustomerInitializeOptions) =>\n            initialize({\n                ...options,\n                integrations: [createApplePayCustomerStrategy],\n                applepay: {\n                    container: rest.containerId,\n                    shippingLabel: localeContext?.language.translate('cart.shipping_text'),\n                    subtotalLabel: localeContext?.language.translate('cart.subtotal_text'),\n                    onError,\n                    onClick: () => onClick(rest.methodId),\n                    onPaymentAuthorize: navigateToOrderConfirmation,\n                },\n            }),\n        [initialize, localeContext, onError, rest.containerId],\n    );\n\n    return <CheckoutButton initialize={initializeOptions} {...rest} />;\n};\n\nexport default ApplePayButton;\n","import { type CustomerInitializeOptions, type CustomerRequestOptions } from \"@bigcommerce/checkout-sdk\";\nimport { createBigCommercePaymentsFastlaneCustomerStrategy, createBigCommercePaymentsVenmoCustomerStrategy } from \"@bigcommerce/checkout-sdk/integrations/bigcommerce-payments\";\nimport { createBoltCustomerStrategy } from \"@bigcommerce/checkout-sdk/integrations/bolt\";\nimport { createBraintreeFastlaneCustomerStrategy, createBraintreePaypalCreditCustomerStrategy, createBraintreePaypalCustomerStrategy, createBraintreeVisaCheckoutCustomerStrategy } from \"@bigcommerce/checkout-sdk/integrations/braintree\";\nimport { createPayPalCommerceFastlaneCustomerStrategy, createPayPalCommerceVenmoCustomerStrategy } from \"@bigcommerce/checkout-sdk/integrations/paypal-commerce\";\nimport { createStripeLinkV2CustomerStrategy, createStripeUPECustomerStrategy } from \"@bigcommerce/checkout-sdk/integrations/stripe\";\nimport React, { type FunctionComponent, useCallback } from \"react\";\n\nimport CheckoutButton from \"./CheckoutButton\";\nimport { ApplePayButton } from \"./customWalletButton\";\n\ninterface CheckoutButtonV1ResolverProps {\n    methodId: string;\n    deinitialize(options: CustomerRequestOptions): void;\n    isShowingWalletButtonsOnTop?: boolean;\n    initialize(options: CustomerInitializeOptions): void;\n    onError?(error: Error): void;\n    onClick?(methodName: string): void;\n}\n\nconst CheckoutButtonV1Resolver: FunctionComponent<CheckoutButtonV1ResolverProps> = ({\n    isShowingWalletButtonsOnTop= false,\n    initialize,\n    onError,\n    methodId,\n    ...rest\n}) => {\n    const initializeWithIntegrations = useCallback(\n        (options: CustomerInitializeOptions) => {\n            return initialize({\n                ...options,\n                integrations: [\n                    ...options.integrations ?? [],\n                    createBigCommercePaymentsFastlaneCustomerStrategy,\n                    createBigCommercePaymentsVenmoCustomerStrategy,\n                    createBoltCustomerStrategy,\n                    createBraintreePaypalCustomerStrategy,\n                    createBraintreePaypalCreditCustomerStrategy,\n                    createBraintreeFastlaneCustomerStrategy,\n                    createBraintreeVisaCheckoutCustomerStrategy,\n                    createPayPalCommerceVenmoCustomerStrategy,\n                    createPayPalCommerceFastlaneCustomerStrategy,\n                    createStripeUPECustomerStrategy,\n                    createStripeLinkV2CustomerStrategy,\n                ],\n            });\n        },\n        [initialize],\n    );\n\n    switch (methodId) {\n        case 'applepay':\n            return <ApplePayButton\n                containerId={`${methodId}CheckoutButton`}\n                initialize={initialize}\n                key={methodId}\n                methodId={methodId}\n                onError={onError}\n                {...rest}\n            />;\n    }\n\n    return <CheckoutButton\n            containerId={`${methodId}CheckoutButton`}\n            initialize={initializeWithIntegrations}\n            isShowingWalletButtonsOnTop={isShowingWalletButtonsOnTop}\n            key={methodId}\n            methodId={methodId}\n            onError={onError}\n            {...rest}\n        />;\n};\n\nexport default CheckoutButtonV1Resolver;\n"],"names":["containerId","methodId","isShowingWalletButtonsOnTop","deinitialize","initialize","onError","onClick","noop","useEffect","heightOption","buttonHeight","container","id","__webpack_require__","isExperimentEnabled","features","experimentName","fallbackValue","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","BraintreeSDKVersionManager","constructor","paymentIntegrationService","braintreeWindow","window","getSDKVersion","storeConfig","this","getState","getStoreConfig","checkoutSettings","getPreloadedSDKVersion","braintree","preloadedVersion","find","values","module","VERSION","StandardError","Error","message","super","name","type","setPrototypeOf","__proto__","captureStackTrace","stack","UnsupportedBrowserError","NotInitializedErrorType","TotalPriceStatusType","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","subtype","ESTIMATED","FINAL","NOT_CURRENTLY_KNOWN","Completed","Pending","Failed","TRUSTLY","SUCCEEDED","FAILED","CANCELED","UNRECOGNIZED","Customer","Merchant","Network","Internal","Unknown","KountNotEnabled","Visa","Mastercard","AmericanExpress","DinersClub","Discover","Jcb","UnionPay","Maestro","Elo","Mir","Hiper","Hipercard","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","BraintreeSdk","braintreeScriptLoader","clientToken","setClientToken","teardownModule","dataCollector","getClient","client","getClientTokenOrThrow","clientCreator","loadClient","create","authorization","getDataCollectorOrThrow","options","emptyDataCollector","deviceData","teardown","Promise","resolve","loadDataCollector","dataCollectorConfig","kount","error","Boolean","code","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","all","loadGooglePayment","getBraintreeThreeDS","threeDS","threeDSecure","load3DS","version","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","localPaymentCreator","loadLocalPayment","reject","getUsBankAccount","usBankAccount","loadUsBankAccount","getBraintreeVisaCheckout","visaCheckout","loadVisaCheckout","then","paypal","getVisaCheckoutSdk","testMode","visaCheckoutSDK","loadVisaCheckoutSdk","getVenmoCheckoutOrThrow","braintreeVenmo","venmoCheckout","loadVenmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","PaymentMethodClientUnavailableError","Sandbox","Production","Client","DataCollector","Fastlane","GooglePayment","HostedFields","LocalPayment","Paypal","PaypalCheckout","ThreeDSecure","UsBankAccount","Venmo","VisaCheckout","CardCode","CardCodeVerification","CardExpiry","CardName","CardNumber","CardNumberVerification","BRAINTREE_SDK_SCRIPTS_INTEGRITY","MissingDataErrorType","ApplePayGatewayType","BraintreeScriptLoader","scriptLoader","braintreeHostWindow","braintreeSDKVersionManager","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadHostedFields","V","hash","loadScript","async","attributes","integrity","crossorigin","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","scriptPath","getIntegrityValuesByModuleName","t","moduleName","toResolvableModule","resolveIds","assign","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","NotImplementedError","InvalidArgumentError","PaymentMethodCancelledError","BRAINTREE","BRAINTREE_FASTLANE","DefaultLabels","Subtotal","Shipping","ApplePayCustomerStrategy","_requestSender","_paymentIntegrationService","_sessionFactory","_braintreeSdk","_applePayScriptLoader","_onAuthorizeCallback","_onError","_onClick","_subTotalLabel","_shippingLabel","_hasApplePaySession","applepay","shippingLabel","subtotalLabel","onPaymentAuthorize","state","loadSdk","_paymentMethod","getPaymentMethodOrThrow","_e","loadPaymentMethod","verifyCheckoutSpamProtection","_applePayButton","_createButton","addEventListener","_handleWalletButtonClick","bind","initializationData","gateway","_initializeBraintreeSdk","signIn","signOut","executePaymentMethodCheckout","continueWithCheckoutCallback","document","getElementById","applePayButton","_createApplePayButtonElement","appendChild","createElement","setAttribute","event","preventDefault","cart","getCartOrThrow","config","getStoreConfigOrThrow","checkout","getCheckoutOrThrow","request","_getBaseRequest","applePaySession","_handleApplePayEvents","begin","paymentMethod","storeProfile","storeCountryCode","storeName","currency","decimalPlaces","merchantCapabilities","supportedNetworks","requiresShipping","lineItems","physicalItems","length","requiredBillingContactFields","requiredShippingContactFields","countryCode","currencyCode","total","label","amount","grandTotal","toFixed","push","subtotal","taxes","forEach","tax","onvalidatemerchant","body","merchantSession","_onValidateMerchant","completeMerchantValidation","err","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","url","loadCheckout","onpaymentauthorized","_onPaymentAuthorized","shippingAddress","_transformContactToAddress","shippingContact","updateShippingAddress","abort","selectionShippingOptionId","consignments","selectedShippingOption","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","filter","option","shippingOptions","description","cost","detail","additionalDescription","identifier","isRecommended","Array","completeShippingContactSelection","ApplePaySession","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","newTotal","newLineItems","_getUpdatedLineItems","shippingMethod","completeShippingMethodSelection","shippingCostTotal","selectShippingOption","paymentData","validationURL","merchantId","location","hostname","join","post","paymentsUrl","credentials","headers","Accept","token","billingContact","payment","deviceSessionId","_getBraintreeDeviceData","formattedPayload","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","phone","phoneNumber","updateBillingAddress","email","submitOrder","useStoreCredit","submitPayment","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","firstName","givenName","lastName","familyName","city","locality","company","address1","addressLines","address2","postalCode","stateOrProvince","administrativeArea","stateOrProvinceCode","customFields","_","braintreePaymentMethod","getPaymentMethod","assertApplePayWindow","ApplePaySessionFactory","ApplePayScriptLoader","sdkVersion","getHost","createRequestSender","host","getScriptLoader","ScriptLoader","PaymentArgumentInvalidError","invalidFields","OrderFinalizationNotRequiredError","StoreCredit","ApplePayPaymentStrategy","_storeCreditLabel","storeCreditLabel","execute","payload","finalize","isStoreCreditApplied","outstandingBalance","storeCredit","getCustomerOrThrow","Math","min","promise","BuyNowCartCreationError","ButtonStyleOption","Black","White","WhiteBorder","ApplePayButtonStrategy","buyNowInitializeOptions","_requiresShipping","_buyNowInitializeOptions","loadDefaultCheckout","getCart","styleOption","buttonStyle","getBuyNowCartRequestBody","_getRequestWithEmptyTotal","onpaymentmethodselected","_createBuyNowCart","_handlePaymentMethodSelected","cartRequestBody","buyNowCart","createBuyNowCart","shouldExecuteSpamCheck","completePaymentMethodSelection","rest","localeContext","useContext","LocaleContext","initializeOptions","useCallback","integrations","language","translate","navigateToOrderConfirmation","initializeWithIntegrations"],"sourceRoot":""}