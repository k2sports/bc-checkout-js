{"version":3,"file":"square-v2-payment-method-49b632d5.js","mappings":"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","sources":["webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/enums.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-execute-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/squarev2-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/squarev2-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/squarev2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/is-squarev2-window.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/squarev2-integration/src/create-squarev2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/./packages/squarev2-integration/src/SquareV2Form.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2PaymentMethod.tsx"],"sourcesContent":["export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => updateFieldValue(selectedInstrumentId));\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","export enum SquareIntent {\n    CHARGE = 'CHARGE',\n    STORE = 'STORE',\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\nconst defaultMessage =\n    'Payment cannot be processed for this order, please select another payment method';\n\nexport default class PaymentExecuteError extends StandardError {\n    type = 'custom_provider_execute_error';\n    subtype: string;\n\n    constructor(subtype: string, name: string, message?: string) {\n        super(message || defaultMessage);\n\n        this.name = name;\n        this.subtype = subtype;\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { fromEvent, merge, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport {\n    BillingAddress,\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentExecuteError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { SquareIntent } from './enums';\nimport SquareV2PaymentInitializeOptions from './squarev2-payment-initialize-options';\nimport SquareV2ScriptLoader from './squarev2-script-loader';\nimport {\n    BillingContact,\n    Card,\n    CardInputEvent,\n    CardInputEventTypes,\n    ChargeVerifyBuyerDetails,\n    Payments,\n    SqEvent,\n    StoreVerifyBuyerDetails,\n} from './types';\n\nexport interface SquareV2PaymentProcessorOptions {\n    applicationId: string;\n    locationId?: string;\n    testMode?: boolean;\n}\n\nexport default class SquareV2PaymentProcessor {\n    private _payments?: Payments;\n    private _card?: Card;\n    private _formValidationSubscription?: Subscription;\n\n    constructor(\n        private _scriptLoader: SquareV2ScriptLoader,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async initialize({\n        testMode,\n        applicationId,\n        locationId,\n    }: SquareV2PaymentProcessorOptions): Promise<void> {\n        const square = await this._scriptLoader.load(testMode);\n\n        this._payments = square.payments(applicationId, locationId);\n    }\n\n    async deinitialize(): Promise<void> {\n        if (this._formValidationSubscription) {\n            this._formValidationSubscription.unsubscribe();\n        }\n\n        if (this._card) {\n            await this._card.destroy();\n        }\n\n        this._formValidationSubscription = undefined;\n        this._card = undefined;\n        this._payments = undefined;\n    }\n\n    async initializeCard({\n        containerId,\n        style,\n        onValidationChange,\n    }: SquareV2PaymentInitializeOptions): Promise<void> {\n        const { postalCode } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        this._card = await this._getPayments().card();\n        await this._card.attach(`#${containerId}`);\n\n        try {\n            await this._card.configure({ postalCode, style });\n        } catch (_error) {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        if (onValidationChange) {\n            this._formValidationSubscription = this._subscribeToFormValidation(\n                this._card,\n                onValidationChange,\n            );\n        }\n    }\n\n    async tokenize(): Promise<string> {\n        const result = await this._getCard().tokenize();\n\n        if (result.status !== 'OK' || !result.token) {\n            let errorMessage = `Tokenization failed with status: ${result.status}`;\n\n            if (result.errors) {\n                errorMessage += ` and errors: ${JSON.stringify(result.errors)}`;\n            }\n\n            throw new PaymentExecuteError(\n                'payment.errors.card_error',\n                'SquareV2TokenizationError',\n                errorMessage,\n            );\n        }\n\n        return result.token;\n    }\n\n    async verifyBuyer(token: string, intent: SquareIntent): Promise<string> {\n        return intent === SquareIntent.CHARGE\n            ? this._chargeVerifyBuyer(token)\n            : this._storeVerifyBuyer(token);\n    }\n\n    private _getPayments(): Payments {\n        return guard(\n            this._payments,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _subscribeToFormValidation(\n        card: Card,\n        observer: Required<SquareV2PaymentInitializeOptions>['onValidationChange'],\n    ): Subscription {\n        const blacklist = ['cardNumber', 'cvv'];\n        const invalidFields = new Set<string>(blacklist);\n        const eventObservables = [\n            'focusClassAdded',\n            'focusClassRemoved',\n            'errorClassAdded',\n            'errorClassRemoved',\n            'cardBrandChanged',\n            'postalCodeChanged',\n        ].map((eventType) => fromEvent(card, eventType as CardInputEventTypes));\n\n        return merge(...eventObservables)\n            .pipe(\n                map((event: SqEvent<CardInputEvent>): boolean => {\n                    const {\n                        detail: {\n                            field,\n                            currentState: { isCompletelyValid },\n                        },\n                    } = event;\n\n                    if (blacklist.includes(field)) {\n                        invalidFields[isCompletelyValid ? 'delete' : 'add'](field);\n                    }\n\n                    return invalidFields.size === 0;\n                }),\n                distinctUntilChanged(),\n            )\n            .subscribe(observer);\n    }\n\n    private _getCard(): Card {\n        return guard(\n            this._card,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _mapToSquareBillingContact({\n        firstName: givenName,\n        lastName: familyName,\n        address1,\n        address2,\n        city,\n        stateOrProvinceCode: state,\n        postalCode,\n        countryCode,\n        email,\n        phone,\n    }: BillingAddress): BillingContact {\n        return {\n            givenName,\n            familyName,\n            addressLines: [address1, address2],\n            city,\n            state,\n            postalCode,\n            countryCode,\n            email,\n            phone,\n        };\n    }\n\n    private async _chargeVerifyBuyer(token: string): Promise<string> {\n        const { getCheckoutOrThrow, getBillingAddressOrThrow } =\n            this._paymentIntegrationService.getState();\n        const { outstandingBalance, cart } = getCheckoutOrThrow();\n\n        const details: ChargeVerifyBuyerDetails = {\n            amount: outstandingBalance.toString(),\n            billingContact: this._mapToSquareBillingContact(getBillingAddressOrThrow()),\n            currencyCode: cart.currency.code,\n            intent: SquareIntent.CHARGE,\n        };\n\n        const response = await this._getPayments().verifyBuyer(token, details);\n\n        return response ? response.token : '';\n    }\n\n    private async _storeVerifyBuyer(token: string): Promise<string> {\n        const { getBillingAddressOrThrow } = this._paymentIntegrationService.getState();\n\n        const details: StoreVerifyBuyerDetails = {\n            billingContact: this._mapToSquareBillingContact(getBillingAddressOrThrow()),\n            intent: SquareIntent.STORE,\n        };\n\n        const response = await this._getPayments().verifyBuyer(token, details);\n\n        return response ? response.token : '';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport assertSquareV2Window from './is-squarev2-window';\nimport { Square } from './types';\n\nexport enum SquareV2WebPaymentsSdkEnv {\n    LIVE = 'https://web.squarecdn.com/v1/square.js',\n    SANDBOX = 'https://sandbox.web.squarecdn.com/v1/square.js',\n}\n\nexport default class SquareV2ScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async load(testMode = false): Promise<Square> {\n        await this._scriptLoader.loadScript(\n            testMode ? SquareV2WebPaymentsSdkEnv.SANDBOX : SquareV2WebPaymentsSdkEnv.LIVE,\n        );\n\n        assertSquareV2Window(window);\n\n        return window.Square;\n    }\n}\n","import {\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodInvalidError,\n    PaymentStrategy,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { SquareIntent } from './enums';\nimport { WithSquareV2PaymentInitializeOptions } from './squarev2-payment-initialize-options';\nimport SquareV2PaymentProcessor from './squarev2-payment-processor';\nimport {\n    SquareCreditCardTokens,\n    SquareFormattedVaultedInstrument,\n    SquareInitializationData,\n    SquarePaymentMethodInitializationData,\n} from './types';\n\nexport default class SquareV2PaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _squareV2PaymentProcessor: SquareV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithSquareV2PaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.squarev2?.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" argument is not provided.',\n            );\n        }\n\n        const { methodId, squarev2 } = options;\n        const {\n            config: { testMode },\n            initializationData,\n        } = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<SquarePaymentMethodInitializationData>(methodId);\n        const { applicationId, locationId } = initializationData || {};\n\n        if (!applicationId) {\n            throw new PaymentMethodInvalidError();\n        }\n\n        await this._squareV2PaymentProcessor.initialize({\n            applicationId,\n            locationId,\n            testMode,\n        });\n        await this._squareV2PaymentProcessor.initializeCard(squarev2);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        await this._paymentIntegrationService.submitOrder();\n\n        const submitPaymentPayload =\n            paymentData && isVaultedInstrument(paymentData)\n                ? await this._getVaultedInstrumentPayload(methodId, paymentData)\n                : await this._getCardPayload(methodId, shouldSaveInstrument);\n\n        await this._paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: {\n                formattedPayload: {\n                    ...submitPaymentPayload,\n                    vault_payment_instrument: shouldSaveInstrument || false,\n                    set_as_default_stored_instrument: shouldSetAsDefaultInstrument || false,\n                },\n            },\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return this._squareV2PaymentProcessor.deinitialize();\n    }\n\n    private shouldVerify(): boolean {\n        const { features } = this._paymentIntegrationService\n            .getState()\n            .getStoreConfigOrThrow().checkoutSettings;\n\n        return features['PROJECT-3828.add_3ds_support_on_squarev2'];\n    }\n\n    private async _getCardPayload(methodId: string, shouldSaveInstrument?: boolean) {\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const { initializationData } = getPaymentMethodOrThrow<SquareInitializationData>(methodId);\n\n        const cardTokenizationResult = await this._squareV2PaymentProcessor.tokenize();\n\n        if (\n            initializationData && 'isSquareV2ApiV2Enabled' in initializationData\n                ? !initializationData.isSquareV2ApiV2Enabled\n                : !this.shouldVerify()\n        ) {\n            return {\n                credit_card_token: {\n                    token: cardTokenizationResult,\n                },\n            };\n        }\n\n        let tokenData: SquareCreditCardTokens = {\n            nonce: cardTokenizationResult,\n            token: await this._squareV2PaymentProcessor.verifyBuyer(\n                cardTokenizationResult,\n                SquareIntent.CHARGE,\n            ),\n        };\n\n        if (shouldSaveInstrument) {\n            // INFO: additional 'tokenize' is required to verify and save the card\n            // for each 'verifyBuyer' we need to generate new token\n            const tokenForSavingCard = await this._squareV2PaymentProcessor.tokenize();\n\n            tokenData = {\n                ...tokenData,\n                store_card_nonce: tokenForSavingCard,\n                store_card_token: await this._squareV2PaymentProcessor.verifyBuyer(\n                    tokenForSavingCard,\n                    SquareIntent.STORE,\n                ),\n            };\n        }\n\n        return {\n            credit_card_token: {\n                token: JSON.stringify(tokenData),\n            },\n        };\n    }\n\n    private async _getVaultedInstrumentPayload(\n        methodId: string,\n        paymentData: VaultedInstrument,\n    ): Promise<SquareFormattedVaultedInstrument> {\n        const { getPaymentMethodOrThrow } = this._paymentIntegrationService.getState();\n        const { initializationData } = getPaymentMethodOrThrow<SquareInitializationData>(methodId);\n\n        const { instrumentId } = paymentData;\n        const shouldVerify =\n            initializationData && 'isSquareV2ApiV2Enabled' in initializationData\n                ? initializationData.isSquareV2ApiV2Enabled\n                : this.shouldVerify();\n        const verificationToken = shouldVerify\n            ? await this._squareV2PaymentProcessor.verifyBuyer(\n                  await this._getSquareCardIdOrThrow(methodId, instrumentId),\n                  SquareIntent.CHARGE,\n              )\n            : undefined;\n\n        return {\n            bigpay_token: {\n                token: instrumentId,\n                ...(verificationToken && { three_d_secure: { token: verificationToken } }),\n            },\n        };\n    }\n\n    private async _getSquareCardIdOrThrow(methodId: string, instrumentId: string): Promise<string> {\n        const state = await this._paymentIntegrationService.loadPaymentMethod(methodId, {\n            params: { method: methodId, bigpayToken: instrumentId },\n        });\n\n        const { initializationData } =\n            state.getPaymentMethodOrThrow<SquareInitializationData>(methodId);\n        const { cardId } = initializationData || {};\n\n        if (!cardId) {\n            throw new PaymentArgumentInvalidError(['cardId']);\n        }\n\n        return cardId;\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport type { Square } from './types';\n\ninterface SquareV2HostWindow extends Window {\n    Square: Square;\n}\n\nfunction isSquareV2Window(window: Window): window is SquareV2HostWindow {\n    return 'Square' in window;\n}\n\nexport default function assertSquareV2Window(window: Window): asserts window is SquareV2HostWindow {\n    if (!isSquareV2Window(window)) {\n        throw new PaymentMethodClientUnavailableError();\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategy,\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SquareV2PaymentProcessor from './squarev2-payment-processor';\nimport SquareV2PaymentStrategy from './squarev2-payment-strategy';\nimport SquareV2ScriptLoader from './squarev2-script-loader';\n\nconst createSquareV2PaymentStrategy: PaymentStrategyFactory<PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new SquareV2PaymentStrategy(\n        paymentIntegrationService,\n        new SquareV2PaymentProcessor(\n            new SquareV2ScriptLoader(getScriptLoader()),\n            paymentIntegrationService,\n        ),\n    );\n};\n\nexport default toResolvableModule(createSquareV2PaymentStrategy, [{ id: 'squarev2' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport {\n    CardInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface SquareV2FormProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    containerId: string;\n    deinitializePayment: () => Promise<void>;\n    initializePayment: () => Promise<void>;\n    method: PaymentMethod;\n}\n\nconst SquareV2Form: FunctionComponent<SquareV2FormProps> = ({\n    checkoutService,\n    checkoutState,\n    containerId,\n    deinitializePayment,\n    initializePayment,\n    method,\n}) => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n\n    const { getCustomer, getInstruments } = checkoutState.data;\n    const isSignedIn = getCustomer()?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n\n    useEffect(() => {\n        if (isInstrumentFeatureAvailable) {\n            void checkoutService.loadInstruments();\n        }\n    }, [checkoutService, isInstrumentFeatureAvailable]);\n\n    const instruments = useMemo(() => getInstruments(method) || [], [getInstruments, method]);\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n\n    const getDefaultInstrumentId = useCallback(() => {\n        if (isAddingNewCard) {\n            return;\n        }\n\n        if (instruments.length > 0) {\n            const defaultInstrument =\n                instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n            return defaultInstrument.bigpayToken;\n        }\n    }, [instruments, isAddingNewCard]);\n\n    useEffect(() => {\n        const defaultInstrumentId = getDefaultInstrumentId() || undefined;\n\n        setSelectedInstrumentId(defaultInstrumentId);\n    }, [getDefaultInstrumentId, instruments]);\n\n    const { setFieldValue } = usePaymentFormContext().paymentForm;\n\n    const handleSelectInstrument: (id: string) => void = (id) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    };\n\n    const handleDeleteInstrument: (id: string) => void = (id) => {\n        if (instruments.length === 0) {\n            setIsAddingNewCard(true);\n            setSelectedInstrumentId(undefined);\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            setSelectedInstrumentId(getDefaultInstrumentId());\n\n            setFieldValue('instrumentId', getDefaultInstrumentId());\n        }\n    };\n\n    const handleUseNewCard: () => void = () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        void deinitializePayment();\n\n        void initializePayment();\n    };\n\n    const renderPlaceholderFields = () => {\n        return (\n            <div data-test=\"squarev2_placeholder_form\" style={{ display: 'none' }}>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-label optimizedCheckout-form-label\"\n                        id=\"messageIsDefault\"\n                    />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsDefault\" />\n                </div>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-input optimizedCheckout-form-input form-input--focus optimizedCheckout-form-input--focus\"\n                        id=\"inputIsFocus\"\n                    />\n                </div>\n                <div className=\"form-field form-field--error\">\n                    <div className=\"form-inlineMessage\" id=\"messageIsError\" />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsError\" />\n                </div>\n            </div>\n        );\n    };\n\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    return (\n        <LoadingOverlay\n            data-test=\"squarev2_loading_overlay\"\n            hideContentWhenLoading\n            isLoading={isLoadingInstruments()}\n        >\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                        instruments={instruments as CardInstrument[]}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={selectedInstrumentId || getDefaultInstrumentId()}\n                    />\n                )}\n                <div\n                    className={classNames('widget', `widget--${method.id}`, 'payment-widget')}\n                    data-test={containerId}\n                    style={{\n                        display: !shouldShowCreditCardFieldset ? 'none' : undefined,\n                    }}\n                    tabIndex={-1}\n                >\n                    {renderPlaceholderFields()}\n                    <div id={containerId} />\n                </div>\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={selectedInstrumentId}\n                        instruments={instruments}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default SquareV2Form;\n","import { createSquareV2PaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/squarev2';\nimport { difference } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport SquareV2Form from './SquareV2Form';\n\nconst SquareV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n}) => {\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const container = document.querySelector<HTMLDivElement>(`#${id}`);\n\n        if (!container) {\n            throw new Error(\n                `Unable to retrieve input styles as the provided container ID \"${id}\" is not valid.`,\n            );\n        }\n\n        return getAppliedStyles(container, properties);\n    };\n\n    const copyStylesFromDummyFormFields = useCallback(() => {\n        const styleProps = [\n            'backgroundColor',\n            'borderColor',\n            'borderRadius',\n            'borderWidth',\n            'color',\n            'fontSize',\n            'fontWeight',\n        ];\n\n        return {\n            default: {\n                message: getStylesFromElement('messageIsDefault', ['color']),\n                input: getStylesFromElement('inputIsDefault', styleProps),\n            },\n            focus: {\n                input: getStylesFromElement(\n                    'inputIsFocus',\n                    difference(styleProps, ['borderRadius']),\n                ),\n            },\n            error: {\n                message: getStylesFromElement('messageIsError', ['color']),\n                input: getStylesFromElement('inputIsError', [\n                    'borderColor',\n                    'borderWidth',\n                    'color',\n                ]),\n            },\n        };\n    }, []);\n\n    const mapToSquareStyles = useCallback(\n        (styles: ReturnType<typeof copyStylesFromDummyFormFields>) => {\n            const { borderColor, borderRadius, borderWidth, ...input } = styles.default.input;\n            const {\n                borderColor: borderColorIsFocus,\n                borderWidth: borderWidthIsFocus,\n                ...inputIsFocus\n            } = styles.focus.input;\n            const {\n                borderColor: borderColorIsError,\n                borderWidth: borderWidthIsError,\n                color: colorIsError,\n            } = styles.error.input;\n\n            return {\n                input,\n                'input.is-focus': {\n                    ...inputIsFocus,\n                },\n                'input.is-error': {\n                    color: colorIsError,\n                },\n                '.input-container': {\n                    borderColor,\n                    borderRadius,\n                    borderWidth,\n                },\n                '.input-container.is-focus': {\n                    borderColor: borderColorIsFocus,\n                    borderWidth: borderWidthIsFocus,\n                },\n                '.input-container.is-error': {\n                    borderColor: borderColorIsError,\n                    borderWidth: borderWidthIsError,\n                },\n                '.message-text': {\n                    color: styles.default.message.color,\n                },\n                '.message-icon': {\n                    color: styles.default.message.color,\n                },\n                '.message-text.is-error': {\n                    color: styles.error.message.color,\n                },\n                '.message-icon.is-error': {\n                    color: styles.error.message.color,\n                },\n            };\n        },\n        [],\n    );\n\n    const containerId = 'squarev2_payment_element_container';\n\n    const initializePayment = useCallback(async () => {\n        let style;\n\n        try {\n            style = mapToSquareStyles(copyStylesFromDummyFormFields());\n        } catch {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        await checkoutService.initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n            integrations: [createSquareV2PaymentStrategy],\n            squarev2: {\n                containerId,\n                style,\n            },\n        });\n    }, [\n        checkoutService,\n        copyStylesFromDummyFormFields,\n        mapToSquareStyles,\n        method.gateway,\n        method.id,\n    ]);\n\n    const deinitializePayment = useCallback(async () => {\n        await checkoutService.deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [checkoutService, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, [deinitializePayment, initializePayment]);\n\n    return (\n        <SquareV2Form\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            containerId={containerId}\n            deinitializePayment={deinitializePayment}\n            initializePayment={initializePayment}\n            method={method}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    SquareV2PaymentMethod,\n    [{ id: 'squarev2' }],\n);\n"],"names":["mapFromInstrumentCardType","type","InstrumentMenuItem","className","instrument","testId","shouldHideExpiryDate","onClick","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","TranslatedString","data","cardTitle","niceType","endingIn","last4","id","expiryDate","InstrumentOption","noop","handleClick","useCallback","bigpayToken","InstrumentUseNewButton","InstrumentMenu","instruments","selectedInstrumentId","onSelectInstrument","onUseNewInstrument","map","key","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","useRef","updateFieldValue","instrumentId","setFieldValue","name","useEffect","setTimeout","value","undefined","current","selectedInstrument","find","DropdownTrigger","dropdown","memo","onDeleteInstrument","validateInstrument","renderInput","renderModal","props","ManageInstrumentsModal","Fieldset","additionalClassName","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","render","style","display","NotInitializedErrorType","SquareIntent","StandardError","Error","constructor","message","prototype","super","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","PaymentExecuteError","subtype","guard","errorFactory","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","CHARGE","STORE","SquareV2PaymentProcessor","_scriptLoader","_paymentIntegrationService","initialize","testMode","applicationId","locationId","square","load","_payments","payments","deinitialize","_formValidationSubscription","unsubscribe","_card","destroy","initializeCard","containerId","onValidationChange","postalCode","getState","getBillingAddress","_getPayments","card","attach","configure","_error","_subscribeToFormValidation","tokenize","result","_getCard","status","token","errorMessage","errors","JSON","stringify","verifyBuyer","intent","_chargeVerifyBuyer","_storeVerifyBuyer","observer","blacklist","invalidFields","Set","eventObservables","eventType","fromEvent","merge","pipe","event","detail","currentState","isCompletelyValid","includes","size","distinctUntilChanged","subscribe","_mapToSquareBillingContact","firstName","givenName","lastName","familyName","address1","address2","city","stateOrProvinceCode","state","countryCode","email","phone","addressLines","getCheckoutOrThrow","getBillingAddressOrThrow","outstandingBalance","cart","details","amount","toString","billingContact","currencyCode","currency","code","response","InvalidArgumentError","DEFAULT_RESPONSE","body","headers","RequestError","PaymentMethodInvalidError","PaymentArgumentInvalidError","join","OrderFinalizationNotRequiredError","SquareV2WebPaymentsSdkEnv","SquareV2PaymentStrategy","_squareV2PaymentProcessor","options","squarev2","methodId","config","initializationData","getPaymentMethodOrThrow","execute","payment","paymentData","shouldSaveInstrument","shouldSetAsDefaultInstrument","submitOrder","submitPaymentPayload","Boolean","_getVaultedInstrumentPayload","_getCardPayload","submitPayment","formattedPayload","vault_payment_instrument","set_as_default_stored_instrument","finalize","Promise","reject","shouldVerify","features","getStoreConfigOrThrow","checkoutSettings","cardTokenizationResult","isSquareV2ApiV2Enabled","credit_card_token","tokenData","nonce","tokenForSavingCard","store_card_nonce","store_card_token","verificationToken","_getSquareCardIdOrThrow","bigpay_token","three_d_secure","loadPaymentMethod","params","method","cardId","PaymentMethodClientUnavailableError","LIVE","SANDBOX","SquareV2ScriptLoader","loadScript","window","Square","module","paymentIntegrationService","getScriptLoader","resolveIds","assign","checkoutService","checkoutState","deinitializePayment","initializePayment","isAddingNewCard","setIsAddingNewCard","useState","setSelectedInstrumentId","getCustomer","getInstruments","isInstrumentFeatureAvailable","isGuest","isVaultingEnabled","loadInstruments","useMemo","shouldShowInstrumentFieldset","length","shouldShowCreditCardFieldset","getDefaultInstrumentId","defaultInstrument","defaultInstrumentId","paymentForm","isLoadingInstruments","statuses","LoadingOverlay","hideContentWhenLoading","isLoading","CardInstrumentFieldset","tabIndex","StoreInstrumentFieldset","toResolvableComponent","getStylesFromElement","properties","container","document","querySelector","getAppliedStyles","copyStylesFromDummyFormFields","styleProps","default","input","focus","difference","error","mapToSquareStyles","styles","borderColor","borderRadius","borderWidth","borderColorIsFocus","borderWidthIsFocus","inputIsFocus","borderColorIsError","borderWidthIsError","color","colorIsError","gatewayId","gateway","integrations"],"sourceRoot":""}