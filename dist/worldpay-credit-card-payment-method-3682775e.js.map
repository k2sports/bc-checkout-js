{"version":3,"file":"worldpay-credit-card-payment-method-3682775e.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNameField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardFieldset/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedCreditCardValidationSchema/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/worldpay-access-integration/src/WorldpayCreditCardPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx"],"sourcesContent":["import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNameField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div\n            className={classNames('form-ccFields', {\n                'form-ccFields--without-card-name': !cardNameId,\n                'form-ccFields--without-card-code': !cardCodeId,\n            })}\n        >\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {Boolean(cardNameId) && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {Boolean(cardCodeId) && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object()\n            .required()\n            .shape<HostedCreditCardValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedCreditCardValidationSchemaShape['hostedForm']['errors']>({\n                        cardCode: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardExpiry: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_expiry',\n                            }),\n\n                        cardName: string().test({\n                            message: language.translate('payment.credit_card_name_required_error'),\n                            test: (value) => value !== 'required',\n                        }),\n\n                        cardNumber: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            }),\n                    }),\n            }),\n    });\n});\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type LanguageService,\n    type LegacyHostedFormOptions,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import {\n    type CardInstrument,\n    type LegacyHostedFormOptions,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, {\n    createRef,\n    type FunctionComponent,\n    type RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { CreditCardPaymentMethodComponent } from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\ninterface WorldpayPaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst WorldpayCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const [threeDSecureVerification, setThreeDSecureVerification] = useState<HTMLElement>();\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const { getHostedStoredCardValidationFieldset } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const ref = useRef<WorldpayPaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const cancelWorldpayModalFlow = useCallback(() => {\n        setThreeDSecureVerification(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n    const initializeWorldpayPayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: any) => {\n            return checkoutService.initializePayment({\n                ...options,\n                creditCard: {\n                    form: getHostedFormOptions && (await getHostedFormOptions(selectedInstrument)),\n                },\n                worldpay: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setThreeDSecureVerification(content);\n                        ref.current.cancelThreeDSecureVerification = cancel;\n                    },\n                },\n            });\n        },\n        [checkoutService, getHostedFormOptions],\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (threeDSecureVerification) {\n            ref.current.paymentPageContentRef.current?.appendChild(threeDSecureVerification);\n        }\n    }, [threeDSecureVerification]);\n\n    return (\n        <>\n            <CreditCardPaymentMethodComponent\n                {...rest}\n                cardFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                cardValidationSchema={hostedValidationSchema}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeWorldpayPayment}\n                language={language}\n                method={method}\n                paymentForm={paymentForm}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n            <Modal\n                isOpen={!!threeDSecureVerification}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelWorldpayModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div ref={ref.current.paymentPageContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    WorldpayCreditCardPaymentMethod,\n    [{ id: 'worldpayaccess' }],\n);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n"],"names":["appearFocused","id","name","renderInput","useCallback","additionalClassName","input","labelContent","TextInputIframeContainer","FormField","TranslatedString","additionalFields","cardCodeId","cardExpiryId","cardNameId","cardNumberId","focusedFieldType","Fieldset","legend","Legend","hidden","className","HostedCreditCardNumberField","HostedCreditCardExpiryField","Boolean","HostedCreditCardCodeField","language","shape","hostedForm","required","errors","cardCode","test","message","translate","value","cardExpiry","cardName","cardNumber","useHostedCreditCard","checkoutState","method","paymentForm","setFieldTouched","setFieldValue","setSubmitted","submitForm","config","requireCardCode","isCardCodeRequired","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","getHostedFieldId","compact","gateway","join","setFocusedFieldType","useState","getHostedStoredCardValidationFieldset","selectedInstrument","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","undefined","getHostedFormOptions","styleProps","styleContainerId","fields","cardCodeVerification","accessibilityLabel","containerId","instrumentId","bigpayToken","cardNumberVerification","placeholder","styles","default","error","Error","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","forIn","fieldErrors","errorKey","type","useMemo","placement","tooltip","toResolvableComponent","checkoutService","rest","threeDSecureVerification","setThreeDSecureVerification","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","hostedStoredCardValidationSchema","getHostedInstrumentValidationSchema","ref","useRef","paymentPageContentRef","createRef","getCreditCardInputStyles","cancelWorldpayModalFlow","current","cancelThreeDSecureVerification","initializeWorldpayPayment","options","initializePayment","creditCard","form","worldpay","onLoad","content","cancel","hostedValidationSchema","getHostedCreditCardValidationSchema","appendPaymentPageContent","appendChild","CreditCardPaymentMethodComponent","cardFieldset","HostedCreditCardFieldset","requireCustomerCode","CreditCardCustomerCodeField","cardValidationSchema","deinitializePayment","getStoredCardValidationFieldset","storedCardValidationSchema","Modal","isOpen","onAfterOpen","onRequestClose","shouldShowCloseButton","isCardExpiryRequired","cardExpiryVerification","CreditCardInputStylesType","properties","Default","container","document","createElement","parentContainer","getElementById","Promise","resolve","Provider","isSubmitted","noop","hasError","element","parentElement","removeChild","testId","props"],"sourceRoot":""}