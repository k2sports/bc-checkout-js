{"version":3,"file":"4527-95ae34f9.js","mappings":"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","sources":["webpack://checkout/./packages/instrument-utils/src/creditCard/formatCreditCardNumber/formatCreditCardNumber.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/unformatCreditCardNumber/unformatCreditCardNumber.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardNumberField/CreditCardNumberField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCodeField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardValidation/CreditCardValidation.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardExpiryField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/formatCreditCardExpiryDate/formatCreditCardExpiryDate.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardNameField.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardFieldset/CreditCardFieldset.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/getInstrumentValidationSchema/getInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardValidationSchema/getCreditCardValidationSchema.ts","webpack://checkout/./packages/locale/src/createLocaleContext.ts","webpack://checkout/./packages/credit-card-integration/src/CreditCardPaymentMethodComponent.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/configureCardValidator.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/CreditCardCustomerCodeField.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts"],"sourcesContent":["import { number } from 'card-validator';\n\nimport unformatCreditCardNumber from '../unformatCreditCardNumber/unformatCreditCardNumber';\n\nexport default function formatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    const unformattedValue = unformatCreditCardNumber(value, separator);\n\n    return card.gaps\n        .filter((gapIndex) => unformattedValue.length > gapIndex)\n        .reduce(\n            (output, gapIndex, index) =>\n                [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(separator),\n            unformattedValue,\n        );\n}\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","import creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { max } from 'lodash';\nimport React, {\n    type ChangeEventHandler,\n    createRef,\n    type FunctionComponent,\n    memo,\n    PureComponent,\n    type ReactNode,\n    type RefObject,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInput } from '@bigcommerce/checkout/ui';\n\nimport formatCreditCardNumber from '../formatCreditCardNumber/formatCreditCardNumber';\n\nexport interface CreditCardNumberFieldProps {\n    name: string;\n}\n\nclass CreditCardNumberInput extends PureComponent<FieldProps<string>> {\n    private inputRef: RefObject<HTMLInputElement> = createRef();\n    private nextSelectionEnd = 0;\n\n    componentDidUpdate(): void {\n        if (this.inputRef.current && this.inputRef.current.selectionEnd !== this.nextSelectionEnd) {\n            this.inputRef.current.setSelectionRange(this.nextSelectionEnd, this.nextSelectionEnd);\n        }\n    }\n\n    render(): ReactNode {\n        const { field } = this.props;\n\n        return (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-number\"\n                    id={field.name}\n                    onChange={this.handleChange}\n                    ref={this.inputRef}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        );\n    }\n\n    private handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n        const separator = ' ';\n        const { value = '' } = event.target;\n        const { field, form } = this.props;\n        const { name, value: previousValue = '' } = field;\n        const selectionEnd = this.inputRef.current && this.inputRef.current.selectionEnd;\n\n        // Only allow digits and spaces\n        if (new RegExp(`[^\\\\d${separator}]`).test(value)) {\n            return form.setFieldValue(name, previousValue);\n        }\n\n        const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n\n        const formattedValue = formatCreditCardNumber(\n            value.replace(new RegExp(separator, 'g'), '').slice(0, maxLength),\n            separator,\n        );\n\n        if (selectionEnd === value.length && value.length < formattedValue.length) {\n            this.nextSelectionEnd = formattedValue.length;\n        } else {\n            this.nextSelectionEnd = selectionEnd || 0;\n        }\n\n        return form.setFieldValue(name, formattedValue);\n    };\n}\n\nconst CreditCardNumberField: FunctionComponent<CreditCardNumberFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field, form, meta }: FieldProps<string>) => (\n            <CreditCardNumberInput field={field} form={form} meta={meta} />\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_number_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNumberField);\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconHelp, IconLock, TextInput, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport CreditCardCodeTooltip from './CreditCardCodeTooltip';\n\nexport interface CreditCardCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCodeField: FunctionComponent<CreditCardCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-csc\"\n                    id={field.name}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardCodeField);\n","import React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CreditCardCodeField, CreditCardNumberField } from '../index';\n\ninterface CreditCardValidationProps {\n    shouldShowCardCodeField: boolean;\n    shouldShowNumberField: boolean;\n}\n\nconst CreditCardValidation: React.FunctionComponent<CreditCardValidationProps> = ({\n    shouldShowNumberField,\n    shouldShowCardCodeField,\n}) => (\n    <>\n        {shouldShowNumberField && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {shouldShowNumberField && <CreditCardNumberField name=\"ccNumber\" />}\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n        </div>\n    </>\n);\n\nexport default CreditCardValidation;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { type FieldProps } from 'formik';\nimport React, { type ChangeEvent, type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nimport { formatCreditCardExpiryDate } from '.';\n\ninterface CreditCardExpiryFieldProps {\n    name: string;\n}\n\nconst CreditCardExpiryField: FunctionComponent<CreditCardExpiryFieldProps> = ({ name }) => {\n    const { language } = useLocale();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const handleChange = useCallback(\n        memoizeOne((field: FieldProps['field'], form: FieldProps['form']) => {\n            return (event: ChangeEvent<any>) => {\n                void form.setFieldValue(field.name, formatCreditCardExpiryDate(event.target.value));\n            };\n        }),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps) => (\n            <TextInput\n                {...field}\n                autoComplete=\"cc-exp\"\n                id={field.name}\n                onChange={handleChange(field, form)}\n                placeholder={language.translate('payment.credit_card_expiration_placeholder_text')}\n                type=\"tel\"\n            />\n        ),\n        [handleChange, language],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_expiration_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardExpiryField);\n","export default function formatCreditCardExpiryDate(value: string): string {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n    const trimmedMonth = month.slice(0, 2);\n    const trimmedYear =\n        year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n    // i.e.: '1'\n    if (value.length < 2) {\n        return month;\n    }\n\n    // ie.: '10 /' (without trailing space)\n    if (value.length > 3 && !trimmedYear) {\n        return trimmedMonth;\n    }\n\n    return `${trimmedMonth} / ${trimmedYear}`;\n}\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardNameFieldProps {\n    name: string;\n}\n\nconst CreditCardNameField: FunctionComponent<CreditCardNameFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"cc-name\" id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_name_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNameField);\n","import React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    CreditCardCodeField,\n    CreditCardCustomerCodeField,\n    CreditCardExpiryField,\n    CreditCardNameField,\n    CreditCardNumberField,\n} from '../';\n\nexport interface CreditCardFieldsetProps {\n    shouldShowCardCodeField?: boolean;\n    shouldShowCustomerCodeField?: boolean;\n    shouldShowSaveCardField?: boolean;\n}\n\nconst CreditCardFieldset: FunctionComponent<CreditCardFieldsetProps> = ({\n    shouldShowCardCodeField,\n    shouldShowCustomerCodeField,\n}) => (\n    <Fieldset\n        additionalClassName=\"creditCardFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <CreditCardNumberField name=\"ccNumber\" />\n\n            <CreditCardExpiryField name=\"ccExpiry\" />\n\n            <CreditCardNameField name=\"ccName\" />\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n\n            {shouldShowCustomerCodeField && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />}\n        </div>\n    </Fieldset>\n);\n\nexport default memo(CreditCardFieldset);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, number } from 'card-validator';\nimport creditCardType from 'credit-card-type';\nimport { object, type ObjectSchema, string, type StringSchema } from 'yup';\n\nimport { type CardInstrumentFieldsetValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { mapFromInstrumentCardType } from '../';\n\nexport interface InstrumentValidationSchemaOptions {\n    instrumentBrand: string;\n    instrumentLast4: string;\n    isCardCodeRequired: boolean;\n    isCardNumberRequired: boolean;\n    language: LanguageService;\n}\n\ninterface InstrumentValidationSchema {\n    ccCvv?: StringSchema;\n    ccNumber?: StringSchema;\n    instrumentId: StringSchema;\n}\n\nexport default memoize(function getInstrumentValidationSchema({\n    instrumentBrand,\n    instrumentLast4,\n    isCardCodeRequired,\n    isCardNumberRequired,\n    language,\n}: InstrumentValidationSchemaOptions): ObjectSchema<CardInstrumentFieldsetValues> {\n    const schema: InstrumentValidationSchema = {\n        instrumentId: string().required(),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value = '') {\n                    const cardType = mapFromInstrumentCardType(instrumentBrand);\n                    const cardInfo = creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined)\n                        .isValid;\n                },\n            });\n    }\n\n    if (isCardNumberRequired) {\n        schema.ccNumber = string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: language.translate('payment.credit_card_number_mismatch_error'),\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                test: (value = '') => value.slice(-instrumentLast4.length) === instrumentLast4,\n            });\n    }\n\n    return object(schema);\n});\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, expirationDate, number } from 'card-validator';\nimport { object, type ObjectSchema, string } from 'yup';\n\nimport { type CreditCardFieldsetValues } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface CreditCardValidationSchemaOptions {\n    isCardCodeRequired: boolean;\n    language: LanguageService;\n}\n\nexport default memoize(function getCreditCardValidationSchema({\n    isCardCodeRequired,\n    language,\n}: CreditCardValidationSchemaOptions): ObjectSchema<CreditCardFieldsetValues> {\n    const schema = {\n        ccCustomerCode: string(),\n        ccCvv: string(),\n        ccExpiry: string()\n            .required(language.translate('payment.credit_card_expiration_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_expiration_invalid_error'),\n\n                test: (value) => expirationDate(value).isValid,\n            }),\n        ccName: string()\n            .max(200)\n            .required(language.translate('payment.credit_card_name_required_error')),\n        ccNumber: string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n\n                test: (value) => number(value).isValid,\n            }),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value) {\n                    const { card } = number(this.parent.ccNumber);\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    return object(schema);\n});\n","import { createCurrencyService, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nimport getLanguageService from './getLanguageService';\nimport { type LocaleContextType } from './LocaleContext';\n\nexport default function createLocaleContext(config: StoreConfig): Required<LocaleContextType> {\n    if (!config) {\n        throw new Error('Missing configuration data');\n    }\n\n    const { inputDateFormat } = config;\n\n    return {\n        currency: createCurrencyService(config),\n        date: {\n            inputFormat: inputDateFormat,\n        },\n        language: getLanguageService(),\n    };\n}\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type HostedFieldType,\n    type Instrument,\n    type LegacyHostedFormOptions,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport {\n    CardInstrumentFieldset,\n    configureCardValidator,\n    CreditCardFieldset,\n    type CreditCardFieldsetValues,\n    CreditCardValidation,\n    getCreditCardValidationSchema,\n    getInstrumentValidationSchema,\n    isCardInstrument,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { createLocaleContext, LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    type CardInstrumentFieldsetValues,\n    type PaymentMethodProps,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardPaymentMethodProps {\n    cardFieldset?: ReactNode;\n    cardValidationSchema?: ObjectSchema;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    getHostedFormOptions?(selectedInstrument?: CardInstrument): Promise<LegacyHostedFormOptions>;\n    getStoredCardValidationFieldset?(selectedInstrument?: CardInstrument): ReactNode;\n}\n\ninterface CreditCardPaymentMethodDerivedProps {\n    instruments: CardInstrument[];\n    isCardCodeRequired: boolean;\n    isCustomerCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    shouldShowInstrumentFieldset: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\ninterface CreditCardPaymentMethodState {\n    focusedHostedFieldType?: HostedFieldType;\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport type CreditCardPaymentMethodValues = CreditCardFieldsetValues | CardInstrumentFieldsetValues;\n\nclass CreditCardPaymentMethodComponent extends Component<\n    CreditCardPaymentMethodProps & PaymentMethodProps\n> {\n    state: CreditCardPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    private filterInstruments = memoizeOne(\n        (instruments: PaymentInstrument[] = []): CardInstrument[] =>\n            instruments.filter(isCardInstrument),\n    );\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n        const { isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp, loadInstruments } =\n            this.getCreditCardPaymentMethodDerivedProps();\n\n        setValidationSchema(method, this.getValidationSchema());\n        configureCardValidator();\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await initializePayment(\n                {\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                },\n                this.getSelectedInstrument(),\n            );\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n\n        setValidationSchema(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentDidUpdate(\n        _prevProps: Readonly<CreditCardPaymentMethodProps>,\n        prevState: Readonly<CreditCardPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            initializePayment,\n            method,\n            onUnhandledError,\n            paymentForm: { setValidationSchema },\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            isAddingNewCard !== prevState.isAddingNewCard\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                await initializePayment(\n                    {\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    },\n                    this.getSelectedInstrument(),\n                );\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            checkoutState,\n            cardFieldset,\n            getStoredCardValidationFieldset,\n            isInitializing,\n            method,\n        } = this.props;\n        const {\n            instruments,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldShowInstrumentFieldset,\n        } = this.getCreditCardPaymentMethodDerivedProps();\n        const {\n            data: { getConfig },\n        } = checkoutState;\n\n        const { isAddingNewCard } = this.state;\n\n        const selectedInstrument = this.getSelectedInstrument();\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowNumberField = selectedInstrument\n            ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n            : false;\n        const shouldShowCardCodeField = selectedInstrument\n            ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n            : false;\n\n        const storeConfig = getConfig();\n\n        if (!storeConfig) {\n            throw Error('Unable to get config or customer');\n        }\n\n        return (\n            <LocaleContext.Provider value={createLocaleContext(storeConfig)}>\n                <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                    <div\n                        className=\"paymentMethod paymentMethod--creditCard\"\n                        data-test=\"credit-cart-payment-method\"\n                    >\n                        {shouldShowInstrumentFieldset && (\n                            <CardInstrumentFieldset\n                                instruments={instruments}\n                                onDeleteInstrument={this.handleDeleteInstrument}\n                                onSelectInstrument={this.handleSelectInstrument}\n                                onUseNewInstrument={this.handleUseNewCard}\n                                selectedInstrumentId={\n                                    selectedInstrument && selectedInstrument.bigpayToken\n                                }\n                                validateInstrument={\n                                    getStoredCardValidationFieldset ? (\n                                        getStoredCardValidationFieldset(selectedInstrument)\n                                    ) : (\n                                        <CreditCardValidation\n                                            shouldShowCardCodeField={shouldShowCardCodeField}\n                                            shouldShowNumberField={shouldShowNumberField}\n                                        />\n                                    )\n                                }\n                            />\n                        )}\n\n                        {shouldShowCreditCardFieldset && !cardFieldset && (\n                            <CreditCardFieldset\n                                shouldShowCardCodeField={\n                                    method.config.cardCode || method.config.cardCode === null\n                                }\n                                shouldShowCustomerCodeField={method.config.requireCustomerCode}\n                            />\n                        )}\n\n                        {shouldShowCreditCardFieldset && cardFieldset}\n\n                        {isInstrumentFeatureAvailableProp && (\n                            <StoreInstrumentFieldset\n                                instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                                instruments={instruments}\n                            />\n                        )}\n                    </div>\n                </LoadingOverlay>\n            </LocaleContext.Provider>\n        );\n    }\n\n    private getSelectedInstrument(): CardInstrument | undefined {\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const { cardValidationSchema, language, method, storedCardValidationSchema } = this.props;\n        const {\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n        } = this.getCreditCardPaymentMethodDerivedProps();\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return (\n                storedCardValidationSchema ||\n                getInstrumentValidationSchema({\n                    instrumentBrand: selectedInstrument.brand,\n                    instrumentLast4: selectedInstrument.last4,\n                    isCardCodeRequired: isInstrumentCardCodeRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    isCardNumberRequired: isInstrumentCardNumberRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    language,\n                })\n            );\n        }\n\n        return (\n            cardValidationSchema ||\n            getCreditCardValidationSchema({\n                isCardCodeRequired: method.config.cardCode === true,\n                language,\n            })\n        );\n    }\n\n    private handleUseNewCard: () => void = () => {\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const {\n            paymentForm: { setFieldValue },\n        } = this.props;\n        const { instruments } = this.getCreditCardPaymentMethodDerivedProps();\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getCreditCardPaymentMethodDerivedProps(): CreditCardPaymentMethodDerivedProps {\n        const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = this.props;\n\n        const {\n            data: { getConfig, getCustomer, getInstruments, isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer || !method) {\n            throw new Error('Unable to get checkout');\n        }\n\n        const instruments = this.filterInstruments(getInstruments(method));\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            isUsingMultiShipping,\n            paymentMethod: method,\n        });\n\n        return {\n            instruments,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isCustomerCodeRequired: !!method.config.requireCustomerCode,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n            shouldShowInstrumentFieldset:\n                isInstrumentFeatureAvailableProp && instruments.length > 0,\n        };\n    }\n}\n\nexport default CreditCardPaymentMethodComponent;\n","import { creditCardType } from 'card-validator';\n\nexport default function configureCardValidator(): void {\n    const discoverInfo = creditCardType.getTypeInfo('discover');\n    const visaInfo = creditCardType.getTypeInfo('visa');\n\n    // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n    creditCardType.updateCard('visa', {\n        lengths: [13, ...(visaInfo.lengths || [])],\n    });\n\n    // Add support for 8-BIN Discover Cards.\n    creditCardType.updateCard('discover', {\n        patterns: [...(discoverInfo.patterns || []), [810, 817]],\n    });\n\n    // Add support for Mada-BIN Cards.\n    creditCardType.addCard({\n        niceType: 'Mada',\n        type: 'mada',\n        patterns: [\n            400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817, 422818,\n            422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954, 440533, 440647,\n            440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865, 458456, 462220, 468540,\n            468541, 468542, 468543, 483010, 483011, 483012, 484783, 486094, 486095, 486096, 489317,\n            489318, 489319, 493428, 504300, 506968, 508160, 513213, 520058, 521076, 524130, 524514,\n            529415, 529741, 530060, 530906, 531095, 531196, 532013, 535825, 535989, 536023, 537767,\n            539931, 543085, 543357, 549760, 554180, 557606, 558848, 585265, 588845, 588846, 588847,\n            588848, 588849, 588850, 588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120,\n            968201, 968202, 968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n        ],\n        gaps: [4, 8, 12],\n        lengths: [16, 18, 19],\n        code: {\n            name: 'CVV',\n            size: 3,\n        },\n    });\n}\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInput } from '@bigcommerce/checkout/ui';\n\nexport interface CreditCardCustomerCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCustomerCodeField: FunctionComponent<CreditCardCustomerCodeFieldProps> = ({\n    name,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_customer_code_label\" />{' '}\n                <small className=\"optimizedCheckout-contentSecondary\">\n                    <TranslatedString id=\"common.optional_text\" />\n                </small>\n            </>\n        ),\n        [],\n    );\n\n    return <FormField input={renderInput} labelContent={labelContent} name={name} />;\n};\n\nexport default memo(CreditCardCustomerCodeField);\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n"],"names":["formatCreditCardNumber","value","separator","card","number","unformattedValue","replace","RegExp","unformatCreditCardNumber","gaps","filter","gapIndex","length","reduce","output","index","slice","join","CreditCardNumberInput","PureComponent","inputRef","createRef","nextSelectionEnd","handleChange","event","target","field","form","this","props","name","previousValue","selectionEnd","current","test","setFieldValue","maxLength","max","map","info","lengths","formattedValue","componentDidUpdate","setSelectionRange","render","TextInput","additionalClassName","autoComplete","id","onChange","ref","type","IconLock","memo","renderInput","useCallback","meta","labelContent","useMemo","TranslatedString","FormField","input","TooltipTrigger","placement","tooltip","CreditCardCodeTooltip","className","IconHelp","shouldShowNumberField","shouldShowCardCodeField","language","month","year","split","trimmedMonth","trimmedYear","formatCreditCardExpiryDate","placeholder","translate","shouldShowCustomerCodeField","Fieldset","legend","Legend","hidden","CreditCardCustomerCodeField","instrumentBrand","instrumentLast4","isCardCodeRequired","isCardNumberRequired","schema","instrumentId","required","ccCvv","message","cardType","mapFromInstrumentCardType","cardInfo","cvv","code","size","undefined","isValid","ccNumber","ccCustomerCode","ccExpiry","expirationDate","ccName","parent","createLocaleContext","config","Error","inputDateFormat","currency","date","inputFormat","getLanguageService","CreditCardPaymentMethodComponent","Component","state","isAddingNewCard","filterInstruments","instruments","isCardInstrument","handleUseNewCard","setState","selectedInstrumentId","handleSelectInstrument","handleDeleteInstrument","paymentForm","getCreditCardPaymentMethodDerivedProps","getDefaultInstrumentId","componentDidMount","initializePayment","method","onUnhandledError","setValidationSchema","isInstrumentFeatureAvailable","isInstrumentFeatureAvailableProp","loadInstruments","getValidationSchema","discoverInfo","creditCardType","getTypeInfo","visaInfo","updateCard","patterns","addCard","niceType","configureCardValidator","gatewayId","gateway","methodId","getSelectedInstrument","error","componentWillUnmount","deinitializePayment","_prevProps","prevState","checkoutState","cardFieldset","getStoredCardValidationFieldset","isInitializing","isInstrumentCardCodeRequired","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequired","isInstrumentCardNumberRequiredProp","isLoadingInstruments","shouldShowInstrumentFieldset","data","getConfig","selectedInstrument","shouldShowCreditCardFieldset","isLoading","storeConfig","LocaleContext","Provider","LoadingOverlay","hideContentWhenLoading","CardInstrumentFieldset","onDeleteInstrument","onSelectInstrument","onUseNewInstrument","bigpayToken","validateInstrument","cardCode","requireCustomerCode","StoreInstrumentFieldset","find","defaultInstrument","instrument","cardValidationSchema","storedCardValidationSchema","isPaymentDataRequired","getInstrumentValidationSchema","brand","last4","getCreditCardValidationSchema","checkoutService","isUsingMultiShipping","getCustomer","getInstruments","statuses","customer","paymentMethod","isCustomerCodeRequired","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","checkoutSettings","isCardVaultingEnabled","isVaultingEnabled","isGuest"],"sourceRoot":""}