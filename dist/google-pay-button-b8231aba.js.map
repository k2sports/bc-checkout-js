{"version":3,"file":"google-pay-button-b8231aba.js","mappings":"qIAIe,SAASA,EAEpBC,EACAC,GAEA,OAAOC,OAAOC,QAAQC,GAAkB,gBAACJ,EAAS,iBAAKI,KAAW,CAAEH,cACxE,C,mCCVe,MAAMI,UAAoBC,MAOrC,WAAAC,EAAY,KACRC,EAAO,CAAC,EAAC,QACTC,EAAU,GAAE,MACZC,EAAQ,GAAE,KACVC,EAAO,KAOPC,QAEuC,mBAA5BN,MAAMO,kBACbP,MAAMO,kBAAkBC,KAAMT,GAE9BS,KAAKC,OAAQ,IAAIT,OAAQS,MAI7BD,KAAKN,KAAOA,EACZM,KAAKL,QAAUA,EACfK,KAAKH,KAAOA,EACZG,KAAKJ,MAAQA,EACbI,KAAKE,KAAO,QAChB,E,kIC5BW,MAAMC,UAAyCZ,EAAA,EAC1D,WAAAE,CAAYE,GCLD,IAA0CS,EAAWC,EDM5DP,MAAM,CACFD,KAAM,sCACNF,YCR6CS,EDWlCJ,KCX6CK,EDWvCF,EAAiCE,UCTtDjB,OAAOkB,eACPlB,OAAOkB,eAAeF,EAAQC,GAUtC,SAAkBD,GACd,MAAO,cAAeA,CAC1B,CAXeG,CAASH,KAEhBA,EAAOI,UAAYH,EDMvB,E,eEiBJ,MAyCA,GAAe,EAAApB,EAAA,IAzCkDK,IAC7D,MAAM,SAAEmB,EAAQ,iBAAEC,GAAqBpB,EAEvC,GChCW,SAAoBqB,EAAmBC,SAASC,SAASF,UAGpE,MAAoB,sBAFH,IAAIA,EAASG,MAAM,KAAK,IAG7C,CD4BQC,GASA,OARAL,EACI,IAAIP,EACAM,EAASO,UAAU,sCAAuC,CACtDC,QAAS,gBAKd,KAGX,MAAMC,EAAe,CACjB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGJ,OACI,gBAACC,EAAA,EAAc,eACXC,6BAA6B,wBAC7BF,aAAcA,GACV5B,MAOZ,CACI,CAAE+B,GAAI,oBACN,CAAEA,GAAI,oBACN,CAAEA,GAAI,yBACN,CAAEA,GAAI,gBACN,CAAEA,GAAI,sBACN,CAAEA,GAAI,2BACN,CAAEA,GAAI,wBACN,CAAEA,GAAI,0BACN,CAAEA,GAAI,oBACN,CAAEA,GAAI,mBACN,CAAEA,GAAI,sBACN,CAAEA,GAAI,2BACN,CAAEA,GAAI,yBACN,CAAEA,GAAI,wB,qCE7Dd,MA0JA,GAAe,EAAApC,EAAA,IA1JwD,I,IAAA,gBACnEqC,EAAe,OACfC,EAAM,iBACNb,GAAgB,EACbc,GAAI,cAJ4D,iDAMnE,MAAMC,GAA6B,IAAAC,cAC9BC,IACG,MAAMC,EAA6BC,IAAsC,iDACrE,UACUP,EAAgBQ,oBAAoB,CACtCC,UAAWR,EAAOS,QAClBC,SAAUV,EAAOF,WAGfC,EAAgBY,kBAAkB,OAAD,wBAChCL,GAAO,CACVE,UAAWR,EAAOS,QAClBC,SAAUV,EAAOF,KAEzB,CAAE,MAAOc,GACDA,aAAiB3C,OACjBkB,EAAiByB,EAEzB,CACJ,IAEMC,EAAqB,eACrBC,EAAa,+BACZV,GAAc,CACjBT,aAAc,CACV,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,CAACoB,EAAA,EAAgBC,kBAAmB,CAChCH,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBK,kBAAmB,CAChCP,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBM,uBAAwB,CACrCR,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBO,cAAe,CAC5BT,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBQ,8BAA+B,CAC5CV,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBS,oBAAqB,CAClCX,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBU,yBAA0B,CACvCZ,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBW,iBAAkB,CAC/Bb,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBY,oBAAqB,CAClCd,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBa,wBAAyB,CACtCf,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBc,kBAAmB,CAChChB,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBe,sBAAuB,CACpCjB,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBgB,yBAA0B,CACvClB,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBiB,uBAAwB,CACrCnB,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,IAE/C,CAACC,EAAA,EAAgBkB,oBAAqB,CAClCpB,qBACAI,aAAc,eACdC,QAAS/B,EACTgC,gBAAiB,IAAMd,EAAoBS,MAInD,OAAOf,EAAgBY,kBAAkBG,KAE7C,CAACf,EAAiBC,EAAQb,IAG9B,OACI,gBAAC+C,EAAA,EAAkC,iBAC3BjC,EAAI,CACRkC,SAAS,eACT5B,oBAAqBR,EAAgBQ,oBACrCI,kBAAmBT,EACnBF,OAAQA,EACRoC,sBAAoB,EACpBC,gBAAiBtC,EAAgBsC,qBAOzC,CACI,CAAEvC,GAAIiB,EAAA,EAAgBC,kBACtB,CAAElB,GAAIiB,EAAA,EAAgBK,kBACtB,CAAEtB,GAAIiB,EAAA,EAAgBM,uBACtB,CAAEvB,GAAIiB,EAAA,EAAgBO,cACtB,CAAExB,GAAIiB,EAAA,EAAgBS,oBACtB,CAAE1B,GAAIiB,EAAA,EAAgBU,yBACtB,CAAE3B,GAAIiB,EAAA,EAAgBQ,8BACtB,CAAEzB,GAAIiB,EAAA,EAAgBe,sBACtB,CAAEhC,GAAIiB,EAAA,EAAgBa,wBACtB,CAAE9B,GAAIiB,EAAA,EAAgBc,kBACtB,CAAE/B,GAAIiB,EAAA,EAAgBW,iBACtB,CAAE5B,GAAIiB,EAAA,EAAgBY,oBACtB,CAAE7B,GAAIiB,EAAA,EAAgBgB,yBACtB,CAAEjC,GAAIiB,EAAA,EAAgBiB,uBACtB,CAAElC,GAAIiB,EAAA,EAAgBkB,qB,6DC5L9B,MAqDA,GAAe,E,SAAA,IArDgD,EAC3DlC,iBAAmBuC,uBAAsBC,sBACzC1C,+BACA2C,cACA9B,WACAvB,mBACAsD,sBACAC,kCACA/C,oBA+BA,IAAAgD,YAAU,MA7B4C,iDAClD,UACUJ,EAAmB,CACrB7B,WACAf,eACA,CAACe,GAAW,OAAF,QACNkC,UAAWJ,EACXrD,mBACA0D,QAAS,IAAMJ,EAAoB/B,IAChCgC,IAGf,CAAE,MAAO9B,GAC2B,mBAArBzB,GAAmCyB,aAAiB3C,OAC3DkB,EAAiByB,EAEzB,CACJ,IAeW,MAb6C,iDACpD,UACU0B,EAAqB,CAAE5B,YACjC,CAAE,MAAOE,GAC2B,mBAArBzB,GAAmCyB,aAAiB3C,OAC3DkB,EAAiByB,EAEzB,CACJ,OASG,IAGC,uBAAKkC,UAAWjD,EAA4B,YAAa2C,EAAa1C,GAAI0C,MAM9E,G,yGCpDJ,MAAMO,EAAoB,CAACC,EAAc,GAAIC,EAAU,SACnDD,EAAYE,SAAS,KAAOF,EAAc,GAAGC,KAAWD,IAuE5D,EAjCoC7E,IAChC,GArCqC,CACrCU,IAEA,GAAsB,iBAAXA,GAAkC,OAAXA,EAAiB,CAC/C,GACI,qBAAsBA,GACa,iBAA5BA,EAAOsE,kBACc,OAA5BtE,EAAOsE,kBACP,WAAYtE,EAAOsE,kBACnB,SAAUtE,EAAOsE,iBAEjB,OAAO,EAGX,GACI,aAActE,GACa,iBAApBA,EAAOuE,UACM,OAApBvE,EAAOuE,UACP,gBAAiBvE,EAAOuE,UACxB,aAAcvE,EAAOuE,UACrB,aAAcvE,EAAOuE,UACrB,YAAavE,EAAOuE,SAEpB,OAAO,EAGX,GAAI,eAAgBvE,GAAU,gBAAiBA,GAAU,YAAaA,EAClE,OAAO,CAEf,CAEA,OAAO,GAMHwE,CAAiClF,GAAO,CACxC,GAAIA,EAAKgF,iBACL,MAAO,CACHH,YAAaD,EAAkB5E,EAAKgF,iBAAiBG,QACrDC,SAAUpF,EAAKgF,iBAAiBxE,MAIxC,GAAIR,EAAKiF,SACL,MAAO,CACHJ,YAAaD,EAAkB5E,EAAKiF,SAASJ,aAC7CO,SAAUpF,EAAKiF,SAASG,SACxBC,YAAarF,EAAKiF,SAASK,SAC3BC,WAAYvF,EAAKiF,SAASO,SAIlC,GAAIxF,EAAKyF,WAAY,CACjB,MAAM,KAAEC,IAAS,IAAAP,QAAOnF,EAAKyF,YAE7B,MAAO,CACHZ,YAAaD,EAAkB5E,EAAK6E,aACpCQ,YAAarF,EAAK2F,SAAW3F,EAAK2F,QAAQC,OAAO,EAAG,GACpDL,WAAYvF,EAAK2F,SAAW3F,EAAK2F,QAAQC,OAAO,EAAG,GACnDR,SAAUM,EAAOA,EAAKG,SAAW,GAEzC,CACJ,G,IC9ECC,E,6CAAL,SAAKA,GACD,sBACA,4BACA,2BACA,wBACA,gCACA,0BACA,6BACA,kBACA,+BACA,6BACA,8BACH,CAZD,CAAKA,IAAAA,EAAiB,KActB,UCAe,SAASC,EACpBhF,GAEA,OAAQc,IACJ,IAAI1B,EAkBL,SACHY,GAEA,OAAQc,IACJ,MAAMmE,EAA0C,CAC5C,CAACpD,EAAA,EAAgBqD,QAASlF,EAASO,UAAU,4BAC7C,CAACsB,EAAA,EAAgBsD,UAAWnF,EAASO,UAAU,8BAC/C,CAACsB,EAAA,EAAgBuD,WAAYpF,EAASO,UAAU,4BAChD,CAACsB,EAAA,EAAgBwD,MAAOrF,EAASO,UAAU,0BAC3C,CAACsB,EAAA,EAAgByD,UAAWtF,EAASO,UAAU,8BAC/C,CAAC,EAAkBgF,WAAYvF,EAASO,UAAU,gCAClD,CAACsB,EAAA,EAAgB2D,QAASxF,EAASO,UAAU,4BAC7C,CAAC,EAAkBkF,QAASzF,EAASO,UAAU,4BAC/C,CAAC,EAAkBmF,cAAe1F,EAASO,UAAU,mCACrD,CAAC,EAAkBoF,cAAe3F,EAASO,UAAU,0BAGzD,OAAO0E,EAAanE,EAAOF,KAAOqE,EAAanE,EAAOA,QAE9D,CArCmB8E,CAA+B5F,EAA/B4F,CAAyC9E,GAcpD,OAZK1B,GAAQ0B,EAAOA,SAAW,EAAkB+E,cAC7CzG,EAAO0B,EAAOgF,OAAOC,aAGpB3G,IACDA,GAAO,IAAA4G,aACH,IAAAC,KAAInF,EAAQ,gEACRA,EAAOA,QACPA,EAAOF,KAIZxB,EAEf,CCtBA,MAoBA,EApByD,EAAG0B,SAAQoF,gBAChE,MAAM,SAAElG,IAAa,SAErB,OACI,uBAAK4D,UAAU,gBACX,gBAACuC,EAAA,EAAgB,CAACvF,GAAG,kCAAmC,IAGpD,qBAAGwF,KAAK,IAAIzC,SAAS,EAAA0C,EAAA,GAAeH,IAChC,gBAACC,EAAA,EAAgB,CACblH,KAAM,CAAEqH,aAActB,EAAqBhF,EAArBgF,CAA+BlE,IACrDF,GAAG,4BAGb,IACF,gBAACuF,EAAA,EAAgB,CAACvF,GAAG,mCCwDjC,EA9DgD,EAC5CkD,cACAyC,WACAlC,WACAC,cACAE,aACAtB,uBACAsD,sBACAC,kBACAxD,WACAnC,SACAoF,eAGI,kCACOK,GACC,iCAAa,mCACT,8BACI,gBAACJ,EAAA,EAAgB,CAACvF,GAAG,mC,KACf,IACT2F,KAINzC,KAAiBO,GAChB,iCAAa,mCACT,8BAAS,GAAGA,M,IAAuBP,KAIxCQ,KAAiBE,GAChB,iCAAa,qCACT,8BACI,gBAAC2B,EAAA,EAAgB,CAACvF,GAAG,8C,KACf,IACT,GAAG0D,KAAeE,OAIxBtB,GACC,yBAGQ,qBACIU,UAAW4C,EACXJ,KAAK,IACLxF,GAAIqC,EACJU,SAAS,EAAA0C,EAAA,MAERI,GACG,gBAACN,EAAA,EAAgB,CAACvF,GAAG,0CAOzC,gBAAC,EAAW,CAACE,OAAQA,EAAQoF,UAAWA,KC3CpD,EArB8C,EAC1CjD,WACAnC,SACA4F,wBACAC,wBAEA,MAAM,SAAE3G,IAAa,SAErB,OAEI,qBAAG4D,UAAW8C,EAAuBN,KAAK,IAAIxF,GAAIqC,EAAUU,SAAS,EAAA0C,EAAA,MAChEM,GACG,gBAACR,EAAA,EAAgB,CACblH,KAAM,CAAEqH,aAActB,EAAqBhF,EAArBgF,CAA+BlE,IACrDF,GAAG,4BC0IvB,EAhIqF,EACjFgG,cACA3D,WACAuD,sBACAC,kBACAI,kBAAiB,EACjB/F,SACAoC,uBACAwD,wBACAC,oBACAxD,kBACA9B,sBACAI,oBACAyE,YAAY,EAAAY,KACZC,iBAAiB,EAAAD,KACjB7G,mBAAmB,EAAA6G,SAEnB,MACIE,eACI/H,MAAM,kBAAEgI,EAAiB,YAAEC,EAAW,sBAAEC,MAE5C,SAEEC,EAAiBH,IACjBI,EAAWH,IAEjB,IAAKE,IAAmBC,EACpB,MAAM,IAAItI,MAAM,0BAGpB,MAAMuI,EAAoB,EAA2BxG,EAAOyG,oBACtDC,GAAoB,IAAAC,MAAKJ,EAASK,SAAU,CAAEC,WAAY7G,EAAOF,KAEjE2F,EACFe,GAAqB,CAACF,EAAeQ,UAAWR,EAAeS,UAAUC,KAAK,KAE5EC,EAAe,KACjB,MAAM,cAAEC,GAAkBpB,EACpBqB,EAA+Bd,IAGjC,EAA2BrG,EAAOyG,sBACjCU,EAEDD,EAAclH,GAAQ,GAEtBkH,EAAclH,GAAQ,IAIxBoH,GAAgB,IAAAjH,cAAY,KAAY,iDAC1C,UACUkC,EAAgB,CAAE3B,SAAUV,EAAOF,KACzCsF,IACAiC,OAAO/H,SAASgI,QACpB,CAAE,MAAO1G,GACLqF,EAAerF,EACnB,CACJ,KAAG,CAACyB,EAAiBrC,EAAOF,GAAIsF,EAAWa,IA2C3C,OAzCA,IAAAtD,YAAU,MACqC,iDACvCsE,IAEA,UACUtG,EAAkB,CACpBH,UAAWR,EAAOS,QAClBC,SAAUV,EAAOF,IAEzB,CAAE,MAAOc,GACLzB,EAAiByB,EACrB,CACJ,IAIO,MAC0C,iDACzC,MAAM,cAAEsG,GAAkBpB,EAE1BoB,EAAclH,GAAQ,GAEtB,UACUO,EAAoB,CACtBC,UAAWR,EAAOS,QAClBC,SAAUV,EAAOF,IAEzB,CAAE,MAAOc,GACLzB,EAAiByB,EACrB,CACJ,OAKL,KAEH,IAAA+B,YAAU,KACNsE,OAIA,gBAACM,EAAA,EAAc,CAACC,wBAAsB,EAACC,UAAW1B,GAC9C,uBAAKjD,UAAU,6CACV4D,EACG,gBAAC,EAAW,iBACJF,EAAiB,CACrBrE,SAAUA,EACVsD,SAAUA,EACVC,oBAAqBA,EACrBC,gBAAiBA,EACjB3F,OAAQA,EACRoF,UAAWgC,EACXhF,qBAAsBA,KAG1B,gBAAC,EAAU,CACPD,SAAUA,EACVnC,OAAQA,EACR4F,sBAAuBA,EACvBC,kBAAmBA,M","sources":["webpack://checkout/./packages/payment-integration-api/src/toResolvableComponent.tsx","webpack://checkout/./packages/payment-integration-api/src/errors/CustomError.ts","webpack://checkout/./packages/payment-integration-api/src/errors/EmbeddedCheckoutUnsupportedError.ts","webpack://checkout/./packages/payment-integration-api/src/setPrototypeOf.ts","webpack://checkout/./packages/google-pay-integration/src/GooglePayButton.tsx","webpack://checkout/./packages/payment-integration-api/src/isEmbedded.ts","webpack://checkout/./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx","webpack://checkout/./packages/checkout-button-integration/src/CheckoutButton.tsx","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/PaymentView.tsx","webpack://checkout/./packages/wallet-button-integration/src/SignInView.tsx","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx"],"sourcesContent":["import React, { type ComponentType } from 'react';\n\nimport type ResolvableComponent from './ResolvableComponent';\n\nexport default function toResolvableComponent<TProps extends Record<string, any>, TIdentifier>(\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Component: ComponentType<TProps>,\n    resolveIds: TIdentifier[],\n): ResolvableComponent<TProps, TIdentifier> {\n    return Object.assign((props: TProps) => <Component {...props} />, { resolveIds });\n}\n","export default class CustomError extends Error {\n    static shouldReport: boolean;\n\n    data: any;\n    title: any;\n    type: string;\n\n    constructor({\n        data = {},\n        message = '',\n        title = '',\n        name = '',\n    }: {\n        data?: any;\n        message?: string;\n        title?: string;\n        name?: string;\n    }) {\n        super();\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, CustomError);\n        } else {\n            this.stack = new Error().stack;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.data = data;\n        this.message = message;\n        this.name = name;\n        this.title = title;\n        this.type = 'custom';\n    }\n}\n","import setPrototypeOf from '../setPrototypeOf';\n\nimport CustomError from './CustomError';\n\nexport default class EmbeddedCheckoutUnsupportedError extends CustomError {\n    constructor(message: string) {\n        super({\n            name: 'EMBEDDED_CHECKOUT_UNSUPPORTED_ERROR',\n            message,\n        });\n\n        setPrototypeOf(this, EmbeddedCheckoutUnsupportedError.prototype);\n    }\n}\n","export default function setPrototypeOf<T extends object>(object: T, prototype: object): T {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else if (hasProto(object)) {\n        // eslint-disable-next-line no-proto\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction hasProto(object: object): object is object & { __proto__: object } {\n    return '__proto__' in object;\n}\n","import {\n    createGooglePayAdyenV2CustomerStrategy,\n    createGooglePayAdyenV3CustomerStrategy,\n    createGooglePayAuthorizeDotNetCustomerStrategy,\n    createGooglePayBigCommercePaymentsCustomerStrategy,\n    createGooglePayBnzCustomerStrategy,\n    createGooglePayBraintreeCustomerStrategy,\n    createGooglePayCheckoutComCustomerStrategy,\n    createGooglePayCybersourceCustomerStrategy,\n    createGooglePayOrbitalCustomerStrategy,\n    createGooglePayPayPalCommerceCustomerStrategy,\n    createGooglePayStripeCustomerStrategy,\n    createGooglePayStripeUpeCustomerStrategy,\n    createGooglePayTdOnlineMartCustomerStrategy,\n    createGooglePayWorldpayAccessCustomerStrategy,\n} from '@bigcommerce/checkout-sdk/integrations/google-pay';\nimport React, { type FunctionComponent } from 'react';\n\nimport { CheckoutButton } from '@bigcommerce/checkout/checkout-button-integration';\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    EmbeddedCheckoutUnsupportedError,\n    isEmbedded,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport './GooglePayButton.scss';\n\nconst GooglePayButton: FunctionComponent<CheckoutButtonProps> = (props) => {\n    const { language, onUnhandledError } = props;\n\n    if (isEmbedded()) {\n        onUnhandledError(\n            new EmbeddedCheckoutUnsupportedError(\n                language.translate('embedded_checkout.unsupported_error', {\n                    methods: 'googlepay',\n                }),\n            ),\n        );\n\n        return null;\n    }\n\n    const integrations = [\n        createGooglePayAdyenV2CustomerStrategy,\n        createGooglePayAdyenV3CustomerStrategy,\n        createGooglePayAuthorizeDotNetCustomerStrategy,\n        createGooglePayCheckoutComCustomerStrategy,\n        createGooglePayCybersourceCustomerStrategy,\n        createGooglePayBnzCustomerStrategy,\n        createGooglePayOrbitalCustomerStrategy,\n        createGooglePayStripeCustomerStrategy,\n        createGooglePayStripeUpeCustomerStrategy,\n        createGooglePayWorldpayAccessCustomerStrategy,\n        createGooglePayBraintreeCustomerStrategy,\n        createGooglePayPayPalCommerceCustomerStrategy,\n        createGooglePayBigCommercePaymentsCustomerStrategy,\n        createGooglePayTdOnlineMartCustomerStrategy,\n    ];\n\n    return (\n        <CheckoutButton\n            checkoutButtonContainerClass=\"google-pay-top-button\"\n            integrations={integrations}\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    GooglePayButton,\n    [\n        { id: 'googlepayadyenv2' },\n        { id: 'googlepayadyenv3' },\n        { id: 'googlepayauthorizenet' },\n        { id: 'googlepaybnz' },\n        { id: 'googlepaybraintree' },\n        { id: 'googlepaypaypalcommerce' },\n        { id: 'googlepaycheckoutcom' },\n        { id: 'googlepaycybersourcev2' },\n        { id: 'googlepayorbital' },\n        { id: 'googlepaystripe' },\n        { id: 'googlepaystripeupe' },\n        { id: 'googlepayworldpayaccess' },\n        { id: 'googlepaytdonlinemart' },\n        { id: 'googlepaystripeocs' },\n    ],\n);\n","export default function isEmbedded(pathname: string = document.location.pathname): boolean {\n    const basePath = `/${pathname.split('/')[1]}`;\n\n    return basePath === '/embedded-checkout';\n}\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport {\n    createGooglePayAdyenV2PaymentStrategy,\n    createGooglePayAdyenV3PaymentStrategy,\n    createGooglePayAuthorizeNetPaymentStrategy,\n    createGooglePayBigCommercePaymentsPaymentStrategy,\n    createGooglePayBraintreePaymentStrategy,\n    createGooglePayCheckoutComPaymentStrategy,\n    createGooglePayCybersourcePaymentStrategy,\n    createGooglePayOrbitalPaymentStrategy,\n    createGooglePayPPCPPaymentStrategy,\n    createGooglePayStripePaymentStrategy,\n    createGooglePayTdOnlineMartPaymentStrategy,\n    createGooglePayWorldpayAccessPaymentStrategy,\n} from '@bigcommerce/checkout-sdk/integrations/google-pay';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    type CheckoutButtonResolveId,\n    PaymentMethodId,\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst GooglePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeGooglePayPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const loadingContainerId = 'checkout-app';\n            const mergedOptions: PaymentInitializeOptions = {\n                ...defaultOptions,\n                integrations: [\n                    createGooglePayAdyenV2PaymentStrategy,\n                    createGooglePayAdyenV3PaymentStrategy,\n                    createGooglePayAuthorizeNetPaymentStrategy,\n                    createGooglePayCheckoutComPaymentStrategy,\n                    createGooglePayCybersourcePaymentStrategy,\n                    createGooglePayOrbitalPaymentStrategy,\n                    createGooglePayStripePaymentStrategy,\n                    createGooglePayWorldpayAccessPaymentStrategy,\n                    createGooglePayBraintreePaymentStrategy,\n                    createGooglePayPPCPPaymentStrategy,\n                    createGooglePayBigCommercePaymentsPaymentStrategy,\n                    createGooglePayTdOnlineMartPaymentStrategy,\n                ],\n                [PaymentMethodId.AdyenV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AdyenV3GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AuthorizeNetGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BNZGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BigCommercePaymentsGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BraintreeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.PayPalCommerceGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeUPEGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CybersourceV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.OrbitalGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CheckoutcomGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.WorldpayAccessGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.TdOnlineMartGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeOCSGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"walletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeGooglePayPayment}\n            method={method}\n            shouldShowEditButton\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    GooglePayPaymentMethod,\n    [\n        { id: PaymentMethodId.AdyenV2GooglePay },\n        { id: PaymentMethodId.AdyenV3GooglePay },\n        { id: PaymentMethodId.AuthorizeNetGooglePay },\n        { id: PaymentMethodId.BNZGooglePay },\n        { id: PaymentMethodId.BraintreeGooglePay },\n        { id: PaymentMethodId.PayPalCommerceGooglePay },\n        { id: PaymentMethodId.BigCommercePaymentsGooglePay },\n        { id: PaymentMethodId.CheckoutcomGooglePay },\n        { id: PaymentMethodId.CybersourceV2GooglePay },\n        { id: PaymentMethodId.OrbitalGooglePay },\n        { id: PaymentMethodId.StripeGooglePay },\n        { id: PaymentMethodId.StripeUPEGooglePay },\n        { id: PaymentMethodId.WorldpayAccessGooglePay },\n        { id: PaymentMethodId.TdOnlineMartGooglePay },\n        { id: PaymentMethodId.StripeOCSGooglePay },\n    ],\n);\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst CheckoutButton: FunctionComponent<CheckoutButtonProps> = ({\n    checkoutService: { deinitializeCustomer, initializeCustomer },\n    checkoutButtonContainerClass,\n    containerId,\n    methodId,\n    onUnhandledError,\n    onWalletButtonClick,\n    additionalInitializationOptions,\n    integrations,\n}) => {\n    const initializeCustomerStrategyOrThrow = async () => {\n        try {\n            await initializeCustomer({\n                methodId,\n                integrations,\n                [methodId]: {\n                    container: containerId,\n                    onUnhandledError,\n                    onClick: () => onWalletButtonClick(methodId),\n                    ...additionalInitializationOptions,\n                },\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeCustomerStrategyOrThrow = async () => {\n        try {\n            await deinitializeCustomer({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeCustomerStrategyOrThrow();\n\n        return () => {\n            void deinitializeCustomerStrategyOrThrow();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className={checkoutButtonContainerClass} data-test={containerId} id={containerId} />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    CheckoutButton,\n    [],\n);\n","import { number } from 'card-validator';\n\nimport { type WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface PaymentViewProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    shouldShowEditButton?: boolean;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    buttonId: string;\n    method: PaymentMethod;\n    onSignOut: () => void;\n}\n\nconst PaymentView: React.FC<PaymentViewProps> = ({\n    accountMask,\n    cardName,\n    cardType,\n    expiryMonth,\n    expiryYear,\n    shouldShowEditButton,\n    editButtonClassName,\n    editButtonLabel,\n    buttonId,\n    method,\n    onSignOut,\n}) => {\n    return (\n        <>\n            {!!cardName && (\n                <p data-test=\"payment-method-wallet-card-name\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_name_label\" />:\n                    </strong>{' '}\n                    {cardName}\n                </p>\n            )}\n\n            {!!accountMask && !!cardType && (\n                <p data-test=\"payment-method-wallet-card-type\">\n                    <strong>{`${cardType}:`}</strong> {accountMask}\n                </p>\n            )}\n\n            {!!expiryMonth && !!expiryYear && (\n                <p data-test=\"payment-method-wallet-card-expiry\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                    </strong>{' '}\n                    {`${expiryMonth}/${expiryYear}`}\n                </p>\n            )}\n\n            {!!shouldShowEditButton && (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    }\n                </p>\n            )}\n\n            <SignOutLink method={method} onSignOut={onSignOut} />\n        </>\n    );\n};\n\nexport default PaymentView;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignInViewProps {\n    buttonId: string;\n    method: PaymentMethod;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n}\n\nconst SignInView: React.FC<SignInViewProps> = ({\n    buttonId,\n    method,\n    signInButtonClassName,\n    signInButtonLabel,\n}) => {\n    const { language } = useLocale();\n\n    return (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n            {signInButtonLabel || (\n                <TranslatedString\n                    data={{ providerName: getPaymentMethodName(language)(method) }}\n                    id=\"remote.sign_in_action\"\n                />\n            )}\n        </a>\n    );\n};\n\nexport default SignInView;\n","import {\n    type CheckoutSelectors,\n    type CustomerRequestOptions,\n    type PaymentInitializeOptions,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect } from 'react';\n\nimport {\n    type PaymentFormService,\n    useCheckout,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\nimport PaymentView from './PaymentView';\nimport SignInView from './SignInView';\n\nexport interface WalletButtonPaymentMethodProps {\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst WalletButtonPaymentMethodComponent: React.FC<WalletButtonPaymentMethodProps> = ({\n    paymentForm,\n    buttonId,\n    editButtonClassName,\n    editButtonLabel,\n    isInitializing = false,\n    method,\n    shouldShowEditButton,\n    signInButtonClassName,\n    signInButtonLabel,\n    signOutCustomer,\n    deinitializePayment,\n    initializePayment,\n    onSignOut = noop,\n    onSignOutError = noop,\n    onUnhandledError = noop,\n}) => {\n    const {\n        checkoutState: {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        },\n    } = useCheckout();\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n    const isPaymentSelected = some(checkout.payments, { providerId: method.id });\n    // FIXME: I'm not sure how this would work for non-English names.\n    const cardName =\n        walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' ');\n\n    const toggleSubmit = () => {\n        const { disableSubmit } = paymentForm;\n        const currentIsPaymentDataRequired = isPaymentDataRequired();\n\n        if (\n            normalizeWalletPaymentData(method.initializationData) ||\n            !currentIsPaymentDataRequired\n        ) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    };\n\n    const handleSignOut = useCallback(async () => {\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    }, [signOutCustomer, method.id, onSignOut, onSignOutError]);\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            toggleSubmit();\n\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                const { disableSubmit } = paymentForm;\n\n                disableSubmit(method, false);\n\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        toggleSubmit();\n    });\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n            <div className=\"paymentMethod paymentMethod--walletButton\">\n                {isPaymentSelected ? (\n                    <PaymentView\n                        {...walletPaymentData}\n                        buttonId={buttonId}\n                        cardName={cardName}\n                        editButtonClassName={editButtonClassName}\n                        editButtonLabel={editButtonLabel}\n                        method={method}\n                        onSignOut={handleSignOut}\n                        shouldShowEditButton={shouldShowEditButton}\n                    />\n                ) : (\n                    <SignInView\n                        buttonId={buttonId}\n                        method={method}\n                        signInButtonClassName={signInButtonClassName}\n                        signInButtonLabel={signInButtonLabel}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default WalletButtonPaymentMethodComponent;\n"],"names":["toResolvableComponent","Component","resolveIds","Object","assign","props","CustomError","Error","constructor","data","message","title","name","super","captureStackTrace","this","stack","type","EmbeddedCheckoutUnsupportedError","object","prototype","setPrototypeOf","hasProto","__proto__","language","onUnhandledError","pathname","document","location","split","isEmbedded","translate","methods","integrations","CheckoutButton","checkoutButtonContainerClass","id","checkoutService","method","rest","initializeGooglePayPayment","useCallback","defaultOptions","reinitializePayment","options","deinitializePayment","gatewayId","gateway","methodId","initializePayment","error","loadingContainerId","mergedOptions","PaymentMethodId","AdyenV2GooglePay","walletButton","onError","onPaymentSelect","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BigCommercePaymentsGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","StripeGooglePay","StripeUPEGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","CheckoutcomGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay","WalletButtonPaymentMethodComponent","buttonId","shouldShowEditButton","signOutCustomer","deinitializeCustomer","initializeCustomer","containerId","onWalletButtonClick","additionalInitializationOptions","useEffect","container","onClick","className","formatAccountMask","accountMask","padding","includes","card_information","cardData","isWalletButtonInitializationData","number","cardType","expiryMonth","expMonth","expiryYear","expYear","accountNum","card","expDate","substr","niceType","PaymentMethodType","getPaymentMethodName","translations","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","config","displayName","capitalize","get","onSignOut","TranslatedString","href","preventDefault","providerName","cardName","editButtonClassName","editButtonLabel","signInButtonClassName","signInButtonLabel","paymentForm","isInitializing","noop","onSignOutError","checkoutState","getBillingAddress","getCheckout","isPaymentDataRequired","billingAddress","checkout","walletPaymentData","initializationData","isPaymentSelected","some","payments","providerId","firstName","lastName","join","toggleSubmit","disableSubmit","currentIsPaymentDataRequired","handleSignOut","window","reload","LoadingOverlay","hideContentWhenLoading","isLoading"],"sourceRoot":""}