{"version":3,"file":"klarna-payment-method-2b4f4f80.js","mappings":"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","sources":["webpack://checkout/./packages/klarna-integration/src/klarna/KlarnaPaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarnav2/KlarnaV2PaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/hosted-widget-integration/src/EditButton.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentDescriptor.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentWidget.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx"],"sourcesContent":["import { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaPayment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarna: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaPaymentMethod,\n    [{ id: 'klarna' }],\n);\n","import { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaV2Payment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarnav2: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaV2PaymentMethod,\n    [{ gateway: 'klarna' }],\n);\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { type Instrument, type LineItemMap, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import {\n    type LineItemMap,\n    type PaymentInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => updateFieldValue(selectedInstrumentId));\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import classNames from 'classnames';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\ninterface EditButtonProps {\n    buttonId: string | undefined;\n    shouldShowEditButton: boolean | undefined;\n}\n\nexport const EditButton = ({ buttonId, shouldShowEditButton }: EditButtonProps): ReactNode => {\n    if (shouldShowEditButton) {\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        return (\n            <p>\n                <button\n                    className={classNames('stepHeader', 'widget-link-amazonpay')}\n                    id={buttonId}\n                    onClick={preventDefault()}\n                    type=\"button\"\n                >\n                    {translatedString}\n                </button>\n            </p>\n        );\n    }\n\n    return null;\n};\n","import React, { type ReactNode } from 'react';\n\ninterface PaymentDescriptorProps {\n    paymentDescriptor: string | undefined;\n    shouldShowDescriptor: boolean | undefined;\n}\n\nexport const PaymentDescriptor = ({\n    shouldShowDescriptor,\n    paymentDescriptor,\n}: PaymentDescriptorProps): ReactNode => {\n    if (shouldShowDescriptor && paymentDescriptor) {\n        return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n    }\n\n    return null;\n};\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type ReactElement } from 'react';\n\ninterface PaymentWidgetProps {\n    additionalContainerClassName: string | undefined;\n    containerId: string;\n    hideContentWhenSignedOut: boolean;\n    hideWidget: boolean;\n    isSignInRequired: boolean | undefined;\n    isSignedIn: boolean;\n    method: PaymentMethod;\n    renderCustomPaymentForm: (() => React.ReactNode) | undefined;\n    shouldRenderCustomInstrument: boolean;\n    shouldShowCreditCardFieldset: boolean;\n}\n\nexport const PaymentWidget = ({\n    additionalContainerClassName,\n    containerId,\n    hideContentWhenSignedOut,\n    hideWidget,\n    isSignInRequired,\n    isSignedIn,\n    method,\n    renderCustomPaymentForm,\n    shouldRenderCustomInstrument,\n    shouldShowCreditCardFieldset,\n}: PaymentWidgetProps): ReactElement => (\n    <div\n        className={classNames(\n            'widget',\n            `widget--${method.id}`,\n            'payment-widget',\n            shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n        )}\n        id={containerId}\n        style={{\n            display:\n                (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                !shouldShowCreditCardFieldset ||\n                hideWidget\n                    ? 'none'\n                    : undefined,\n        }}\n        tabIndex={-1}\n    >\n        {shouldRenderCustomInstrument && renderCustomPaymentForm && renderCustomPaymentForm()}\n    </div>\n);\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { find, noop } from 'lodash';\nimport React, {\n    type ReactElement,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    isCardInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EditButton } from './EditButton';\nimport { PaymentDescriptor } from './PaymentDescriptor';\nimport { PaymentWidget } from './PaymentWidget';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\nconst HostedWidgetPaymentComponent = ({\n    instruments,\n    hideWidget = false,\n    isInitializing = false,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    isLoadingInstruments,\n    shouldHideInstrumentExpiryDate = false,\n    shouldShow = true,\n    hideVerificationFields,\n    method,\n    storedCardValidationSchema,\n    isPaymentDataRequired,\n    setValidationSchema,\n    loadInstruments,\n    onUnhandledError = noop,\n    deinitializeCustomer,\n    deinitializePayment,\n    setSubmit,\n    initializeCustomer,\n    initializePayment,\n    signInCustomer,\n    isSignedIn,\n    isSignInRequired,\n    isInstrumentCardNumberRequired,\n    validateInstrument,\n    containerId,\n    hideContentWhenSignedOut = false,\n    renderCustomPaymentForm,\n    additionalContainerClassName,\n    shouldRenderCustomInstrument = false,\n    paymentDescriptor,\n    shouldShowDescriptor,\n    shouldShowEditButton,\n    buttonId,\n    setFieldValue,\n}: HostedWidgetComponentProps & PaymentContextProps): ReactElement => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n    const instrumentsRef = useRef<PaymentInstrument[]>(instruments);\n\n    useEffect(() => {\n        instrumentsRef.current = instruments;\n    }, [instruments]);\n\n    const getDefaultInstrumentId = useCallback((): string | undefined => {\n        if (isAddingNewCard) {\n            return undefined;\n        }\n\n        const defaultInstrument =\n            instrumentsRef.current.find((instrument) => instrument.defaultInstrument) ||\n            instrumentsRef.current[0];\n\n        return defaultInstrument ? defaultInstrument.bigpayToken : undefined;\n    }, [isAddingNewCard]);\n\n    const getSelectedInstrument = useCallback((): PaymentInstrument | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n\n        return find(instrumentsRef.current, { bigpayToken: currentSelectedId });\n    }, [selectedInstrumentId, getDefaultInstrumentId]);\n\n    const getValidationSchema = useCallback((): ObjectSchema | null => {\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const currentSelectedInstrument = getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && currentSelectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }, [\n        getSelectedInstrument,\n        isInstrumentFeatureAvailableProp,\n        isPaymentDataRequired,\n        storedCardValidationSchema,\n    ]);\n\n    const getSelectedBankAccountInstrument = useCallback(\n        (\n            addingNew: boolean,\n            currentSelectedInstrument: PaymentInstrument,\n        ): AccountInstrument | undefined => {\n            return !addingNew && isBankAccountInstrument(currentSelectedInstrument)\n                ? currentSelectedInstrument\n                : undefined;\n        },\n        [],\n    );\n\n    const handleDeleteInstrument = useCallback(\n        (id: string): void => {\n            if (instruments.length === 0) {\n                setIsAddingNewCard(true);\n                setSelectedInstrumentId(undefined);\n                setFieldValue('instrumentId', '');\n\n                return;\n            }\n\n            if (selectedInstrumentId === id) {\n                const nextId = getDefaultInstrumentId();\n\n                setSelectedInstrumentId(nextId);\n                setFieldValue('instrumentId', nextId);\n            }\n        },\n        [instruments, selectedInstrumentId, getDefaultInstrumentId],\n    );\n\n    const handleUseNewCard = useCallback(async () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        if (deinitializePayment) {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n\n        if (initializePayment) {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n    }, [method, deinitializePayment, initializePayment]);\n\n    const handleSelectInstrument = useCallback((id: string) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    }, []);\n\n    const getValidateInstrument = useCallback((): ReactNode | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n        const currentSelectedInstrument = find(instruments, { bigpayToken: currentSelectedId });\n\n        if (currentSelectedInstrument) {\n            assertIsCardInstrument(currentSelectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequired(\n                currentSelectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return undefined;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, currentSelectedInstrument);\n            }\n        }\n\n        return undefined;\n    }, [\n        selectedInstrumentId,\n        getDefaultInstrumentId,\n        instruments,\n        method,\n        hideVerificationFields,\n        validateInstrument,\n    ]);\n\n    const initializeMethod = async (): Promise<CheckoutSelectors | void> => {\n        const currentInstruments = instrumentsRef.current;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return;\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer || null);\n\n            if (initializeCustomer) {\n                return initializeCustomer({ methodId: method.id });\n            }\n\n            return;\n        }\n\n        setSubmit(method, null);\n\n        let selectedCardInstrument: CardInstrument | undefined;\n\n        if (!isAddingNewCard) {\n            const currentSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n            const maybeInstrument =\n                currentInstruments.find(\n                    (instrument) => instrument.bigpayToken === currentSelectedInstrumentId,\n                ) || currentInstruments[0];\n\n            if (maybeInstrument && isCardInstrument(maybeInstrument)) {\n                selectedCardInstrument = maybeInstrument;\n            }\n        }\n\n        if (initializePayment) {\n            return initializePayment(\n                { gatewayId: method.gateway, methodId: method.id },\n                selectedCardInstrument,\n            );\n        }\n    };\n\n    // Below values are for lower level components\n    const effectiveSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n    const selectedInstrument = effectiveSelectedInstrumentId\n        ? instruments.find((i) => i.bigpayToken === effectiveSelectedInstrumentId) || instruments[0]\n        : instruments[0];\n    const cardInstruments: CardInstrument[] = instruments.filter(\n        (i): i is CardInstrument => !isBankAccountInstrument(i),\n    );\n    const accountInstruments: AccountInstrument[] = instruments.filter(\n        (i): i is AccountInstrument => isBankAccountInstrument(i),\n    );\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n    const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n    const selectedAccountInstrument = selectedInstrument\n        ? getSelectedBankAccountInstrument(isAddingNewCard, selectedInstrument)\n        : undefined;\n    const shouldShowAccountInstrument = instruments[0] && isBankAccountInstrument(instruments[0]);\n\n    useEffect(() => {\n        const init = async () => {\n            setValidationSchema(method, getValidationSchema());\n\n            try {\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments?.();\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void init();\n\n        return () => {\n            const deInit = async () => {\n                setValidationSchema(method, null);\n                setSubmit(method, null);\n\n                try {\n                    if (deinitializePayment) {\n                        await deinitializePayment({\n                            gatewayId: method.gateway,\n                            methodId: method.id,\n                        });\n                    }\n\n                    if (deinitializeCustomer) {\n                        await deinitializeCustomer({ methodId: method.id });\n                    }\n                } catch (error: unknown) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deInit();\n        };\n    }, []);\n\n    const isInitialRenderRef = useRef(true);\n    const instrumentsLength = useRef(instruments.length);\n    const isPaymentDataRequiredRef = useRef(isPaymentDataRequired);\n    const selectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    useEffect(() => {\n        if (isInitialRenderRef.current) {\n            isInitialRenderRef.current = false;\n\n            return;\n        }\n\n        setValidationSchema(method, getValidationSchema());\n\n        const reInit = async () => {\n            try {\n                if (deinitializePayment) {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (\n            selectedInstrumentIdRef.current !== selectedInstrumentId ||\n            (Number(instrumentsLength.current) > 0 && instruments.length === 0) ||\n            isPaymentDataRequiredRef.current !== isPaymentDataRequired\n        ) {\n            selectedInstrumentIdRef.current = selectedInstrumentId;\n            instrumentsLength.current = instruments.length;\n            isPaymentDataRequiredRef.current = isPaymentDataRequired;\n\n            void reInit();\n        }\n    }, [selectedInstrumentId, instruments, isPaymentDataRequired]);\n\n    if (!shouldShow) {\n        return <div style={{ display: 'none' }} />;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrument={selectedAccountInstrument}\n                    />\n                )}\n                {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        instruments={cardInstruments}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={effectiveSelectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                        validateInstrument={getValidateInstrument()}\n                    />\n                )}\n\n                <PaymentDescriptor\n                    paymentDescriptor={paymentDescriptor}\n                    shouldShowDescriptor={shouldShowDescriptor}\n                />\n\n                <PaymentWidget\n                    additionalContainerClassName={additionalContainerClassName}\n                    containerId={containerId}\n                    hideContentWhenSignedOut={hideContentWhenSignedOut}\n                    hideWidget={hideWidget}\n                    isSignInRequired={isSignInRequired}\n                    isSignedIn={isSignedIn}\n                    method={method}\n                    renderCustomPaymentForm={renderCustomPaymentForm}\n                    shouldRenderCustomInstrument={shouldRenderCustomInstrument}\n                    shouldShowCreditCardFieldset={shouldShowCreditCardFieldset}\n                />\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={effectiveSelectedInstrumentId}\n                        instruments={instruments}\n                        isAccountInstrument={Boolean(\n                            isAccountInstrument || shouldShowAccountInstrument,\n                        )}\n                    />\n                )}\n\n                <EditButton buttonId={buttonId} shouldShowEditButton={shouldShowEditButton} />\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedWidgetPaymentComponent;\n"],"names":["toResolvableComponent","checkoutService","checkoutState","method","paymentForm","rest","initializeKlarnaPayment","useCallback","options","initializePayment","klarna","container","methodId","hidePaymentSubmitButton","disableSubmit","setFieldValue","setSubmit","setValidationSchema","instruments","data","getInstruments","getCheckout","isPaymentDataRequired","statuses","isLoadingInstruments","checkout","customer","getCustomer","isInstrumentFeatureAvailable","isGuest","Boolean","config","isVaultingEnabled","HostedWidgetPaymentComponent","containerId","id","deinitializePayment","isInstrumentCardCodeRequired","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequired","isInstrumentCardNumberRequiredSelector","isSignedIn","some","payments","providerId","loadInstruments","signOut","signOutCustomer","initializeKlarnaV2Payment","klarnav2","gateway","mapFromInstrumentCardType","type","cart","getCart","lineItems","instrument","paymentMethod","isVaultingCardNumberValidationAvailable","initializationData","physicalItems","length","trustedShippingAddress","PROVIDERS_WITHOUT_CARD_CODE","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","includes","provider","digitalItems","giftCertificates","InstrumentMenuItem","className","testId","shouldHideExpiryDate","onClick","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","TranslatedString","cardTitle","niceType","endingIn","last4","expiryDate","InstrumentOption","noop","handleClick","bigpayToken","InstrumentUseNewButton","InstrumentMenu","selectedInstrumentId","onSelectInstrument","onUseNewInstrument","map","key","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","useRef","updateFieldValue","instrumentId","name","useEffect","setTimeout","value","undefined","current","selectedInstrument","find","DropdownTrigger","dropdown","memo","onDeleteInstrument","validateInstrument","renderInput","renderModal","props","ManageInstrumentsModal","Fieldset","additionalClassName","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","render","style","display","EditButton","buttonId","shouldShowEditButton","translatedString","preventDefault","PaymentDescriptor","shouldShowDescriptor","paymentDescriptor","PaymentWidget","additionalContainerClassName","hideContentWhenSignedOut","hideWidget","isSignInRequired","renderCustomPaymentForm","shouldRenderCustomInstrument","shouldShowCreditCardFieldset","tabIndex","isInitializing","isAccountInstrument","isInstrumentFeatureAvailableProp","shouldHideInstrumentExpiryDate","shouldShow","hideVerificationFields","storedCardValidationSchema","onUnhandledError","deinitializeCustomer","initializeCustomer","signInCustomer","isAddingNewCard","setIsAddingNewCard","useState","setSelectedInstrumentId","instrumentsRef","getDefaultInstrumentId","defaultInstrument","getSelectedInstrument","currentSelectedId","getValidationSchema","currentSelectedInstrument","getSelectedBankAccountInstrument","addingNew","handleDeleteInstrument","nextId","handleUseNewCard","gatewayId","handleSelectInstrument","getValidateInstrument","shouldShowNumberField","initializeMethod","currentInstruments","selectedCardInstrument","currentSelectedInstrumentId","maybeInstrument","isCardInstrument","effectiveSelectedInstrumentId","i","cardInstruments","filter","accountInstruments","shouldShowInstrumentFieldset","isLoading","selectedAccountInstrument","shouldShowAccountInstrument","error","Error","isInitialRenderRef","instrumentsLength","isPaymentDataRequiredRef","selectedInstrumentIdRef","Number","LoadingOverlay","hideContentWhenLoading","AccountInstrumentFieldset","A","CardInstrumentFieldset","StoreInstrumentFieldset"],"sourceRoot":""}