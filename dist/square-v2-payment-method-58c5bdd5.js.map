{"version":3,"file":"square-v2-payment-method-58c5bdd5.js","mappings":"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","sources":["webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/squarev2-integration/src/SquareV2Form.tsx","webpack://checkout/./packages/squarev2-integration/src/SquareV2PaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx"],"sourcesContent":["export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport {\n    CardInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface SquareV2FormProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    containerId: string;\n    deinitializePayment: () => Promise<void>;\n    initializePayment: () => Promise<void>;\n    method: PaymentMethod;\n}\n\nconst SquareV2Form: FunctionComponent<SquareV2FormProps> = ({\n    checkoutService,\n    checkoutState,\n    containerId,\n    deinitializePayment,\n    initializePayment,\n    method,\n}) => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n\n    const { getCustomer, getInstruments } = checkoutState.data;\n    const isSignedIn = getCustomer()?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n\n    useEffect(() => {\n        if (isInstrumentFeatureAvailable) {\n            void checkoutService.loadInstruments();\n        }\n    }, [checkoutService, isInstrumentFeatureAvailable]);\n\n    const instruments = useMemo(() => getInstruments(method) || [], [getInstruments, method]);\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n\n    const getDefaultInstrumentId = useCallback(() => {\n        if (isAddingNewCard) {\n            return;\n        }\n\n        if (instruments.length > 0) {\n            const defaultInstrument =\n                instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n            return defaultInstrument.bigpayToken;\n        }\n    }, [instruments, isAddingNewCard]);\n\n    useEffect(() => {\n        const defaultInstrumentId = getDefaultInstrumentId() || undefined;\n\n        setSelectedInstrumentId(defaultInstrumentId);\n    }, [getDefaultInstrumentId, instruments]);\n\n    const { setFieldValue } = usePaymentFormContext().paymentForm;\n\n    const handleSelectInstrument: (id: string) => void = (id) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    };\n\n    const handleDeleteInstrument: (id: string) => void = (id) => {\n        if (instruments.length === 0) {\n            setIsAddingNewCard(true);\n            setSelectedInstrumentId(undefined);\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            setSelectedInstrumentId(getDefaultInstrumentId());\n\n            setFieldValue('instrumentId', getDefaultInstrumentId());\n        }\n    };\n\n    const handleUseNewCard: () => void = () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        void deinitializePayment();\n\n        void initializePayment();\n    };\n\n    const renderPlaceholderFields = () => {\n        return (\n            <div data-test=\"squarev2_placeholder_form\" style={{ display: 'none' }}>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-label optimizedCheckout-form-label\"\n                        id=\"messageIsDefault\"\n                    />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsDefault\" />\n                </div>\n                <div className=\"form-field\">\n                    <div\n                        className=\"form-input optimizedCheckout-form-input form-input--focus optimizedCheckout-form-input--focus\"\n                        id=\"inputIsFocus\"\n                    />\n                </div>\n                <div className=\"form-field form-field--error\">\n                    <div className=\"form-inlineMessage\" id=\"messageIsError\" />\n                    <div className=\"form-input optimizedCheckout-form-input\" id=\"inputIsError\" />\n                </div>\n            </div>\n        );\n    };\n\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    return (\n        <LoadingOverlay\n            data-test=\"squarev2_loading_overlay\"\n            hideContentWhenLoading\n            isLoading={isLoadingInstruments()}\n        >\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                        instruments={instruments as CardInstrument[]}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={selectedInstrumentId || getDefaultInstrumentId()}\n                    />\n                )}\n                <div\n                    className={classNames('widget', `widget--${method.id}`, 'payment-widget')}\n                    data-test={containerId}\n                    style={{\n                        display: !shouldShowCreditCardFieldset ? 'none' : undefined,\n                    }}\n                    tabIndex={-1}\n                >\n                    {renderPlaceholderFields()}\n                    <div id={containerId} />\n                </div>\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={selectedInstrumentId}\n                        instruments={instruments}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default SquareV2Form;\n","import { difference } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect } from 'react';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport SquareV2Form from './SquareV2Form';\n\nconst SquareV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n}) => {\n    const getStylesFromElement = (id: string, properties: string[]) => {\n        const container = document.querySelector<HTMLDivElement>(`#${id}`);\n\n        if (!container) {\n            throw new Error(\n                `Unable to retrieve input styles as the provided container ID \"${id}\" is not valid.`,\n            );\n        }\n\n        return getAppliedStyles(container, properties);\n    };\n\n    const copyStylesFromDummyFormFields = useCallback(() => {\n        const styleProps = [\n            'backgroundColor',\n            'borderColor',\n            'borderRadius',\n            'borderWidth',\n            'color',\n            'fontSize',\n            'fontWeight',\n        ];\n\n        return {\n            default: {\n                message: getStylesFromElement('messageIsDefault', ['color']),\n                input: getStylesFromElement('inputIsDefault', styleProps),\n            },\n            focus: {\n                input: getStylesFromElement(\n                    'inputIsFocus',\n                    difference(styleProps, ['borderRadius']),\n                ),\n            },\n            error: {\n                message: getStylesFromElement('messageIsError', ['color']),\n                input: getStylesFromElement('inputIsError', [\n                    'borderColor',\n                    'borderWidth',\n                    'color',\n                ]),\n            },\n        };\n    }, []);\n\n    const mapToSquareStyles = useCallback(\n        (styles: ReturnType<typeof copyStylesFromDummyFormFields>) => {\n            const { borderColor, borderRadius, borderWidth, ...input } = styles.default.input;\n            const {\n                borderColor: borderColorIsFocus,\n                borderWidth: borderWidthIsFocus,\n                ...inputIsFocus\n            } = styles.focus.input;\n            const {\n                borderColor: borderColorIsError,\n                borderWidth: borderWidthIsError,\n                color: colorIsError,\n            } = styles.error.input;\n\n            return {\n                input,\n                'input.is-focus': {\n                    ...inputIsFocus,\n                },\n                'input.is-error': {\n                    color: colorIsError,\n                },\n                '.input-container': {\n                    borderColor,\n                    borderRadius,\n                    borderWidth,\n                },\n                '.input-container.is-focus': {\n                    borderColor: borderColorIsFocus,\n                    borderWidth: borderWidthIsFocus,\n                },\n                '.input-container.is-error': {\n                    borderColor: borderColorIsError,\n                    borderWidth: borderWidthIsError,\n                },\n                '.message-text': {\n                    color: styles.default.message.color,\n                },\n                '.message-icon': {\n                    color: styles.default.message.color,\n                },\n                '.message-text.is-error': {\n                    color: styles.error.message.color,\n                },\n                '.message-icon.is-error': {\n                    color: styles.error.message.color,\n                },\n            };\n        },\n        [],\n    );\n\n    const containerId = 'squarev2_payment_element_container';\n\n    const initializePayment = useCallback(async () => {\n        let style;\n\n        try {\n            style = mapToSquareStyles(copyStylesFromDummyFormFields());\n        } catch {\n            /* Do nothing: we should not block shoppers from buying. */\n        }\n\n        await checkoutService.initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n            squarev2: {\n                containerId,\n                style,\n            },\n        });\n    }, [\n        checkoutService,\n        copyStylesFromDummyFormFields,\n        mapToSquareStyles,\n        method.gateway,\n        method.id,\n    ]);\n\n    const deinitializePayment = useCallback(async () => {\n        await checkoutService.deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [checkoutService, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, [deinitializePayment, initializePayment]);\n\n    return (\n        <SquareV2Form\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            containerId={containerId}\n            deinitializePayment={deinitializePayment}\n            initializePayment={initializePayment}\n            method={method}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    SquareV2PaymentMethod,\n    [{ id: 'squarev2' }],\n);\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => updateFieldValue(selectedInstrumentId));\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n"],"names":["mapFromInstrumentCardType","type","checkoutService","checkoutState","containerId","deinitializePayment","initializePayment","method","isAddingNewCard","setIsAddingNewCard","useState","selectedInstrumentId","setSelectedInstrumentId","undefined","getCustomer","getInstruments","data","isInstrumentFeatureAvailable","isGuest","Boolean","config","isVaultingEnabled","useEffect","loadInstruments","instruments","useMemo","shouldShowInstrumentFieldset","length","shouldShowCreditCardFieldset","getDefaultInstrumentId","useCallback","find","instrument","defaultInstrument","bigpayToken","defaultInstrumentId","setFieldValue","paymentForm","isLoadingInstruments","statuses","LoadingOverlay","hideContentWhenLoading","isLoading","className","CardInstrumentFieldset","onDeleteInstrument","id","onSelectInstrument","onUseNewInstrument","style","display","tabIndex","StoreInstrumentFieldset","instrumentId","toResolvableComponent","getStylesFromElement","properties","container","document","querySelector","Error","getAppliedStyles","copyStylesFromDummyFormFields","styleProps","default","message","input","focus","difference","error","mapToSquareStyles","styles","borderColor","borderRadius","borderWidth","borderColorIsFocus","borderWidthIsFocus","inputIsFocus","borderColorIsError","borderWidthIsError","color","colorIsError","gatewayId","gateway","methodId","squarev2","InstrumentMenuItem","testId","shouldHideExpiryDate","onClick","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","TranslatedString","cardTitle","niceType","endingIn","last4","expiryDate","InstrumentOption","noop","handleClick","InstrumentUseNewButton","InstrumentMenu","map","key","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","useRef","updateFieldValue","name","setTimeout","value","current","selectedInstrument","DropdownTrigger","dropdown","memo","validateInstrument","renderInput","renderModal","props","ManageInstrumentsModal","Fieldset","additionalClassName","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","render"],"sourceRoot":""}