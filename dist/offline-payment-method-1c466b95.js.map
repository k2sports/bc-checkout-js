{"version":3,"file":"offline-payment-method-1c466b95.js","mappings":"qIAIe,SAASA,EAEpBC,EACAC,GAEA,OAAOC,OAAOC,QAAQC,GAAkB,gBAACJ,EAAS,iBAAKI,KAAW,CAAEH,cACxE,C,gFCHA,MA0CA,GAAe,E,SAAA,IA1CqD,EAChEI,SACAC,kBACAC,wBAEA,IAAAC,YAAU,MACgC,iDAClC,UACUF,EAAgBG,kBAAkB,CACpCC,UAAWL,EAAOM,QAClBC,SAAUP,EAAOQ,IAEzB,CAAE,MAAOC,GACDA,aAAiBC,OACjBR,EAAiBO,EAEzB,CACJ,IAIO,MACqC,iDACpC,UACUR,EAAgBU,oBAAoB,CACtCN,UAAWL,EAAOM,QAClBC,SAAUP,EAAOQ,IAEzB,CAAE,MAAOC,GACDA,aAAiBC,OACjBR,EAAiBO,EAEzB,CACJ,OAIL,CAACR,EAAiBD,EAAOM,QAASN,EAAOQ,GAAIN,IAEzC,OAGgD,CACvD,CACIU,KAAM,yB","sources":["webpack://checkout/./packages/payment-integration-api/src/toResolvableComponent.tsx","webpack://checkout/./packages/offline-payment-integration/src/OfflinePaymentMethod.tsx"],"sourcesContent":["import React, { type ComponentType } from 'react';\n\nimport type ResolvableComponent from './ResolvableComponent';\n\nexport default function toResolvableComponent<TProps extends Record<string, any>, TIdentifier>(\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Component: ComponentType<TProps>,\n    resolveIds: TIdentifier[],\n): ResolvableComponent<TProps, TIdentifier> {\n    return Object.assign((props: TProps) => <Component {...props} />, { resolveIds });\n}\n","import { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst OfflinePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    return null;\n};\n\nexport default toResolvableComponent(OfflinePaymentMethod, [\n    {\n        type: 'PAYMENT_TYPE_OFFLINE',\n    },\n]);\n"],"names":["toResolvableComponent","Component","resolveIds","Object","assign","props","method","checkoutService","onUnhandledError","useEffect","initializePayment","gatewayId","gateway","methodId","id","error","Error","deinitializePayment","type"],"sourceRoot":""}