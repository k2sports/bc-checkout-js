{"version":3,"file":"hosted-payment-method-4a2cca38.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-payment-integration/src/HostedPaymentMethod.tsx","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/external-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/is-additional-action.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/create-external-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-execute-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/humm-integration/src/humm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/humm-integration/src/create-humm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://checkout/@bigcommerce/checkout-sdk/./packages/offsite-integration/src/offsite-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/offsite-integration/src/create-offsite-payment-strategy.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconNewAccount.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts"],"sourcesContent":["import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedPaymentComponent } from './components';\n\nconst HostedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    onUnhandledError,\n    language,\n    paymentForm,\n}) => {\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            onUnhandledError={onUnhandledError}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedPaymentMethod,\n    [{ gateway: 'afterpay' }, { id: 'quadpay' }, { id: 'sezzle' }, { id: 'zip' }],\n);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    isRequestError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, isAdditionalActionRequired } from './is-additional-action';\n\nexport default class ExternalPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _formPoster: FormPoster,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !isAdditionalActionRequired(error.body) ||\n                !this._isAdditionalActionRequired(error.body)\n            ) {\n                return Promise.reject(error);\n            }\n\n            const {\n                body: {\n                    additional_action_required: {\n                        data: { redirect_url },\n                    },\n                },\n            } = error;\n\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return new Promise(() => {\n                this.redirectUrl(redirect_url);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }) as any;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected redirectUrl(redirect_url: string): void {\n        return this._formPoster.postForm(redirect_url, {});\n    }\n\n    private _isAdditionalActionRequired(body: AdditionalActionRequired): boolean {\n        const { additional_action_required, status } = body;\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'offsite_redirect'\n        );\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","export interface AdditionalActionRequired {\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n        type: string;\n    };\n    status: string;\n}\n\nexport function isAdditionalActionRequired(value: unknown): value is AdditionalActionRequired {\n    return typeof value === 'object' && value !== null && 'additional_action_required' in value;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ExternalPaymentStrategy from './external-payment-strategy';\n\nconst createExternalPaymentStrategy: PaymentStrategyFactory<ExternalPaymentStrategy> = (\n    paymentIntegrationService,\n) => new ExternalPaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createExternalPaymentStrategy, [{ id: 'laybuy' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\nconst defaultMessage =\n    'Payment cannot be processed for this order, please select another payment method';\n\nexport default class PaymentExecuteError extends StandardError {\n    type = 'custom_provider_execute_error';\n    subtype: string;\n\n    constructor(subtype: string, name: string, message?: string) {\n        super(message || defaultMessage);\n\n        this.name = name;\n        this.subtype = subtype;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentExecuteError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { HummInitializationData, OffsiteRedirectResponse } from './humm';\n\nexport default class HummPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(payment.methodId, options);\n\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<HummInitializationData>(payment.methodId);\n\n        if (!paymentMethod.initializationData?.processable) {\n            throw new PaymentExecuteError(\n                'payment.humm_not_processable_error',\n                'hummNotProcessableError',\n            );\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n            });\n        } catch (error) {\n            if (this.isOffsiteRedirectResponse(error)) {\n                return this.handleOffsiteRedirectResponse(error);\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private handleOffsiteRedirectResponse(response: OffsiteRedirectResponse): Promise<void> {\n        const url = response.body.additional_action_required.data.redirect_url;\n        const data = response.body.provider_data;\n\n        return new Promise((resolve) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.formPoster.postForm(url, JSON.parse(data), resolve);\n        });\n    }\n\n    private isOffsiteRedirectResponse(response: unknown): response is OffsiteRedirectResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const partialResponse: Partial<OffsiteRedirectResponse> = response;\n\n        if (!partialResponse.body) {\n            return false;\n        }\n\n        const partialBody: Partial<OffsiteRedirectResponse['body']> = partialResponse.body;\n\n        return (\n            partialBody.status === 'additional_action_required' &&\n            !!partialBody.additional_action_required &&\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            partialBody.additional_action_required.type === 'offsite_redirect' &&\n            typeof partialBody.provider_data === 'string'\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HummPaymentStrategy from './humm-payment-strategy';\n\nconst createHummPaymentStrategy: PaymentStrategyFactory<HummPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new HummPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createHummPaymentStrategy, [{ id: 'humm' }]);\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","// The require scope\nvar __webpack_require__ = {};\n\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import {\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n        const paymentData = payment && payment.paymentData;\n        const instrumentId =\n            (paymentData && isVaultedInstrument(paymentData) && paymentData.instrumentId) ||\n            undefined;\n        const shouldSaveInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSaveInstrument) ||\n            undefined;\n        const shouldSetAsDefaultInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSetAsDefaultInstrument) ||\n            undefined;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        await this._paymentIntegrationService.submitOrder(orderPayload, options);\n        await this._paymentIntegrationService.initializeOffsitePayment({\n            methodId,\n            gatewayId,\n            instrumentId,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        });\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const order = state.getOrder();\n        const status = state.getPaymentStatus();\n\n        if (\n            order &&\n            (status === PaymentStatusTypes.ACKNOWLEDGE || status === PaymentStatusTypes.FINALIZE)\n        ) {\n            await this._paymentIntegrationService.finalizeOrder(options);\n\n            return;\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.gatewayId === 'barclaycard';\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport OffsitePaymentStrategy from './offsite-payment-strategy';\n\nconst createOffsitePaymentStrategy: PaymentStrategyFactory<OffsitePaymentStrategy> = (\n    paymentIntegrationService,\n) => new OffsitePaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createOffsitePaymentStrategy, [{ type: 'PAYMENT_TYPE_HOSTED' }]);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import { type AccountInstrument, type AchInstrument, type BankInstrument, type PayPalInstrument } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, PureComponent, type ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { IconNewAccount, IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument | AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default AccountInstrumentSelect;\n","import { type AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, type ModalTriggerModalProps } from '../../ui/modal';\n\nimport AccountInstrumentSelect from './AccountInstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createExternalPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/external';\nimport { createHummPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/humm';\nimport { createOffsitePaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/offsite';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\n\nimport { type MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps, type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { type WithPaymentProps } from '../withPayment';\n\nexport interface HostedPaymentMethodProps {\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface WithCheckoutHostedPaymentMethodProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nclass HostedPaymentMethod extends Component<\n    HostedPaymentMethodProps &\n        WithCheckoutHostedPaymentMethodProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                integrations: [\n                    createHummPaymentStrategy,\n                    createExternalPaymentStrategy,\n                    createOffsitePaymentStrategy,\n                ],\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            description,\n            isInitializing = false,\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = this.props;\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n        const { instruments } = this.props;\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = this.props;\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutHostedPaymentMethodProps,\n    HostedPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n                isPaymentDataSubmitted,\n            },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const cart = getCart();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !cart || !customer || !method) {\n            return null;\n        }\n\n        const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n        const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n        return {\n            instruments: trustedInstruments,\n            isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n            isInstrumentFeatureAvailable:\n                !isPaymentDataSubmitted(method.id, method.gateway) &&\n                isInstrumentFeatureAvailable({\n                    config,\n                    customer,\n                    paymentMethod: method,\n                }),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n        };\n    };\n};\n\nexport default connectFormik(\n    withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(HostedPaymentMethod))),\n);\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n"],"names":["toResolvableComponent","checkoutService","checkoutState","method","onUnhandledError","language","paymentForm","HostedPaymentComponent","deinitializePayment","initializePayment","gateway","id","props","description","isInitializing","noop","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","trustedShippingAddress","isUsingMultiShipping","data","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","cart","config","customer","Error","currentMethodInstruments","trustedInstruments","isNewAddress","length","isInstrumentFeatureAvailable","paymentMethod","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","useCallback","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","methodId","error","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","StandardError","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","OrderFinalizationNotRequiredError","ExternalPaymentStrategy","_formPoster","_paymentIntegrationService","execute","payload","options","payment","order","paymentData","submitOrder","submitPayment","value","body","_isAdditionalActionRequired","Promise","reject","additional_action_required","redirect_url","redirectUrl","finalize","initialize","resolve","deinitialize","postForm","status","module","paymentIntegrationService","createFormPoster","resolveIds","assign","PaymentExecuteError","subtype","HummPaymentStrategy","formPoster","loadPaymentMethod","getState","getPaymentMethodOrThrow","initializationData","processable","isOffsiteRedirectResponse","handleOffsiteRedirectResponse","response","url","provider_data","JSON","parse","partialResponse","partialBody","PaymentStatusTypes","__webpack_require__","isHostedInstrumentLike","instrument","shouldSaveInstrument","shouldSetAsDefaultInstrument","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","ACKNOWLEDGE","FINALIZE","INITIALIZE","e","OffsitePaymentStrategy","orderPayload","_shouldSubmitFullPayload","Boolean","initializeOffsitePayment","state","getOrder","getPaymentStatus","finalizeOrder","withIconContainer","height","viewBox","width","xmlns","clipRule","fill","fillRule","AccountInstrumentSelect","PureComponent","componentDidMount","selectedInstrumentId","setTimeout","updateFieldValue","componentDidUpdate","prevProps","prevSelectedInstrumentId","componentWillUnmount","field","render","otherFieldProps","DropdownTrigger","dropdown","AccountInstrumentMenu","AccountInstrumentSelectButton","testId","form","setFieldValue","map","AccountInstrumentOption","onClick","AccountInstrumentUseNewButton","isBankAccountInstrument","BankInstrumentMenuItem","AccountInstrumentMenuItem","handleClick","externalId","IconPaypal","additionalClassName","size","Medium","TranslatedString","accountNumber","issuer","memo","renderInput","renderModal","ManageInstrumentsModal","Fieldset","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","TranslatedHtml","HostedPaymentMethod","Component","setState","integrations","LoadingOverlay","StoreInstrumentFieldset","connectFormik","withLanguage","withPayment","withCheckout","context","checkoutSettings","isCardVaultingEnabled","isVaultingEnabled","isGuest"],"sourceRoot":""}