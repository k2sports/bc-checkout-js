{"version":3,"file":"blue-snap-v2-payment-method-86c51b81.js","mappings":"6NAiGA,MAmHA,EAnH6EA,IACzE,MAAM,YACFC,EAAW,eACXC,GAAiB,EAAK,kBACtBC,EAAiB,OACjBC,EAAM,iBACNC,EAAmB,EAAAC,KAAI,oBACvBC,GACAP,GAEGQ,EAAuBC,IAA4B,IAAAC,WAAS,IAC5DC,EAAoBC,IAAyB,IAAAF,YAE9CG,EAhEV,SACIb,GAEA,MAAMc,GAA2B,SAAW,CAACC,EAAmC,KAC5EA,EAAYC,OAAO,OAEjBC,GAA2B,SAAW,CAACF,EAAmC,KAC5EA,EAAYC,QAAO,EAAGE,4BAA6BA,OAEjD,gBAAEC,EAAe,cAAEC,EAAa,qBAAEC,GAAuB,EAAK,OAAEjB,GAAWJ,GAG7EsB,MAAM,QACFC,EAAO,UACPC,EAAS,YACTC,EAAW,eACXC,EAAc,sBACdC,EAAqB,uBACrBC,GAEJC,UAAU,qBAAEC,IACZV,EAEEW,EAAOR,IACPS,EAASR,IACTS,EAAWR,IAEjB,IAAKO,IAAWD,IAASE,EACrB,MAAM,IAAIC,MAAM,0BAGpB,MAAMC,EAA2BrB,EAAyBY,EAAetB,IACnEgC,EAAqBnB,EAAyBkB,GAEpD,MAAO,CACHpB,YAAaqB,EACbC,aAA4C,IAA9BD,EAAmBE,QAAgBH,EAAyBG,OAAS,EACnFC,8BACKX,EAAuBxB,EAAOoC,GAAIpC,EAAOqC,WAC1C,OAA6B,CACzBT,SACAC,WACAZ,uBACAqB,cAAetC,IAEvB0B,qBAAsBA,IACtBH,sBAAuBA,IACvBgB,gBAAiBxB,EAAgBwB,gBAEzC,CAeyBC,CAAmC5C,IAClD,qBACF8B,EAAoB,YACpBf,EAAW,aACXsB,EACAE,6BAA8BM,EAAgC,gBAC9DF,GACA9B,EAEEiC,GAAuB,IAAAC,cAAY,KACrC,IAAIvC,GAA0BO,EAAYuB,OAI1C,OAAO,IAAAU,MAAKjC,EAAa,CAAEkC,mBAAmB,KAAWlC,EAAY,KACtE,CAACP,EAAuBO,IAErBmC,GAAyB,IAAAH,cAAY,KACvCtC,GAAyB,GACzBG,OAAsBuC,KACvB,IAEGC,GAAyB,IAAAL,cAC1BP,IACG/B,GAAyB,GACzBG,GAAsB,IAAAoC,MAAKjC,EAAa,CAAEsC,YAAab,OAE3D,CAACzB,KAGL,IAAAuC,YAAU,MACqC,iDACvC,UACUnD,EAAkB,CACpBoD,UAAWnD,EAAOqC,QAClBe,SAAUpD,EAAOoC,KAGjBK,UACMF,IAEd,CAAE,MAAOc,GACLpD,EAAiBoD,EACrB,CACJ,IAIO,MAC0C,iDACzC,UACUlD,EAAoB,CACtBgD,UAAWnD,EAAOqC,QAClBe,SAAUpD,EAAOoC,IAEzB,CAAE,MAAOiB,GACLpD,EAAiBoD,EACrB,CACJ,OAKL,IAEH,MAAMC,EAA4B/C,GAAsBmC,IAClDa,EAAYzD,GAAkB4B,EAC9B8B,EACFf,IAAqC9B,EAAYuB,OAAS,GAAKD,GAEnE,OAAKpC,GAAgB4C,EAKjB,gBAAC,IAAc,CAACgB,wBAAsB,EAACF,UAAWA,GAC9C,uBAAKG,UAAU,uCACV7D,EAEA2D,GACG,gBAAC,EAAAG,EAAyB,CACtBhD,YAAaA,EACbiD,mBAAoBZ,EACpBa,mBAAoBf,EACpBvC,mBAAoB+C,IAI3Bb,GACG,gBAAC,IAAuB,CACpBqB,aACIR,GAA6BA,EAA0BL,YAE3DtC,YAAaA,EACboD,qBAAqB,MAvB9B,K,uQCrLHC,E,oGAAZ,SAAYA,GACR,uCACA,qCACA,yCACA,sCACH,CALD,CAAYA,IAAAA,EAAsB,K,qCCYlC,MAuBA,GAAe,IAAAC,OAvBuE,I,IAAA,UAClFC,EAAS,iBACTC,GAAgB,EACbC,GAAI,cAH2E,kCAKlF,MAAMC,GAAc,IAAA1B,cAChB,EAAG2B,WACC,gBAACC,EAAA,EAAY,iBACLD,EAAK,mBACQ,GAAGA,EAAME,cAAcF,EAAME,2BAC9CC,aAAa,YACbC,UAAWC,EAAA,EAAqBC,UAChCxC,GAAIkC,EAAME,KACVK,uBAAwBV,EACxBD,UAAWA,MAGnB,CAACA,EAAWC,IAGhB,OAAO,gBAACW,EAAA,EAAS,eAACC,MAAOV,GAAiBD,OCK9C,GAAe,IAAAH,OAxBuE,I,IAClFe,SAAS,YAAEC,EAAW,MAAEC,EAAK,KAAEC,GAAM,iBACrChB,GAAgB,EACbC,GAAI,cAH2E,gCAKlF,MAAMgB,GAAe,IAAAzC,cACjB,EAAG2B,WACC,gBAACC,EAAA,EAAY,iBACLD,EAAK,mBACQ,GAAGA,EAAME,cAAcF,EAAME,2BAC9CE,UAAWC,EAAA,EAAqBU,SAChCjD,GAAIkC,EAAME,KACVK,uBAAwBV,EACxBa,QAASE,EACTI,YAAaL,EACbE,KAAMA,MAGd,CAACF,EAAaC,EAAOC,EAAMhB,IAG/B,OAAO,gBAACW,EAAA,EAAS,iBAAKV,EAAI,CAAEW,MAAOK,QCEvC,GAAe,IAAAnB,OAvBmE,I,IAAA,UAC9EC,EAAS,iBACTC,EAAgB,aAChBM,GAAY,EACTL,GAAI,cAJuE,iDAM9E,MAAMC,GAAc,IAAA1B,cAChB,EAAG2B,WACC,gBAACC,EAAA,EAAY,iBACLD,EAAK,mBACQ,GAAGA,EAAME,cAAcF,EAAME,2BAC9CC,aAAcA,EACdrC,GAAIkC,EAAME,KACVK,uBAAwBV,EACxBD,UAAWA,MAGnB,CAACA,EAAWC,EAAkBM,IAGlC,OAAO,gBAACK,EAAA,EAAS,eAACC,MAAOV,GAAiBD,OCkD9C,GAAe,IAAAH,OApEsE,EACjFsB,WACApB,mBACAqB,8BAEA,MAAMR,EAAU,CACZC,YAAaM,EAASE,UAAU,qDAChCP,MAAO,CACH,CACIQ,MAAOH,EAASE,UACZ,wEAEJE,MAAO3B,EAAuB4B,kBAElC,CACIF,MAAOH,EAASE,UACZ,uEAEJE,MAAO3B,EAAuB6B,iBAElC,CACIH,MAAOH,EAASE,UACZ,yEAEJE,MAAO3B,EAAuB8B,mBAElC,CACIJ,MAAOH,EAASE,UACZ,wEAEJE,MAAO3B,EAAuB+B,oBAK1C,OACI,gCACI,gBAAC,EAAyB,CACtBC,aAAcT,EAASE,UAAU,gDACjCvB,UAAW,GACXM,KAAK,gBACLL,iBAAkBA,IAGtB,gBAAC,EAAyB,CACtB6B,aAAcT,EAASE,UAAU,gDACjCvB,UAAW,EACXM,KAAK,gBACLL,iBAAkBA,IAGtB,gBAAC,EAAyB,CACtB6B,aAAcT,EAASE,UAAU,8CACjCjB,KAAK,cACLQ,QAASA,EACTb,iBAAkBA,IAErBqB,GACG,gBAAC,EAAuB,CACpBQ,aAAcT,EAASE,UAAU,8BACjCjB,KAAK,cACLL,iBAAkBA,Q,gDCrEtC,MAwEA,EAxE2BnE,IACvB,MAAOiG,EAAmBC,IAAwB,IAAA5F,aAE5C,cAAEU,IAAkB,SACpBa,EAAWb,EAAcE,KAAKG,cAC9BV,EAAcK,EAAcE,KAAKI,eAAetB,IAEhD,YAAEmG,IAAgB,UAClB,cAAEC,GAAkBD,EAEpBE,GAAqB,IAAAC,UAAQ,IAC3B3F,EACOA,EAAYC,OAAO2F,EAAA,GAGvB,IACR,CAAC5F,IACEwB,IACDN,aAAQ,EAARA,EAAU2E,UAAWC,QAAQzG,EAAO4B,OAAO8E,mBAC1ClD,EACFrB,GAAgCkE,EAAmBnE,OAAS,EAC1DyE,EAA4BnD,IAAiCyC,EAE7DvD,GAAuB,IAAAC,cAAY,KACrC,IAAK0D,EAAmBnE,OACpB,OAOJ,OAJiCmE,EAAmBzF,QAChD,EAAGiC,uBAAwBA,IAGC,IAAMwD,EAAmB,KAC1D,CAACA,KAEJ,IAAAnD,YAAU,KACNgD,EAAqB/D,EAA+BO,SAAyBK,KAC9E,CAACZ,EAA8BO,KAElC,IAAAQ,YAAU,KACDM,GACD4C,EAAc,eAAgB,MAEnC,CAACA,EAAe5C,IAEnB,MAAMR,GAAyB,IAAAL,cAC1BP,IACG8D,GAAqB,IAAAtD,MAAKyD,EAAoB,CAAEpD,YAAab,KAC7DgE,EAAc,eAAgBhE,GAC9BgE,EAAc,gCAAgC,KAElD,CAACC,EAAoBD,IAGnBtD,GAAyB,IAAAH,cAAY,KACvCuD,OAAqBnD,GACrBqD,EAAc,eAAgB,IAC9BA,EAAc,wBAAwB,GACtCA,EAAc,gCAAgC,KAC/C,CAACA,IAEJ,MAAO,CACHC,qBACAJ,oBACAjD,yBACAF,yBACAX,+BACAqB,+BACAmD,8B,0BCvER,SAAe,SAAQ,SACnBpB,EACAqB,EACApB,GAEA,MAAMqB,EAAS,OAAH,wBACHD,EAA6D,CAAC,EAAzC,CAAE9C,cAAc,UAASgD,aAC/CF,EACE,OAAD,sBACKG,eAAe,UACVD,SACGvB,EAASE,UAAU,uDAEtBuB,QACG,QACAzB,EAASE,UAAU,wDAEtBwB,IAAI,EAAG1B,EAASE,UAAU,kDAC1ByB,IACG,GACA3B,EAASE,UAAU,sDAE3B0B,eAAe,UACVL,SACGvB,EAASE,UAAU,uDAEtBuB,QACG,QACAzB,EAASE,UAAU,wDAEtBvD,OACG,EACAqD,EAASE,UAAU,mDAEvBD,EACE,CACI4B,aAAa,UACRN,SAASvB,EAASE,UAAU,wCAC5ByB,IACG,GACA3B,EAASE,UACL,qDAIhB,CAAC,GAAE,CACT4B,aAAa,UAASP,SAClBvB,EAASE,UAAU,uDAG3B,CAAC,GAGX,OAAO,QAAOoB,EAClB,ICqGA,GAAe,EAAAS,EAAA,IA7I+D,EAC1EtH,SACAe,iBAAmBhB,oBAAmBI,sBAAqBoC,mBAC3DvB,eACIE,MAAQK,wBAAuBF,cAAakG,qBAC5C9F,UAAYC,yBAEhByE,aAAeqB,gBAAeC,sBAAqBrB,gBAAesB,iBAClEnC,WACAtF,uBAEA,MAAO0H,EAAUC,IAAe,IAAAtH,WAAS,GACnCuH,GAAW,IAAAlF,cACZmF,GAA+BF,GAAaE,IAC7C,CAACF,KAGL,IAAA1E,YACI,IAAMsE,EAAcxH,EAAQuB,KAA2BoG,IACvD,CAACH,EAAeG,EAAUpG,EAAuBvB,IAGrD,MAAM+H,GAAgB,IAAApF,cAAY,KAAY,uDACpC5C,EAAkB,CACpBoD,UAAWnD,EAAOqC,QAClBe,SAAUpD,EAAOoC,IAEzB,KAAG,CAACrC,EAAmBC,IAEjBgI,GAAkB,IAAArF,cAAY,KAAY,uDACtCxC,EAAoB,CACtBgD,UAAWnD,EAAOqC,QAClBe,SAAUpD,EAAOoC,IAEzB,KAAG,CAACjC,EAAqBH,EAAOqC,QAASrC,EAAOoC,MAEhD,IAAAc,YAAU,KACD6E,IAEE,KACEC,OAEV,CAACA,EAAiBD,KAErB,IAAA7E,YAAU,KACN,MAUM,QAAEsD,GAAYnF,KAAiB,CAAC,GAEPmF,GAAWxG,EAAO4B,OAAO8E,oBAZb,iDACvC,UACUnE,GACV,CAAE,MAAOc,GACDA,aAAiBvB,OACjB7B,EAAiBoD,EAEzB,CACJ,MAUD,IAEH,MAAM,mBACFgD,EAAkB,kBAClBJ,EAAiB,uBACjBjD,EAAsB,uBACtBF,EAAsB,6BACtBX,EAA4B,6BAC5BqB,EAA4B,0BAC5BmD,GACA,EAAkB3G,GAEhBuD,EAAY7B,IAEZuG,GAAkBzE,GAAgCmD,EAClDU,EAAcK,IAAgBL,YAC9B7B,EACF6B,IAAgBrD,EAAuB8B,mBACvCuB,IAAgBrD,EAAuB+B,iBAiB3C,OAfA,IAAA7C,YAAU,K,MAEFkD,EAAc,cADdZ,EACgD,QAAnB,EAAA+B,WAAmB,eAAEW,aAErBnF,KAElC,CAACyC,EAAyBY,EAAemB,KAE5C,IAAArE,YAAU,KACNuE,EACIzH,EACAmI,EAAuB5C,EAAU0C,EAAgBzC,MAEtD,CAACD,EAAU0C,EAAgBzC,EAAyBiC,EAAqBzH,IAGxE,gBAACoI,EAAA,EAAc,CAAC3E,wBAAsB,EAACF,UAAWA,GAC9C,gBAAC8E,EAAA,EAAQ,CACLC,OACI,gBAACC,EAAA,EAAM,CAACC,QAAM,GACTjD,EAASE,UAAU,mDAG5BgD,MAAO,CAAEC,cAAe,SAEvBlF,GACG,uBAAKE,UAAU,iCACX,gBAACiF,EAAAhF,EAAyB,CACtBhD,YAAa0F,EACbzC,mBAAoBZ,EACpBa,mBAAoBf,EACpBvC,mBAAoB0F,KAI/BgC,GACG,gBAAC,EAAyB,CACtB1C,SAAUA,EACVC,wBAAyBA,IAGjC,gBAACoD,EAAA,EAAiB,CACd5C,aAAcT,EAASE,UAAU,sCACjCjB,KAAK,oBACLqD,SAAUA,IAEb1F,GACG,gBAAC0G,EAAA,EAAuB,CACpB/E,aAAcmC,aAAiB,EAAjBA,EAAmBhD,YACjCtC,YAAa0F,EACbtC,qBAAmB,QAUvC,CAAC,CAAE3B,GAAI,MAAOC,QAAS,oB,eCxJ3B,MAcA,GAAe,EAAAiF,EAAA,IAdwE,I,IAAA,gBACnFvG,GAAe,EACZqD,GAAI,cAF4E,qBAInF,OACI,gBAAC0E,EAAA,EAAsB,iBACf1E,EAAI,CACRrD,gBAAiBA,EACjBZ,oBAAqBY,EAAgBZ,oBACrCJ,kBAAmBgB,EAAgBhB,uBAO3C,CAAC,CAAEsC,QAAS,oBCAH0G,EACTC,IAEA,QAE0B,iBAAXA,GACI,OAAXA,KACE,4BAA6BA,GACe,iBAAnCA,EAAOC,yBACb,iBAAkBD,IAxBaE,EAwB6BF,EAAOG,aArBxEC,MAAMC,QAAQH,IACdA,EAAMhH,QACN,aAAcgH,EAAM,IACpB,eAAgBA,EAAM,MANa,IAACA,G,eCHhD,MA0EA,EA1E4BlJ,IACxB,MAAOiG,EAAmBC,IAAwB,IAAA5F,aAE5C,cAAEU,IAAkB,SACpBa,EAAWb,EAAcE,KAAKG,cAC9BV,EAAcK,EAAcE,KAAKI,eAAetB,IAEhD,YAAEmG,IAAgB,UAClB,cAAEC,GAAkBD,EAEpBE,GAAqB,IAAAC,UAAQ,IAC3B3F,EACOA,EAAYC,OAAO0I,EAAA,GAGvB,IACR,CAAC3I,IAEEwB,IACDN,aAAQ,EAARA,EAAU2E,UAAWC,QAAQzG,EAAO4B,OAAO8E,mBAE1ClD,EACFrB,GAAgCkE,EAAmBnE,OAAS,EAC1DyE,EAA4BnD,IAAiCyC,EAE7DvD,GAAuB,IAAAC,cAAY,KACrC,IAAK0D,EAAmBnE,OACpB,OAOJ,OAJiCmE,EAAmBzF,QAChD,EAAGiC,uBAAwBA,IAGC,IAAMwD,EAAmB,KAC1D,CAACA,KAEJ,IAAAnD,YAAU,KACNgD,EAAqB/D,EAA+BO,SAAyBK,KAC9E,CAACZ,EAA8BO,KAElC,IAAAQ,YAAU,KACDM,GACD4C,EAAc,eAAgB,MAEnC,CAACA,EAAe5C,IAEnB,MAAMR,GAAyB,IAAAL,cAC1BP,IACG8D,GAAqB,IAAAtD,MAAKyD,EAAoB,CAAEpD,YAAab,KAC7DgE,EAAc,eAAgBhE,GAC9BgE,EAAc,gCAAgC,KAElD,CAACC,EAAoBD,IAGnBtD,GAAyB,IAAAH,cAAY,KACvCuD,OAAqBnD,GACrBqD,EAAc,eAAgB,IAC9BA,EAAc,wBAAwB,GACtCA,EAAc,gCAAgC,KAC/C,CAACA,IAEJ,MAAO,CACHC,qBACAJ,oBACAjD,yBACAF,yBACAX,+BACAqB,+BACAmD,8BCzER,GAAe,SAAQ,SACnBpB,EACAqB,GAEA,MAAMC,EAAS,OAAH,wBACHD,EAA6D,CAAC,EAAzC,CAAE9C,cAAc,UAASgD,aAC/CF,EACE,CACI2C,MAAM,UACDvC,QACG,kBACAzB,EAASE,UAAU,mCAAoC,CAAEC,MAAO,UAEnEoB,SAASvB,EAASE,UAAU,yCACjC+D,WAAW,UAAS1C,SAChBvB,EAASE,UAAU,sCAEvBgE,UAAU,UAAS3C,SACfvB,EAASE,UAAU,sCAG3B,CAAC,GAGX,OAAO,QAAOoB,EAClB,IC0IA,GAAe,EAAAS,EAAA,IArJiE1H,IAC5E,MAAM,OACFI,EACAe,iBAAiB,kBAAEhB,EAAiB,oBAAEI,EAAmB,gBAAEoC,GAC3DvB,eACIE,MAAM,sBAAEK,GACRE,UAAU,qBAAEC,IAEhByE,aAAa,cAAEqB,EAAa,oBAAEC,GAAqB,SACnDlC,EAAQ,iBACRtF,GACAL,EAEJ,IAAKmJ,EAAmC/I,EAAO0J,oBAC3C,MAAM,IAAI5H,MAAM,qCAGpB,MAAO6F,EAAUC,IAAe,IAAAtH,WAAS,GACnCqJ,GAAqB,IAAAhH,cACtBmF,GAA+BF,GAAaE,IAC7C,CAACF,KAGL,IAAA1E,YACI,IAAMsE,EAAcxH,EAAQuB,KAA2BoG,IACvD,CAACH,EAAeG,EAAUpG,EAAuBvB,IAGrD,MAAM4J,GAAiB,IAAAjH,cAAY,KAAY,uDACrC5C,EAAkB,CACpBoD,UAAWnD,EAAOqC,QAClBe,SAAUpD,EAAOoC,IAEzB,KAAG,CAACrC,EAAmBC,IAEjB6J,GAAmB,IAAAlH,cAAY,KAAY,uDACvCxC,EAAoB,CACtBgD,UAAWnD,EAAOqC,QAClBe,SAAUpD,EAAOoC,IAEzB,KAAG,CAACjC,EAAqBH,EAAOqC,QAASrC,EAAOoC,MAEhD,IAAAc,YAAU,KACD0G,IAEE,KACEC,OAEV,CAACA,EAAkBD,IAEtB,MAAM,mBACFvD,EAAkB,kBAClBJ,EAAiB,uBACjBjD,EAAsB,uBACtBF,EAAsB,6BACtBX,EAA4B,6BAC5BqB,EAA4B,0BAC5BmD,GACA,EAAmB3G,GAEjBiI,GAAkBzE,GAAgCmD,GAExD,IAAAzD,YAAU,KACNuE,EAAoBzH,EAAQ8J,EAAwBvE,EAAU0C,MAC/D,CAAC1C,EAAU0C,EAAgBR,EAAqBzH,KAEnD,IAAAkD,YAAU,KAWFf,IAVuC,iDACvC,UACUI,GACV,CAAE,MAAOc,GACDA,aAAiBvB,OACjB7B,EAAiBoD,EAEzB,CACJ,MAMD,IAEH,MAAME,EAAY7B,IAElB,OACI,gBAAC0G,EAAA,EAAc,CAAC3E,wBAAsB,EAACF,UAAWA,GAC9C,gBAAC8E,EAAA,EAAQ,CACLC,OACI,gBAACC,EAAA,EAAM,CAACC,QAAM,GACTjD,EAASE,UAAU,8CAG5BgD,MAAO,CAAEC,cAAe,SAEvBlF,GACG,uBAAKE,UAAU,iCACX,gBAACiF,EAAAhF,EAAyB,CACtBhD,YAAa0F,EACbzC,mBAAoBZ,EACpBa,mBAAoBf,EACpBvC,mBAAoB0F,KAI/BgC,GACG,gCACI,gBAAC,EAAuB,CACpBxD,aAAa,OACbuB,aAAcT,EAASE,UAAU,sCACjCjB,KAAK,OACLL,kBAAkB,IAEtB,gBAAC,EAAuB,CACpB6B,aAAcT,EAASE,UAAU,4BACjCjB,KAAK,YACLL,kBAAkB,IAEtB,gBAAC,EAAuB,CACpB6B,aAAcT,EAASE,UAAU,2BACjCjB,KAAK,WACLL,kBAAkB,KAK9B,gBAACyE,EAAA,EAAiB,CACd5C,aAAcT,EAASE,UACnB,kDACA,CACIsE,aAAc/J,EAAO0J,mBAAmBT,0BAGhDzE,KAAK,oBACLqD,SAAU8B,IAGbxH,GACG,gBAAC0G,EAAA,EAAuB,CACpB/E,aAAcmC,aAAiB,EAAjBA,EAAmBhD,YACjCtC,YAAa0F,EACbtC,qBAAmB,QAUvC,CAAC,CAAE3B,GAAI,oBAAqBC,QAAS,oBCrKzC,GAAe,SAAQ,SAAkCkD,GACrD,OAAO,QAAO,CACVyE,KAAK,UAASlD,SAASvB,EAASE,UAAU,gCAElD,IC+DA,GAAe,EAAA6B,EAAA,IA1DiE,EAC5EtH,SACAe,iBAAmBhB,oBAAmBI,uBACtCgG,aAAesB,uBACflC,eAEA,IAAKwD,EAAmC/I,EAAO0J,oBAC3C,MAAM,IAAI5H,MAAM,qCAGpB,MAAM,aAAEqH,GAAiBnJ,EAAO0J,mBAE1BO,EAA4Bd,EAAae,KAAKC,IAAW,CAC3DxE,MAAOwE,EAAOC,SACd1E,MAAOyE,EAAOE,eAGZC,GAAkB,IAAA3H,cAAY,KAAY,iDAC5C8E,EAAoBzH,EAAQuK,EAAyBhF,UAE/CxF,EAAkB,CACpBoD,UAAWnD,EAAOqC,QAClBe,SAAUpD,EAAOoC,IAEzB,KAAG,CAACrC,EAAmBC,EAAQyH,EAAqBlC,IAE9CiF,GAAoB,IAAA7H,cAAY,KAAY,uDACxCxC,EAAoB,CACtBgD,UAAWnD,EAAOqC,QAClBe,SAAUpD,EAAOoC,IAEzB,KAAG,CAACjC,EAAqBH,EAAOqC,QAASrC,EAAOoC,KAUhD,OARA,IAAAc,YAAU,KACDoH,IAEE,KACEE,OAEV,CAACA,EAAmBF,IAGnB,gBAACjC,EAAA,EAAQ,CACLC,OAAQ,gBAACC,EAAA,EAAM,CAACC,QAAM,GAAEjD,EAASE,UAAU,wBAC3CgD,MAAO,CAAEC,cAAe,SAExB,gBAAC,EAAyB,CACtB1C,aAAcT,EAASE,UAAU,uBACjCjB,KAAK,MACLQ,QAAS,CACLC,YAAaM,EAASE,UAAU,4BAChCP,MAAO+E,QASvB,CAAC,CAAE7H,GAAI,QAASC,QAAS,oB,eC7C7B,MA8EA,GAAe,EAAAiF,EAAA,IA9EyD,I,IAAA,gBACpEvG,EAAe,cACfC,EAAa,OACbhB,EAAM,YACNmG,GAAW,EACR/B,GAAI,cAL6D,4DAOpE,MAAOqG,EAAiBC,IAAsB,IAAApK,WAAkB,IACzDqK,EAAoBC,IAAyB,IAAAtK,YAC9CuK,GAAM,IAAAC,QAAmC,CAC3CC,uBAAuB,IAAAC,eAGrBC,GAA4B,IAAAtI,cAAY,KAC1CiI,OAAsB7H,GAElB8H,EAAIK,QAAQC,0BACZN,EAAIK,QAAQC,0BACZN,EAAIK,QAAQC,6BAA0BpI,KAE3C,IAEGqI,GAA8B,IAAAzI,cAC/BqC,GACUjE,EAAgBhB,kBAAkB,OAAD,wBACjCiF,GAAO,CACVqG,WAAY,CACR,MAAAC,CAAOC,EAA4BC,GAC/BZ,EAAsBW,GACtBb,GAAmB,GACnBG,EAAIK,QAAQC,wBAA0BK,CAC1C,EACA/C,MAAO,CACHgD,OAAQ,sBACRC,OAAQ,OACRC,MAAO,aAKvB,CAAC5K,IAGC6K,GAA2B,IAAAjJ,cAAY,KACrCkI,EAAIK,QAAQH,sBAAsBG,SAAWP,IAC7CA,EAAmBkB,iBAAiB,QAAQ,KACxCnB,GAAmB,MAEvBG,EAAIK,QAAQH,sBAAsBG,QAAQY,YAAYnB,MAE3D,CAACA,IAEJ,OACI,gCACI,gBAAC7B,EAAA,EAAsB,iBACf1E,EAAI,CACRrD,gBAAiBA,EACjBC,cAAeA,EACfb,oBAAqBY,EAAgBZ,oBACrCJ,kBAAmBqL,EACnBpL,OAAQA,EACRmG,YAAaA,KAEjB,gBAAC4F,EAAA,EAAK,CACFC,yBAAyB,kBACzBC,SAAUtB,EACVuB,YAAaN,EACbO,eAAgBlB,EAChBmB,uBAAuB,GAEvB,gBAAChE,EAAA,EAAc,CAAC7E,UAAWkH,GACvB,uBAAKI,IAAKA,EAAIK,QAAQH,6BAStC,CAAC,CAAE1I,QAAS,gBCxGhB,GAAe,SAAQ,SACnBkD,GAEA,OAAO,QAAO,CACVgE,MAAM,UACDvC,QACG,kBACAzB,EAASE,UAAU,mCAAoC,CAAEC,MAAO,UAEnEoB,SAASvB,EAASE,UAAU,uCAEzC,ICiDA,GAAe,EAAA6B,EAAA,IAnDqE,EAChFtH,SACAuF,WACAY,aAAesB,uBACf1G,iBAAmBhB,oBAAmBI,2BAEtC,IAAK4I,EAAmC/I,EAAO0J,oBAC3C,MAAM,IAAI5H,MAAM,qCAGpB,MAAMuK,GAAsB,IAAA1J,cAAY,KAAY,iDAChD8E,EAAoBzH,EAAQsM,EAA6B/G,UAEnDxF,EAAkB,CACpBoD,UAAWnD,EAAOqC,QAClBe,SAAUpD,EAAOoC,IAEzB,KAAG,CAACrC,EAAmBwF,EAAUvF,EAAQyH,IAEnC8E,GAAwB,IAAA5J,cAAY,KAAY,uDAC5CxC,EAAoB,CACtBgD,UAAWnD,EAAOqC,QAClBe,SAAUpD,EAAOoC,IAEzB,KAAG,CAACjC,EAAqBH,EAAOqC,QAASrC,EAAOoC,KAUhD,OARA,IAAAc,YAAU,KACDmJ,IAEE,KACEE,OAEV,CAACA,EAAuBF,IAGvB,gBAAChE,EAAA,EAAQ,CACLC,OACI,gBAACC,EAAA,EAAM,CAACC,QAAM,GAAEjD,EAASE,UAAU,uCAEvCgD,MAAO,CAAEC,cAAe,SAExB,gBAAC,EAAuB,CACpBjE,aAAa,OACbuB,aAAcT,EAASE,UAAU,sCACjCjB,KAAK,OACLL,kBAAkB,OAQ9B,CAAC,CAAE/B,GAAI,cAAeC,QAAS,mB,kBCzDpB,SAASF,GAA6B,OACjDP,EAAM,SACNC,EAAQ,qBACRZ,EAAoB,cACpBqB,IAEA,SACKV,EAAO4K,iBAAiBC,wBACxBnK,EAAcV,OAAO8E,mBACtB7E,EAAS2E,SACTvF,EAMR,C","sources":["webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/constants.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectNumberField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectSelectField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectTextField.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/fields/BlueSnapDirectEcpFieldset.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useEcpInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getEcpValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectEcpPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectAlternativePaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectInitializationData.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/hooks/useSepaInstruments.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getSepaValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectSepaPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getIdealValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectIdealPaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapV2PaymentMethod.tsx","webpack://checkout/./packages/bluesnap-direct-integration/src/validation-schemas/getPayByBankValidationSchema.ts","webpack://checkout/./packages/bluesnap-direct-integration/src/BlueSnapDirectPayByBankPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts"],"sourcesContent":["import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","export enum BluesnapECPAccountType {\n    ConsumerChecking = 'CONSUMER_CHECKING',\n    ConsumerSavings = 'CONSUMER_SAVINGS',\n    CorporateChecking = 'CORPORATE_CHECKING',\n    CorporateSavings = 'CORPORATE_SAVINGS',\n}\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectNumberFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectNumberField: FunctionComponent<BlueSnapDirectNumberFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete=\"cc-number\"\n                fieldType={DynamicFormFieldType.TELEPHONE}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectNumberField);\n","import { type FormFieldOptions } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicFormFieldType, DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectSelectFieldProps {\n    labelContent: string;\n    name: string;\n    options: FormFieldOptions;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectSelectField: FunctionComponent<BlueSnapDirectSelectFieldProps> = ({\n    options: { helperLabel, items, rows },\n    useFloatingLabel,\n    ...rest\n}) => {\n    const renderSelect = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                fieldType={DynamicFormFieldType.DROPDOWM}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                options={items}\n                placeholder={helperLabel}\n                rows={rows}\n            />\n        ),\n        [helperLabel, items, rows, useFloatingLabel],\n    );\n\n    return <FormField {...rest} input={renderSelect} />;\n};\n\nexport default memo(BlueSnapDirectSelectField);\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { DynamicInput, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface BlueSnapDirectTextFieldProps {\n    labelContent: string;\n    maxLength?: number;\n    name: string;\n    autoComplete?: string;\n    useFloatingLabel?: boolean;\n}\n\nconst BlueSnapDirectTextField: FunctionComponent<BlueSnapDirectTextFieldProps> = ({\n    maxLength,\n    useFloatingLabel,\n    autoComplete,\n    ...rest\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${field.name}-label ${field.name}-field-error-message`}\n                autoComplete={autoComplete}\n                id={field.name}\n                isFloatingLabelEnabled={useFloatingLabel}\n                maxLength={maxLength}\n            />\n        ),\n        [maxLength, useFloatingLabel, autoComplete],\n    );\n\n    return <FormField input={renderInput} {...rest} />;\n};\n\nexport default memo(BlueSnapDirectTextField);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, memo } from 'react';\n\nimport { BluesnapECPAccountType } from '../constants';\n\nimport BlueSnapDirectNumberField from './BlueSnapDirectNumberField';\nimport BlueSnapDirectSelectField from './BlueSnapDirectSelectField';\nimport BlueSnapDirectTextField from './BlueSnapDirectTextField';\n\nexport interface BlueSnapDirectEcpFieldsetProps {\n    language: LanguageService;\n    useFloatingLabel?: boolean;\n    shouldRenderCompanyName: boolean;\n}\n\nconst BlueSnapDirectEcpFieldset: FunctionComponent<BlueSnapDirectEcpFieldsetProps> = ({\n    language,\n    useFloatingLabel,\n    shouldRenderCompanyName,\n}) => {\n    const options = {\n        helperLabel: language.translate('payment.bluesnap_direct_account_type_select.label'),\n        items: [\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_checking',\n                ),\n                value: BluesnapECPAccountType.ConsumerChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_consumer_savings',\n                ),\n                value: BluesnapECPAccountType.ConsumerSavings,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_checking',\n                ),\n                value: BluesnapECPAccountType.CorporateChecking,\n            },\n            {\n                label: language.translate(\n                    'payment.bluesnap_direct_account_type_select.option_corporate_savings',\n                ),\n                value: BluesnapECPAccountType.CorporateSavings,\n            },\n        ],\n    };\n\n    return (\n        <>\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_account_number.label')}\n                maxLength={17}\n                name=\"accountNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectNumberField\n                labelContent={language.translate('payment.bluesnap_direct_routing_number.label')}\n                maxLength={9}\n                name=\"routingNumber\"\n                useFloatingLabel={useFloatingLabel}\n            />\n\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.bluesnap_direct_account_type.label')}\n                name=\"accountType\"\n                options={options}\n                useFloatingLabel={useFloatingLabel}\n            />\n            {shouldRenderCompanyName && (\n                <BlueSnapDirectTextField\n                    labelContent={language.translate('address.company_name_label')}\n                    name=\"companyName\"\n                    useFloatingLabel={useFloatingLabel}\n                />\n            )}\n        </>\n    );\n};\n\nexport default memo(BlueSnapDirectEcpFieldset);\n","import { type AchInstrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useEcpInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isAchInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useEcpInstruments;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport default memoize(function getEcpValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n    shouldRenderCompanyName: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  accountNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_account_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_account_number.only_numbers'),\n                      )\n                      .min(4, language.translate('payment.bluesnap_direct_account_number.length'))\n                      .max(\n                          17,\n                          language.translate('payment.bluesnap_direct_account_number.length_max'),\n                      ),\n                  routingNumber: string()\n                      .required(\n                          language.translate('payment.bluesnap_direct_routing_number.is_required'),\n                      )\n                      .matches(\n                          /^\\d+$/,\n                          language.translate('payment.bluesnap_direct_routing_number.only_numbers'),\n                      )\n                      .length(\n                          9,\n                          language.translate('payment.bluesnap_direct_routing_number.length'),\n                      ),\n                  ...(shouldRenderCompanyName\n                      ? {\n                            companyName: string()\n                                .required(language.translate('address.company_name_required_error'))\n                                .max(\n                                    50,\n                                    language.translate(\n                                        'payment.bluesnap_direct_company_name.length_max',\n                                    ),\n                                ),\n                        }\n                      : {}),\n                  accountType: string().required(\n                      language.translate('payment.bluesnap_direct_account_type.is_required'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { type FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { BluesnapECPAccountType } from './constants';\nimport BlueSnapDirectEcpFieldset from './fields/BlueSnapDirectEcpFieldset';\nimport useEcpInstruments from './hooks/useEcpInstruments';\nimport getEcpValidationSchema from './validation-schemas/getEcpValidationSchema';\n\nconst BlueSnapDirectEcpPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n    checkoutState: {\n        data: { isPaymentDataRequired, getCustomer, getBillingAddress },\n        statuses: { isLoadingInstruments },\n    },\n    paymentForm: { disableSubmit, setValidationSchema, setFieldValue, getFormValues },\n    language,\n    onUnhandledError,\n}) => {\n    const [disabled, setDisabled] = useState(true);\n    const onChange = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeEcp = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeEcp = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeEcp();\n\n        return () => {\n            void deinitializeEcp();\n        };\n    }, [deinitializeEcp, initializeEcp]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useEcpInstruments(method);\n\n    const isLoading = isLoadingInstruments();\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n    const accountType = getFormValues().accountType;\n    const shouldRenderCompanyName =\n        accountType === BluesnapECPAccountType.CorporateChecking ||\n        accountType === BluesnapECPAccountType.CorporateSavings;\n\n    useEffect(() => {\n        if (shouldRenderCompanyName) {\n            setFieldValue('companyName', getBillingAddress()?.company);\n        } else {\n            setFieldValue('companyName', undefined);\n        }\n    }, [shouldRenderCompanyName, setFieldValue, getBillingAddress]);\n\n    useEffect(() => {\n        setValidationSchema(\n            method,\n            getEcpValidationSchema(language, shouldShowForm, shouldRenderCompanyName),\n        );\n    }, [language, shouldShowForm, shouldRenderCompanyName, setValidationSchema, method]);\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_electronic_check_label')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <BlueSnapDirectEcpFieldset\n                        language={language}\n                        shouldRenderCompanyName={shouldRenderCompanyName}\n                    />\n                )}\n                <CheckboxFormField\n                    labelContent={language.translate('payment.bluesnap_direct_permission')}\n                    name=\"shopperPermission\"\n                    onChange={onChange}\n                />\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectEcpPaymentMethod,\n    [{ id: 'ecp', gateway: 'bluesnapdirect' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BlueSnapDirectAlternativePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectAlternativePaymentMethod,\n    [{ gateway: 'bluesnapdirect' }],\n);\n","export interface BlueSnapDirectInitializationData {\n    sepaCreditorCompanyName: string;\n    idealIssuers: IdealIssuer[];\n}\n\ninterface IdealIssuer {\n    issuerId: string;\n    issuerName: string;\n}\n\nexport const isBlueSnapDirectIdealIssuerList = (array: unknown): array is IdealIssuer[] => {\n    if (\n        !(\n            Array.isArray(array) &&\n            array.length &&\n            'issuerId' in array[0] &&\n            'issuerName' in array[0]\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const isBlueSnapDirectInitializationData = (\n    object: unknown,\n): object is BlueSnapDirectInitializationData => {\n    if (\n        !(\n            typeof object === 'object' &&\n            object !== null &&\n            (('sepaCreditorCompanyName' in object &&\n                typeof object.sepaCreditorCompanyName === 'string') ||\n                ('idealIssuers' in object && isBlueSnapDirectIdealIssuerList(object.idealIssuers)))\n        )\n    ) {\n        return false;\n    }\n\n    return true;\n};\n","import { type BankInstrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isSepaInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useSepaInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<BankInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method);\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => {\n        if (instruments) {\n            return instruments.filter(isSepaInstrument);\n        }\n\n        return [];\n    }, [instruments]);\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n\n    const getDefaultInstrument = useCallback((): BankInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    };\n};\n\nexport default useSepaInstruments;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport default memoize(function getSepaValidationSchema(\n    language: LanguageService,\n    shouldRenderFields: boolean,\n): ObjectSchema {\n    const schema = {\n        ...(!shouldRenderFields ? { instrumentId: string().required() } : {}),\n        ...(shouldRenderFields\n            ? {\n                  iban: string()\n                      .matches(\n                          /^[a-zA-Z0-9]+$/i,\n                          language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n                      )\n                      .required(language.translate('payment.sepa_account_number_required')),\n                  firstName: string().required(\n                      language.translate('address.first_name_required_error'),\n                  ),\n                  lastName: string().required(\n                      language.translate('address.last_name_required_error'),\n                  ),\n              }\n            : {}),\n    };\n\n    return object(schema);\n});\n","import React, { type FunctionComponent, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField, Fieldset, Legend, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport useSepaInstruments from './hooks/useSepaInstruments';\nimport getSepaValidationSchema from './validation-schemas/getSepaValidationSchema';\n\nconst BlueSnapDirectSepaPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        method,\n        checkoutService: { initializePayment, deinitializePayment, loadInstruments },\n        checkoutState: {\n            data: { isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        },\n        paymentForm: { disableSubmit, setValidationSchema },\n        language,\n        onUnhandledError,\n    } = props;\n\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const [disabled, setDisabled] = useState(true);\n    const toggleSubmitButton = useCallback(\n        (shopperPermission: boolean) => setDisabled(!shopperPermission),\n        [setDisabled],\n    );\n\n    useEffect(\n        () => disableSubmit(method, isPaymentDataRequired() && disabled),\n        [disableSubmit, disabled, isPaymentDataRequired, method],\n    );\n\n    const initializeSepa = useCallback(async () => {\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method]);\n\n    const deinitializeSepa = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeSepa();\n\n        return () => {\n            void deinitializeSepa();\n        };\n    }, [deinitializeSepa, initializeSepa]);\n\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n    } = useSepaInstruments(method);\n\n    const shouldShowForm = !shouldShowInstrumentFieldset || shouldCreateNewInstrument;\n\n    useEffect(() => {\n        setValidationSchema(method, getSepaValidationSchema(language, shouldShowForm));\n    }, [language, shouldShowForm, setValidationSchema, method]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (isInstrumentFeatureAvailable) {\n            void loadInstrumentsOrThrow();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const isLoading = isLoadingInstruments();\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        {language.translate('payment.bluesnap_direct_sepa_direct_debit')}\n                    </Legend>\n                }\n                style={{ paddingBottom: '1rem' }}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <div className=\"checkout-ach-form__instrument\">\n                        <AccountInstrumentFieldset\n                            instruments={accountInstruments}\n                            onSelectInstrument={handleSelectInstrument}\n                            onUseNewInstrument={handleUseNewInstrument}\n                            selectedInstrument={currentInstrument}\n                        />\n                    </div>\n                )}\n                {shouldShowForm && (\n                    <>\n                        <BlueSnapDirectTextField\n                            autoComplete=\"iban\"\n                            labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                            name=\"iban\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.first_name_label')}\n                            name=\"firstName\"\n                            useFloatingLabel={true}\n                        />\n                        <BlueSnapDirectTextField\n                            labelContent={language.translate('address.last_name_label')}\n                            name=\"lastName\"\n                            useFloatingLabel={true}\n                        />\n                    </>\n                )}\n\n                <CheckboxFormField\n                    labelContent={language.translate(\n                        'payment.bluesnap_direct_sepa_mandate_disclaimer',\n                        {\n                            creditorName: method.initializationData.sepaCreditorCompanyName,\n                        },\n                    )}\n                    name=\"shopperPermission\"\n                    onChange={toggleSubmitButton}\n                />\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={accountInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </Fieldset>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectSepaPaymentMethod,\n    [{ id: 'sepa_direct_debit', gateway: 'bluesnapdirect' }],\n);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport default memoize(function getIdealValidationSchema(language: LanguageService): ObjectSchema {\n    return object({\n        bic: string().required(language.translate('payment.ideal_bic_required')),\n    });\n});\n","import React, { type FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectSelectField from './fields/BlueSnapDirectSelectField';\nimport getIdealValidationSchema from './validation-schemas/getIdealValidationSchema';\n\nconst BlueSnapDirectIdealPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService: { initializePayment, deinitializePayment },\n    paymentForm: { setValidationSchema },\n    language,\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const { idealIssuers } = method.initializationData;\n\n    const idealIssuersSelectOptions = idealIssuers.map((issuer) => ({\n        value: issuer.issuerId,\n        label: issuer.issuerName,\n    }));\n\n    const initializeIdeal = useCallback(async () => {\n        setValidationSchema(method, getIdealValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, method, setValidationSchema, language]);\n\n    const deinitializeIdeal = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializeIdeal();\n\n        return () => {\n            void deinitializeIdeal();\n        };\n    }, [deinitializeIdeal, initializeIdeal]);\n\n    return (\n        <Fieldset\n            legend={<Legend hidden>{language.translate('payment.ideal.label')}</Legend>}\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectSelectField\n                labelContent={language.translate('payment.ideal.label')}\n                name=\"bic\"\n                options={{\n                    helperLabel: language.translate('payment.select_your_bank'),\n                    items: idealIssuersSelectOptions,\n                }}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectIdealPaymentMethod,\n    [{ id: 'ideal', gateway: 'bluesnapdirect' }],\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, {\n    createRef,\n    type FunctionComponent,\n    type RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport {\n    HostedPaymentComponent,\n    type HostedPaymentComponentProps,\n} from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay, Modal } from '@bigcommerce/checkout/ui';\n\nexport type BlueSnapV2PaymentMethodProps = HostedPaymentComponentProps;\n\ninterface BlueSnapV2PaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelBlueSnapV2Payment?(): void;\n}\n\nconst BlueSnapV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [isLoadingIframe, setisLoadingIframe] = useState<boolean>(false);\n    const [paymentPageContent, setPaymentPageContent] = useState<HTMLElement>();\n    const ref = useRef<BlueSnapV2PaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n\n    const cancelBlueSnapV2ModalFlow = useCallback(() => {\n        setPaymentPageContent(undefined);\n\n        if (ref.current.cancelBlueSnapV2Payment) {\n            ref.current.cancelBlueSnapV2Payment();\n            ref.current.cancelBlueSnapV2Payment = undefined;\n        }\n    }, []);\n\n    const initializeBlueSnapV2Payment = useCallback(\n        (options: PaymentInitializeOptions) => {\n            return checkoutService.initializePayment({\n                ...options,\n                bluesnapv2: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setPaymentPageContent(content);\n                        setisLoadingIframe(true);\n                        ref.current.cancelBlueSnapV2Payment = cancel;\n                    },\n                    style: {\n                        border: '1px solid lightgray',\n                        height: '60vh',\n                        width: '100%',\n                    },\n                },\n            });\n        },\n        [checkoutService],\n    );\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (ref.current.paymentPageContentRef.current && paymentPageContent) {\n            paymentPageContent.addEventListener('load', () => {\n                setisLoadingIframe(false);\n            });\n            ref.current.paymentPageContentRef.current.appendChild(paymentPageContent);\n        }\n    }, [paymentPageContent]);\n\n    return (\n        <>\n            <HostedPaymentComponent\n                {...rest}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                initializePayment={initializeBlueSnapV2Payment}\n                method={method}\n                paymentForm={paymentForm}\n            />\n            <Modal\n                additionalModalClassName=\"modal--bluesnap\"\n                isOpen={!!paymentPageContent}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelBlueSnapV2ModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <LoadingOverlay isLoading={isLoadingIframe}>\n                    <div ref={ref.current.paymentPageContentRef} />\n                </LoadingOverlay>\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapV2PaymentMethod,\n    [{ gateway: 'bluesnapv2' }],\n);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport default memoize(function getPayByBankValidationSchema(\n    language: LanguageService,\n): ObjectSchema {\n    return object({\n        iban: string()\n            .matches(\n                /^[a-zA-Z0-9]+$/i,\n                language.translate(`address.invalid_characters_error`, { label: 'IBAN' }),\n            )\n            .required(language.translate('payment.pay_by_bank_iban_required')),\n    });\n});\n","import React, { type FunctionComponent, useCallback, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport { isBlueSnapDirectInitializationData } from './BlueSnapDirectInitializationData';\nimport BlueSnapDirectTextField from './fields/BlueSnapDirectTextField';\nimport getPayByBankValidationSchema from './validation-schemas/getPayByBankValidationSchema';\n\nconst BlueSnapDirectPayByBankPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    language,\n    paymentForm: { setValidationSchema },\n    checkoutService: { initializePayment, deinitializePayment },\n}) => {\n    if (!isBlueSnapDirectInitializationData(method.initializationData)) {\n        throw new Error('Unable to get initialization data');\n    }\n\n    const initializePayByBank = useCallback(async () => {\n        setValidationSchema(method, getPayByBankValidationSchema(language));\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [initializePayment, language, method, setValidationSchema]);\n\n    const deinitializePayByBank = useCallback(async () => {\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    }, [deinitializePayment, method.gateway, method.id]);\n\n    useEffect(() => {\n        void initializePayByBank();\n\n        return () => {\n            void deinitializePayByBank();\n        };\n    }, [deinitializePayByBank, initializePayByBank]);\n\n    return (\n        <Fieldset\n            legend={\n                <Legend hidden>{language.translate('payment.bluesnap_direct_iban.label')}</Legend>\n            }\n            style={{ paddingBottom: '1rem' }}\n        >\n            <BlueSnapDirectTextField\n                autoComplete=\"iban\"\n                labelContent={language.translate('payment.bluesnap_direct_iban.label')}\n                name=\"iban\"\n                useFloatingLabel={true}\n            />\n        </Fieldset>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BlueSnapDirectPayByBankPaymentMethod,\n    [{ id: 'pay_by_bank', gateway: 'bluesnapdirect' }],\n);\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n"],"names":["props","description","isInitializing","initializePayment","method","onUnhandledError","noop","deinitializePayment","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","trustedShippingAddress","checkoutService","checkoutState","isUsingMultiShipping","data","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","cart","config","customer","Error","currentMethodInstruments","trustedInstruments","isNewAddress","length","isInstrumentFeatureAvailable","id","gateway","paymentMethod","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","useCallback","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","methodId","error","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","BluesnapECPAccountType","memo","maxLength","useFloatingLabel","rest","renderInput","field","DynamicInput","name","autoComplete","fieldType","DynamicFormFieldType","TELEPHONE","isFloatingLabelEnabled","FormField","input","options","helperLabel","items","rows","renderSelect","DROPDOWM","placeholder","language","shouldRenderCompanyName","translate","label","value","ConsumerChecking","ConsumerSavings","CorporateChecking","CorporateSavings","labelContent","currentInstrument","setCurrentInstrument","paymentForm","setFieldValue","accountInstruments","useMemo","isAchInstrument","isGuest","Boolean","isVaultingEnabled","shouldCreateNewInstrument","shouldRenderFields","schema","required","accountNumber","matches","min","max","routingNumber","companyName","accountType","toResolvableComponent","getBillingAddress","disableSubmit","setValidationSchema","getFormValues","disabled","setDisabled","onChange","shopperPermission","initializeEcp","deinitializeEcp","shouldShowForm","company","getEcpValidationSchema","LoadingOverlay","Fieldset","legend","Legend","hidden","style","paddingBottom","AccountInstrumentFieldset","CheckboxFormField","StoreInstrumentFieldset","HostedPaymentComponent","isBlueSnapDirectInitializationData","object","sepaCreditorCompanyName","array","idealIssuers","Array","isArray","isSepaInstrument","iban","firstName","lastName","initializationData","toggleSubmitButton","initializeSepa","deinitializeSepa","getSepaValidationSchema","creditorName","bic","idealIssuersSelectOptions","map","issuer","issuerId","issuerName","initializeIdeal","getIdealValidationSchema","deinitializeIdeal","isLoadingIframe","setisLoadingIframe","paymentPageContent","setPaymentPageContent","ref","useRef","paymentPageContentRef","createRef","cancelBlueSnapV2ModalFlow","current","cancelBlueSnapV2Payment","initializeBlueSnapV2Payment","bluesnapv2","onLoad","content","cancel","border","height","width","appendPaymentPageContent","addEventListener","appendChild","Modal","additionalModalClassName","isOpen","onAfterOpen","onRequestClose","shouldShowCloseButton","initializePayByBank","getPayByBankValidationSchema","deinitializePayByBank","checkoutSettings","isCardVaultingEnabled"],"sourceRoot":""}